{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true,
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Looking in indexes: https://installer:****@sgo-ap858.go.rshbank.ru:8443/repository/datalab-pypi/simple, https://installer:****@sgo-ap858.go.rshbank.ru:8443/repository/datalab-pypi/simple\n",
      "Requirement already satisfied: dask in /opt/conda/lib/python3.8/site-packages (2022.9.0)\n",
      "Requirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.8/site-packages (from dask) (21.3)\n",
      "Requirement already satisfied: pyyaml>=5.3.1 in /opt/conda/lib/python3.8/site-packages (from dask) (5.3.1)\n",
      "Requirement already satisfied: partd>=0.3.10 in /opt/conda/lib/python3.8/site-packages (from dask) (1.3.0)\n",
      "Requirement already satisfied: toolz>=0.8.2 in /opt/conda/lib/python3.8/site-packages (from dask) (0.12.0)\n",
      "Requirement already satisfied: cloudpickle>=1.1.1 in /opt/conda/lib/python3.8/site-packages (from dask) (1.6.0)\n",
      "Requirement already satisfied: fsspec>=0.6.0 in /opt/conda/lib/python3.8/site-packages (from dask) (2022.8.2)\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.8/site-packages (from packaging>=20.0->dask) (2.4.7)\n",
      "Requirement already satisfied: locket in /opt/conda/lib/python3.8/site-packages (from partd>=0.3.10->dask) (1.0.0)\n",
      "Looking in indexes: https://installer:****@sgo-ap858.go.rshbank.ru:8443/repository/datalab-pypi/simple, https://installer:****@sgo-ap858.go.rshbank.ru:8443/repository/datalab-pypi/simple\n",
      "Requirement already satisfied: scikit-learn in /opt/conda/lib/python3.8/site-packages (1.1.2)\n",
      "Requirement already satisfied: joblib>=1.0.0 in /opt/conda/lib/python3.8/site-packages (from scikit-learn) (1.0.1)\n",
      "Requirement already satisfied: scipy>=1.3.2 in /opt/conda/lib/python3.8/site-packages (from scikit-learn) (1.6.0)\n",
      "Requirement already satisfied: numpy>=1.17.3 in /opt/conda/lib/python3.8/site-packages (from scikit-learn) (1.19.5)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.8/site-packages (from scikit-learn) (2.1.0)\n",
      "Looking in indexes: https://installer:****@sgo-ap858.go.rshbank.ru:8443/repository/datalab-pypi/simple, https://installer:****@sgo-ap858.go.rshbank.ru:8443/repository/datalab-pypi/simple\n",
      "Requirement already satisfied: shap in /opt/conda/lib/python3.8/site-packages (0.40.0)\n",
      "Requirement already satisfied: numpy in /opt/conda/lib/python3.8/site-packages (from shap) (1.19.5)\n",
      "Requirement already satisfied: numba in /opt/conda/lib/python3.8/site-packages (from shap) (0.54.1)\n",
      "Requirement already satisfied: tqdm>4.25.0 in /opt/conda/lib/python3.8/site-packages (from shap) (4.54.1)\n",
      "Requirement already satisfied: slicer==0.0.7 in /opt/conda/lib/python3.8/site-packages (from shap) (0.0.7)\n",
      "Requirement already satisfied: scipy in /opt/conda/lib/python3.8/site-packages (from shap) (1.6.0)\n",
      "Requirement already satisfied: cloudpickle in /opt/conda/lib/python3.8/site-packages (from shap) (1.6.0)\n",
      "Requirement already satisfied: pandas in /home/jovyan/.local/lib/python3.8/site-packages (from shap) (1.4.4)\n",
      "Requirement already satisfied: packaging>20.9 in /opt/conda/lib/python3.8/site-packages (from shap) (21.3)\n",
      "Requirement already satisfied: scikit-learn in /opt/conda/lib/python3.8/site-packages (from shap) (1.1.2)\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.8/site-packages (from packaging>20.9->shap) (2.4.7)\n",
      "Requirement already satisfied: llvmlite<0.38,>=0.37.0rc1 in /opt/conda/lib/python3.8/site-packages (from numba->shap) (0.37.0)\n",
      "Requirement already satisfied: setuptools in /opt/conda/lib/python3.8/site-packages (from numba->shap) (51.1.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.8/site-packages (from pandas->shap) (2020.5)\n",
      "Requirement already satisfied: python-dateutil>=2.8.1 in /opt/conda/lib/python3.8/site-packages (from pandas->shap) (2.8.1)\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.8/site-packages (from python-dateutil>=2.8.1->pandas->shap) (1.15.0)\n",
      "Requirement already satisfied: joblib>=1.0.0 in /opt/conda/lib/python3.8/site-packages (from scikit-learn->shap) (1.0.1)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.8/site-packages (from scikit-learn->shap) (2.1.0)\n",
      "Looking in indexes: https://installer:****@sgo-ap858.go.rshbank.ru:8443/repository/datalab-pypi/simple, https://installer:****@sgo-ap858.go.rshbank.ru:8443/repository/datalab-pypi/simple\n",
      "Requirement already satisfied: pandas in /home/jovyan/.local/lib/python3.8/site-packages (1.4.4)\n",
      "Requirement already satisfied: python-dateutil>=2.8.1 in /opt/conda/lib/python3.8/site-packages (from pandas) (2.8.1)\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.8/site-packages (from pandas) (2020.5)\n",
      "Requirement already satisfied: numpy>=1.18.5 in /opt/conda/lib/python3.8/site-packages (from pandas) (1.19.5)\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.8/site-packages (from python-dateutil>=2.8.1->pandas) (1.15.0)\n",
      "Looking in indexes: https://installer:****@sgo-ap858.go.rshbank.ru:8443/repository/datalab-pypi/simple, https://installer:****@sgo-ap858.go.rshbank.ru:8443/repository/datalab-pypi/simple\n",
      "Requirement already satisfied: catboost in /home/jovyan/.local/lib/python3.8/site-packages (1.0.6)\n",
      "Requirement already satisfied: matplotlib in /opt/conda/lib/python3.8/site-packages (from catboost) (3.3.3)\n",
      "Requirement already satisfied: numpy>=1.16.0 in /opt/conda/lib/python3.8/site-packages (from catboost) (1.19.5)\n",
      "Requirement already satisfied: six in /opt/conda/lib/python3.8/site-packages (from catboost) (1.15.0)\n",
      "Requirement already satisfied: graphviz in /home/jovyan/.local/lib/python3.8/site-packages (from catboost) (0.20.1)\n",
      "Requirement already satisfied: plotly in /home/jovyan/.local/lib/python3.8/site-packages (from catboost) (5.10.0)\n",
      "Requirement already satisfied: scipy in /opt/conda/lib/python3.8/site-packages (from catboost) (1.6.0)\n",
      "Requirement already satisfied: pandas>=0.24.0 in /home/jovyan/.local/lib/python3.8/site-packages (from catboost) (1.4.4)\n",
      "Requirement already satisfied: python-dateutil>=2.8.1 in /opt/conda/lib/python3.8/site-packages (from pandas>=0.24.0->catboost) (2.8.1)\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.8/site-packages (from pandas>=0.24.0->catboost) (2020.5)\n",
      "Requirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.8/site-packages (from matplotlib->catboost) (8.1.0)\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.8/site-packages (from matplotlib->catboost) (0.10.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.8/site-packages (from matplotlib->catboost) (1.3.1)\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /opt/conda/lib/python3.8/site-packages (from matplotlib->catboost) (2.4.7)\n",
      "Requirement already satisfied: tenacity>=6.2.0 in /home/jovyan/.local/lib/python3.8/site-packages (from plotly->catboost) (8.0.1)\n"
     ]
    }
   ],
   "source": [
    "!pip install dask\n",
    "!pip install -U scikit-learn #обновление\n",
    "!pip install shap #для определения важных полей\n",
    "!pip install --user pandas -U #конкретно для себя, т.к. может не хватить прав\n",
    "!pip install --user catboost\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Этот блок можно не выполнять, библиотеки нужны для графического отображения процесса обучения catboost, \n",
    "# но пока данная функция почему-то не работает.\n",
    "#!pip install ipywidgets\n",
    "#!pip install jupyter_contrib_nbextensions\n",
    "#!jupyter contrib nbextension install --user\n",
    "#!jupyter nbextension enable --py widgetsnbextension #чтобы работал параметр plot для catboost\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import time\n",
    "from datetime import datetime\n",
    "import dask.dataframe as dd\n",
    "\n",
    "from dask.diagnostics import ProgressBar\n",
    "from dask.diagnostics import Profiler\n",
    "from dask.diagnostics import ResourceProfiler\n",
    "import gc\n",
    "import pickle\n",
    "import shap\n",
    "import catboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.linear_model import LogisticRegression, LogisticRegressionCV\n",
    "from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV, cross_val_score\n",
    "from sklearn.preprocessing import StandardScaler, RobustScaler, LabelEncoder, OneHotEncoder\n",
    "#from sklearn.pipeline import make_pipeline\n",
    "from sklearn.metrics import precision_score, recall_score, auc, accuracy_score, roc_auc_score,f1_score,log_loss,\\\n",
    "                            classification_report, roc_curve\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "path_dmarts_for_score = '/home/jovyan/work/share/DCIDB/Score_models/DMARTS_FOR_SCORE/'\n",
    "path_score_models = '/home/jovyan/work/share/DCIDB/Score_models/'\n",
    "path_function = '/home/jovyan/work/share/DCIDB/Score_models/Function/'\n",
    "path_folder = '/home/jovyan/work/share/DCIDB/Score_models/CC/'\n",
    "name_df_pikle = path_folder+'df_DMART_FOR_SCORE_NEW_2022_08_01.pkl'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys  \n",
    "sys.path.append(path_function)  \n",
    "# '/home/jovyan/work/share/DCIDB/Score_models/Function'\n",
    "from func_for_dmart_score import * "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "WORK_MODE = 1 #1 читаем оригинальный csv, 2 сразу читаем сохраненный pkl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "pbar = ProgressBar()\n",
    "pbar.register()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_y = pd.read_csv('CC_TARGETS_AUG2022.csv', encoding='utf', sep=',', dtype={'target':'uint8'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_y['target']=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00_Ч_310061757556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>00_Ч_333504042967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>00_Ч_335966262372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>00_Ч_336002012394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>00_Ч_336005244321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9600</th>\n",
       "      <td>78_Ч_586258332644</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9601</th>\n",
       "      <td>78_Ч_586258911137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9602</th>\n",
       "      <td>78_Ч_586816638926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9603</th>\n",
       "      <td>78_Ч_587346187111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9604</th>\n",
       "      <td>78_Ч_588584293321</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9605 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   code\n",
       "0     00_Ч_310061757556\n",
       "1     00_Ч_333504042967\n",
       "2     00_Ч_335966262372\n",
       "3     00_Ч_336002012394\n",
       "4     00_Ч_336005244321\n",
       "...                 ...\n",
       "9600  78_Ч_586258332644\n",
       "9601  78_Ч_586258911137\n",
       "9602  78_Ч_586816638926\n",
       "9603  78_Ч_587346187111\n",
       "9604  78_Ч_588584293321\n",
       "\n",
       "[9605 rows x 1 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Начинаю работу, тек.время: 2022-10-11 14:51:44\n",
      "\u001b[1mШаг: 1\u001b[0m\n",
      "[########################################] | 100% Completed | 332.01 s\n",
      "[########################################] | 100% Completed | 332.05 s\n",
      "Кол-во записей в датафрейме: 13206413, размер датафрейма:10162.14 MB\n",
      "Текущее время: 2022-10-11 14:57:29\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 13206413 entries, 0 to 20587\n",
      "Columns: 100 entries, code to cc_approved_flg_0m\n",
      "dtypes: float64(77), int32(15), object(1), uint8(7)\n",
      "memory usage: 9.9 GB\n",
      "None\n",
      "Переиндексация\n",
      "Начинаю left join с таргетом, тек.время: 2022-10-11 14:57:30\n",
      "Закончил left join. Общее время операции: 0:00:23.118982\n",
      "Кол-во таргетов 7107\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 13206413 entries, 0 to 13206412\n",
      "Columns: 101 entries, code to cc_approved_flg_0m\n",
      "dtypes: float64(77), int32(15), object(1), uint8(8)\n",
      "memory usage: 9.9 GB\n",
      "None\n",
      "Меняю типы полей, этап 1\n",
      "Всего колонок: 101\n",
      "Обработано колонок: 101\n",
      "Изменено типов колонок: 60\n",
      "Общее время операции: 0:02:36.567765\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 13206413 entries, 0 to 13206412\n",
      "Columns: 101 entries, code to cc_approved_flg_0m\n",
      "dtypes: float64(39), object(1), uint16(19), uint8(42)\n",
      "memory usage: 6.3 GB\n",
      "None\n",
      "Заполняю пустые значения\n",
      "Меняю типы полей, этап 2\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 13206413 entries, 0 to 13206412\n",
      "Columns: 101 entries, code to cc_approved_flg_0m\n",
      "dtypes: float32(39), object(1), uint16(19), uint8(42)\n",
      "memory usage: 4.4 GB\n",
      "None\n",
      "Текущее время: 2022-10-11 15:01:55\n",
      "\u001b[1m Информация о df_score на шаге 1:\u001b[0m\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 13206413 entries, 0 to 13206412\n",
      "Columns: 101 entries, code to cc_approved_flg_0m\n",
      "dtypes: float32(39), object(1), uint16(19), uint8(42)\n",
      "memory usage: 4.4 GB\n",
      "None\n",
      "Общее время работы процесса: 0:10:15.694170\n",
      "\u001b[1mШаг: 2\u001b[0m\n",
      "[########################################] | 100% Completed | 424.81 s\n",
      "[########################################] | 100% Completed | 424.63 s\n",
      "Кол-во записей в датафрейме: 13206413, размер датафрейма:14357.86 MB\n",
      "Текущее время: 2022-10-11 15:09:22\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 13206413 entries, 0 to 20587\n",
      "Columns: 150 entries, cc_booked_flg_0m to channel_kc_1q\n",
      "dtypes: float64(133), int32(17)\n",
      "memory usage: 14.0 GB\n",
      "None\n",
      "Переиндексация\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 13206413 entries, 0 to 13206412\n",
      "Columns: 150 entries, cc_booked_flg_0m to channel_kc_1q\n",
      "dtypes: float64(133), int32(17)\n",
      "memory usage: 13.9 GB\n",
      "None\n",
      "Меняю типы полей, этап 1\n",
      "Всего колонок: 150\n",
      "Обработано колонок: 150\n",
      "Изменено типов колонок: 62\n",
      "Общее время операции: 0:02:55.586158\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 13206413 entries, 0 to 13206412\n",
      "Columns: 150 entries, cc_booked_flg_0m to channel_kc_1q\n",
      "dtypes: float64(88), uint16(25), uint8(37)\n",
      "memory usage: 9.7 GB\n",
      "None\n",
      "Заполняю пустые значения\n",
      "Меняю типы полей, этап 2\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 13206413 entries, 0 to 13206412\n",
      "Columns: 150 entries, cc_booked_flg_0m to channel_kc_1q\n",
      "dtypes: float32(88), uint16(25), uint8(37)\n",
      "memory usage: 5.4 GB\n",
      "None\n",
      "Текущее время: 2022-10-11 15:17:24\n",
      "\u001b[1m Информация о df_score на шаге 2:\u001b[0m\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 13206413 entries, 0 to 13206412\n",
      "Columns: 251 entries, code to channel_kc_1q\n",
      "dtypes: float32(127), object(1), uint16(44), uint8(79)\n",
      "memory usage: 9.8 GB\n",
      "None\n",
      "Общее время работы процесса: 0:25:50.425979\n",
      "\u001b[1mШаг: 3\u001b[0m\n",
      "[########################################] | 100% Completed | 424.03 s\n",
      "[########################################] | 100% Completed | 423.81 s\n",
      "Кол-во записей в датафрейме: 13206413, размер датафрейма:14357.86 MB\n",
      "Текущее время: 2022-10-11 15:24:56\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 13206413 entries, 0 to 20587\n",
      "Columns: 150 entries, channel_atm_1q to dbo_invest_sum_2q\n",
      "dtypes: float64(133), int32(17)\n",
      "memory usage: 14.0 GB\n",
      "None\n",
      "Переиндексация\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 13206413 entries, 0 to 13206412\n",
      "Columns: 150 entries, channel_atm_1q to dbo_invest_sum_2q\n",
      "dtypes: float64(133), int32(17)\n",
      "memory usage: 13.9 GB\n",
      "None\n",
      "Меняю типы полей, этап 1\n",
      "Всего колонок: 150\n",
      "Обработано колонок: 150\n",
      "Изменено типов колонок: 56\n",
      "Общее время операции: 0:01:33.026581\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 13206413 entries, 0 to 13206412\n",
      "Columns: 150 entries, channel_atm_1q to dbo_invest_sum_2q\n",
      "dtypes: float64(94), uint16(33), uint8(23)\n",
      "memory usage: 10.3 GB\n",
      "None\n",
      "Заполняю пустые значения\n",
      "Меняю типы полей, этап 2\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 13206413 entries, 0 to 13206412\n",
      "Columns: 150 entries, channel_atm_1q to dbo_invest_sum_2q\n",
      "dtypes: float32(94), uint16(33), uint8(23)\n",
      "memory usage: 5.7 GB\n",
      "None\n",
      "Текущее время: 2022-10-11 15:32:16\n",
      "\u001b[1m Информация о df_score на шаге 3:\u001b[0m\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 13206413 entries, 0 to 13206412\n",
      "Columns: 401 entries, code to dbo_invest_sum_2q\n",
      "dtypes: float32(221), object(1), uint16(77), uint8(102)\n",
      "memory usage: 15.5 GB\n",
      "None\n",
      "Общее время работы процесса: 0:40:48.300435\n",
      "\u001b[1mШаг: 4\u001b[0m\n",
      "[########################################] | 100% Completed | 525.81 s\n",
      "[########################################] | 100% Completed | 525.64 s\n",
      "Кол-во записей в датафрейме: 13206413, размер датафрейма:18791.17 MB\n",
      "Текущее время: 2022-10-11 15:41:40\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 13206413 entries, 0 to 20587\n",
      "Columns: 200 entries, min_ca_rur_3q to max_dc_total_rur_daily_4q\n",
      "dtypes: float64(171), int32(29)\n",
      "memory usage: 18.4 GB\n",
      "None\n",
      "Переиндексация\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 13206413 entries, 0 to 13206412\n",
      "Columns: 200 entries, min_ca_rur_3q to max_dc_total_rur_daily_4q\n",
      "dtypes: float64(171), int32(29)\n",
      "memory usage: 18.3 GB\n",
      "None\n",
      "Меняю типы полей, этап 1\n",
      "Всего колонок: 200\n",
      "Обработано колонок: 200\n",
      "Изменено типов колонок: 52\n",
      "Общее время операции: 0:01:17.645143\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 13206413 entries, 0 to 13206412\n",
      "Columns: 200 entries, min_ca_rur_3q to max_dc_total_rur_daily_4q\n",
      "dtypes: float64(148), uint16(39), uint8(13)\n",
      "memory usage: 15.7 GB\n",
      "None\n",
      "Заполняю пустые значения\n",
      "Меняю типы полей, этап 2\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 13206413 entries, 0 to 13206412\n",
      "Columns: 200 entries, min_ca_rur_3q to max_dc_total_rur_daily_4q\n",
      "dtypes: float32(148), uint16(39), uint8(13)\n",
      "memory usage: 8.4 GB\n",
      "None\n",
      "Текущее время: 2022-10-11 15:56:55\n",
      "\u001b[1m Информация о df_score на шаге 4:\u001b[0m\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 13206413 entries, 0 to 13206412\n",
      "Columns: 601 entries, code to max_dc_total_rur_daily_4q\n",
      "dtypes: float32(369), object(1), uint16(116), uint8(115)\n",
      "memory usage: 23.9 GB\n",
      "None\n",
      "Общее время работы процесса: 1:05:35.070366\n",
      "\u001b[1mШаг: 5\u001b[0m\n",
      "[########################################] | 100% Completed | 244.78 s\n",
      "[########################################] | 100% Completed | 244.54 s\n",
      "Кол-во записей в датафрейме: 13206413, размер датафрейма:6612.17 MB\n",
      "Текущее время: 2022-10-11 16:01:32\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 13206413 entries, 0 to 20587\n",
      "Columns: 68 entries, avg_dc_cash_cnt_daily_4q to age\n",
      "dtypes: float64(62), int32(5), uint8(1)\n",
      "memory usage: 6.5 GB\n",
      "None\n",
      "Переиндексация\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 13206413 entries, 0 to 13206412\n",
      "Columns: 68 entries, avg_dc_cash_cnt_daily_4q to age\n",
      "dtypes: float64(62), int32(5), uint8(1)\n",
      "memory usage: 6.4 GB\n",
      "None\n",
      "Меняю типы полей, этап 1\n",
      "Всего колонок: 68\n",
      "Обработано колонок: 68\n",
      "Изменено типов колонок: 32\n",
      "Общее время операции: 0:00:57.245370\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 13206413 entries, 0 to 13206412\n",
      "Columns: 68 entries, avg_dc_cash_cnt_daily_4q to age\n",
      "dtypes: float64(36), uint16(13), uint8(19)\n",
      "memory usage: 4.1 GB\n",
      "None\n",
      "Заполняю пустые значения\n",
      "Меняю типы полей, этап 2\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 13206413 entries, 0 to 13206412\n",
      "Columns: 68 entries, avg_dc_cash_cnt_daily_4q to age\n",
      "dtypes: float32(36), uint16(13), uint8(19)\n",
      "memory usage: 2.3 GB\n",
      "None\n",
      "Текущее время: 2022-10-11 16:03:24\n",
      "\u001b[1m Информация о df_score на шаге 5:\u001b[0m\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 13206413 entries, 0 to 13206412\n",
      "Columns: 669 entries, code to age\n",
      "dtypes: float32(405), object(1), uint16(129), uint8(134)\n",
      "memory usage: 26.3 GB\n",
      "None\n",
      "Общее время работы процесса: 1:12:02.589952\n"
     ]
    }
   ],
   "source": [
    "if WORK_MODE == 1:\n",
    "    list_range_columns = [(0, 100), (100, 250), (250, 400), (400, 600), (600, 668)]\n",
    "    #list_range_columns = [(0,50), (600, 668)]\n",
    "    df_score = read_big_csv(path_dmarts_for_score+'DMART_FOR_SCORE_NEW_2022_08_01.csv',\n",
    "                            list_range_columns, dtype_dmart_for_score, list_not_int_dmart_for_score, df_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "if WORK_MODE == 1:\n",
    "    df_score.to_pickle(name_df_pikle) #сохраняем загруженный csv в формате pkl\n",
    "    print(f'Тестирование Загружаю сохраненный датафрейм в формате pkl: {name_df_pikle}')\n",
    "    global_start_time = datetime.now()\n",
    "    df2_score = pd.read_pickle(name_df_pikle)\n",
    "    global_end_time = datetime.now()\n",
    "    print(f'Общее время операции: {global_end_time - global_start_time}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "if WORK_MODE == 1:\n",
    "    #проверка на равенство двух датафреймов\n",
    "    print (df_score.equals(df2_score))\n",
    "    #print(df_score.info(memory_usage='deep', verbose=False))\n",
    "    #print(df2_score.info(memory_usage='deep', verbose=False))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "17"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "if WORK_MODE == 1:\n",
    "    del df2_score\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Загружаю сохраненный датафрейм в формате pkl: /home/jovyan/work/share/DCIDB/Score_models/CC/df_DMART_FOR_SCORE_NEW_2022_08_01.pkl\n"
     ]
    }
   ],
   "source": [
    "#\n",
    "print(f'Загружаю сохраненный датафрейм в формате pkl: {name_df_pikle}')\n",
    "df_score = pd.read_pickle(name_df_pikle)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>code</th>\n",
       "      <th>target</th>\n",
       "      <th>mob</th>\n",
       "      <th>type_mob</th>\n",
       "      <th>drchk_flg</th>\n",
       "      <th>urzk_flg</th>\n",
       "      <th>active_flg</th>\n",
       "      <th>is_dc</th>\n",
       "      <th>is_ca</th>\n",
       "      <th>is_sa</th>\n",
       "      <th>...</th>\n",
       "      <th>zp_card_flg</th>\n",
       "      <th>income_zp_pens_cr</th>\n",
       "      <th>guarantee_debts</th>\n",
       "      <th>co_borrower_debts</th>\n",
       "      <th>other_card_active_flg</th>\n",
       "      <th>cr_to_pers_money_ratio</th>\n",
       "      <th>zp_1_mnth</th>\n",
       "      <th>zp_3_mnth</th>\n",
       "      <th>zp_6_mnth</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00_Ч_100627689769</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>00_Ч_101263074960</td>\n",
       "      <td>0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>00_Ч_101290451657</td>\n",
       "      <td>0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>00_Ч_102495088084</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>00_Ч_102497098825</td>\n",
       "      <td>0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>00_Ч_104158690011</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>00_Ч_106130325755</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>61.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>00_Ч_106131468374</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>61.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>00_Ч_106135456855</td>\n",
       "      <td>0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>57.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>00_Ч_108844918981</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 669 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                code  target   mob  type_mob  drchk_flg  urzk_flg  active_flg  \\\n",
       "0  00_Ч_100627689769       0  -1.0      -1.0          0         0           0   \n",
       "1  00_Ч_101263074960       0  47.0      37.0          0         0           1   \n",
       "2  00_Ч_101290451657       0  39.0      37.0          0         0           1   \n",
       "3  00_Ч_102495088084       0  -1.0      -1.0          0         0           0   \n",
       "4  00_Ч_102497098825       0  67.0      32.0          0         0           0   \n",
       "5  00_Ч_104158690011       0  -1.0      -1.0          0         0           0   \n",
       "6  00_Ч_106130325755       0   2.0       1.0          0         0           1   \n",
       "7  00_Ч_106131468374       0  -1.0      -1.0          0         0           0   \n",
       "8  00_Ч_106135456855       0  55.0      25.0          0         0           1   \n",
       "9  00_Ч_108844918981       0  -1.0      -1.0          0         0           0   \n",
       "\n",
       "   is_dc  is_ca  is_sa  ...  zp_card_flg  income_zp_pens_cr  guarantee_debts  \\\n",
       "0      0      0      0  ...            0                0.0              0.0   \n",
       "1      0      0      0  ...            0                0.0              0.0   \n",
       "2      0      0      0  ...            0                0.0              0.0   \n",
       "3      0      0      0  ...            0                0.0              0.0   \n",
       "4      0      0      0  ...            0                0.0              0.0   \n",
       "5      0      0      0  ...            0                0.0              0.0   \n",
       "6      1      1      0  ...            0                0.0              0.0   \n",
       "7      0      0      0  ...            0                0.0              0.0   \n",
       "8      0      0      0  ...            0                0.0              0.0   \n",
       "9      0      0      0  ...            0                0.0              0.0   \n",
       "\n",
       "   co_borrower_debts  other_card_active_flg  cr_to_pers_money_ratio  \\\n",
       "0                0.0                      0                     0.0   \n",
       "1                0.0                      0                     0.0   \n",
       "2                0.0                      0                     0.0   \n",
       "3                0.0                      0                     0.0   \n",
       "4                0.0                      0                     0.0   \n",
       "5                0.0                      0                     0.0   \n",
       "6                0.0                      1                     0.0   \n",
       "7                0.0                      0                     0.0   \n",
       "8                0.0                      0                     0.0   \n",
       "9                0.0                      0                     0.0   \n",
       "\n",
       "   zp_1_mnth  zp_3_mnth  zp_6_mnth   age  \n",
       "0        0.0        0.0        0.0  29.0  \n",
       "1        0.0        0.0        0.0  36.0  \n",
       "2        0.0        0.0        0.0  45.0  \n",
       "3        0.0        0.0        0.0  41.0  \n",
       "4        0.0        0.0        0.0  45.0  \n",
       "5        0.0        0.0        0.0  38.0  \n",
       "6        0.0        0.0        0.0  61.0  \n",
       "7        0.0        0.0        0.0  61.0  \n",
       "8        0.0        0.0        0.0  57.0  \n",
       "9        0.0        0.0        0.0  37.0  \n",
       "\n",
       "[10 rows x 669 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_score.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n"
     ]
    }
   ],
   "source": [
    "df_score['rf'] = pd.to_numeric(df_score.code.str[:2], downcast='integer')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_score['rf'].isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('int8')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_score['rf'].dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7107\n",
      "9605\n",
      "7107\n"
     ]
    }
   ],
   "source": [
    "print(len(df_score[df_score.target==1]))\n",
    "print(len(df_y))\n",
    "print(df_score.target.sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Перемешаю данные, чтобы часть удалить, тек.время: 2022-10-24 10:14:13\n",
      "Закончил перемешивать данные. Общее время операции: 0:02:25.607894\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "121"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Перемешивание данных, чтобы потом можно было рандомно порезать нетаргеты\n",
    "global_start_time = datetime.now()\n",
    "print(f'Перемешаю данные, чтобы часть удалить, тек.время: {global_start_time.strftime(\"%Y-%m-%d %H:%M:%S\")}')\n",
    "df_score = df_score.sample(frac=1, random_state=42).reset_index(drop=True)\n",
    "global_end_time = datetime.now()\n",
    "print(f'Закончил перемешивать данные. Общее время операции: {global_end_time - global_start_time}')\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "17"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>code</th>\n",
       "      <th>target</th>\n",
       "      <th>mob</th>\n",
       "      <th>type_mob</th>\n",
       "      <th>drchk_flg</th>\n",
       "      <th>urzk_flg</th>\n",
       "      <th>active_flg</th>\n",
       "      <th>is_dc</th>\n",
       "      <th>is_ca</th>\n",
       "      <th>is_sa</th>\n",
       "      <th>...</th>\n",
       "      <th>income_zp_pens_cr</th>\n",
       "      <th>guarantee_debts</th>\n",
       "      <th>co_borrower_debts</th>\n",
       "      <th>other_card_active_flg</th>\n",
       "      <th>cr_to_pers_money_ratio</th>\n",
       "      <th>zp_1_mnth</th>\n",
       "      <th>zp_3_mnth</th>\n",
       "      <th>zp_6_mnth</th>\n",
       "      <th>age</th>\n",
       "      <th>rf</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>71_Ч_208289405410</td>\n",
       "      <td>0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>51.0</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22_Ч_175283861925</td>\n",
       "      <td>0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>46.0</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>35_Ч_44632341607</td>\n",
       "      <td>0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>36865.773438</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15446.879883</td>\n",
       "      <td>110597.320312</td>\n",
       "      <td>259770.0625</td>\n",
       "      <td>40.0</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>03_Ч_407243875392</td>\n",
       "      <td>0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>55.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20_Ч_260333744922</td>\n",
       "      <td>0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>33.0</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>34_Ч_249566555826</td>\n",
       "      <td>0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>48.0</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>62_Ч_249780744904</td>\n",
       "      <td>0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>40.0</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>52_Ч_224619460594</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23387.810547</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>40.0</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>48_Ч_249745255344</td>\n",
       "      <td>0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>69.0</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>35_Ч_44634018919</td>\n",
       "      <td>0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>39.0</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>32_Ч_144280979295</td>\n",
       "      <td>0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>60.0</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>01_Ч_165288929022</td>\n",
       "      <td>0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>39.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>06_Ч_407584385127</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>18.0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>15_Ч_276263336470</td>\n",
       "      <td>0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>85.0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>62_Ч_249826502400</td>\n",
       "      <td>0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>37.0</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>62_Ч_249834461624</td>\n",
       "      <td>0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>56.0</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>06_Ч_260216332870</td>\n",
       "      <td>0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>82.0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>34_Ч_249705804665</td>\n",
       "      <td>0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>60.0</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>52_Ч_195570323481</td>\n",
       "      <td>0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>63.0</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>41_Ч_3720445196</td>\n",
       "      <td>0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>48.0</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20 rows × 670 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 code  target   mob  type_mob  drchk_flg  urzk_flg  \\\n",
       "0   71_Ч_208289405410       0  55.0      25.0          0         0   \n",
       "1   22_Ч_175283861925       0  67.0      23.0          0         0   \n",
       "2    35_Ч_44632341607       0  43.0      37.0          0         0   \n",
       "3   03_Ч_407243875392       0   7.0       2.0          0         0   \n",
       "4   20_Ч_260333744922       0  67.0      37.0          0         0   \n",
       "5   34_Ч_249566555826       0  67.0      36.0          0         0   \n",
       "6   62_Ч_249780744904       0  67.0      36.0          0         0   \n",
       "7   52_Ч_224619460594       0  -1.0      -1.0          0         0   \n",
       "8   48_Ч_249745255344       0  67.0      37.0          0         0   \n",
       "9    35_Ч_44634018919       0  67.0      36.0          0         0   \n",
       "10  32_Ч_144280979295       0  67.0      36.0          0         0   \n",
       "11  01_Ч_165288929022       0  67.0      36.0          0         0   \n",
       "12  06_Ч_407584385127       0  -1.0      -1.0          0         0   \n",
       "13  15_Ч_276263336470       0  67.0      35.0          0         0   \n",
       "14  62_Ч_249826502400       0  67.0      36.0          0         0   \n",
       "15  62_Ч_249834461624       0  67.0      23.0          0         0   \n",
       "16  06_Ч_260216332870       0  67.0      36.0          0         0   \n",
       "17  34_Ч_249705804665       0  67.0      37.0          0         0   \n",
       "18  52_Ч_195570323481       0  67.0      37.0          0         0   \n",
       "19    41_Ч_3720445196       0  67.0      37.0          0         1   \n",
       "\n",
       "    active_flg  is_dc  is_ca  is_sa  ...  income_zp_pens_cr  guarantee_debts  \\\n",
       "0            0      0      0      0  ...           0.000000              0.0   \n",
       "1            0      0      0      0  ...           0.000000              0.0   \n",
       "2            1      1      0      0  ...       36865.773438              0.0   \n",
       "3            0      0      0      0  ...           0.000000              0.0   \n",
       "4            1      1      0      0  ...           0.000000              0.0   \n",
       "5            0      0      0      0  ...           0.000000              0.0   \n",
       "6            0      0      0      0  ...           0.000000              0.0   \n",
       "7            0      0      0      0  ...           0.000000              0.0   \n",
       "8            1      0      0      0  ...           0.000000              0.0   \n",
       "9            0      0      0      0  ...           0.000000              0.0   \n",
       "10           0      0      0      0  ...           0.000000              0.0   \n",
       "11           0      0      0      0  ...           0.000000              0.0   \n",
       "12           0      0      0      0  ...           0.000000              0.0   \n",
       "13           0      0      0      0  ...           0.000000              0.0   \n",
       "14           0      0      0      0  ...           0.000000              0.0   \n",
       "15           1      1      0      1  ...           0.000000              0.0   \n",
       "16           0      0      0      0  ...           0.000000              0.0   \n",
       "17           1      0      0      0  ...           0.000000              0.0   \n",
       "18           1      1      0      0  ...           0.000000              0.0   \n",
       "19           1      0      0      0  ...           0.000000              0.0   \n",
       "\n",
       "    co_borrower_debts  other_card_active_flg  cr_to_pers_money_ratio  \\\n",
       "0            0.000000                      0                     0.0   \n",
       "1            0.000000                      0                     0.0   \n",
       "2            0.000000                      0                     0.0   \n",
       "3            0.000000                      0                     0.0   \n",
       "4            0.000000                      0                     0.0   \n",
       "5            0.000000                      0                     0.0   \n",
       "6            0.000000                      0                     0.0   \n",
       "7        23387.810547                      1                     0.0   \n",
       "8            0.000000                      0                     0.0   \n",
       "9            0.000000                      0                     0.0   \n",
       "10           0.000000                      0                     0.0   \n",
       "11           0.000000                      0                     0.0   \n",
       "12           0.000000                      0                     0.0   \n",
       "13           0.000000                      0                     0.0   \n",
       "14           0.000000                      0                     0.0   \n",
       "15           0.000000                      1                     0.0   \n",
       "16           0.000000                      0                     0.0   \n",
       "17           0.000000                      0                     0.0   \n",
       "18           0.000000                      1                     0.0   \n",
       "19           0.000000                      0                     0.0   \n",
       "\n",
       "       zp_1_mnth      zp_3_mnth    zp_6_mnth   age  rf  \n",
       "0       0.000000       0.000000       0.0000  51.0  71  \n",
       "1       0.000000       0.000000       0.0000  46.0  22  \n",
       "2   15446.879883  110597.320312  259770.0625  40.0  35  \n",
       "3       0.000000       0.000000       0.0000  55.0   3  \n",
       "4       0.000000       0.000000       0.0000  33.0  20  \n",
       "5       0.000000       0.000000       0.0000  48.0  34  \n",
       "6       0.000000       0.000000       0.0000  40.0  62  \n",
       "7       0.000000       0.000000       0.0000  40.0  52  \n",
       "8       0.000000       0.000000       0.0000  69.0  48  \n",
       "9       0.000000       0.000000       0.0000  39.0  35  \n",
       "10      0.000000       0.000000       0.0000  60.0  32  \n",
       "11      0.000000       0.000000       0.0000  39.0   1  \n",
       "12      0.000000       0.000000       0.0000  18.0   6  \n",
       "13      0.000000       0.000000       0.0000  85.0  15  \n",
       "14      0.000000       0.000000       0.0000  37.0  62  \n",
       "15      0.000000       0.000000       0.0000  56.0  62  \n",
       "16      0.000000       0.000000       0.0000  82.0   6  \n",
       "17      0.000000       0.000000       0.0000  60.0  34  \n",
       "18      0.000000       0.000000       0.0000  63.0  52  \n",
       "19      0.000000       0.000000       0.0000  48.0  41  \n",
       "\n",
       "[20 rows x 670 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_score.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Удаляю часть данных, тек.время: 2022-10-24 10:16:39\n",
      "Закончил удаление. Общее время операции: 0:00:31.329258\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "global_start_time = datetime.now()\n",
    "print(f'Удаляю часть данных, тек.время: {global_start_time.strftime(\"%Y-%m-%d %H:%M:%S\")}')\n",
    "df_score = pd.concat([df_score.loc[(df_score.index < 5_000_000) & (df_score.target == 0)],\n",
    "                      df_score.loc[df_score.target == 1]], axis=0)\n",
    "global_end_time = datetime.now()\n",
    "print(f'Закончил удаление. Общее время операции: {global_end_time - global_start_time}')\n",
    "gc.collect()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7107"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_score.target.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5004400\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>code</th>\n",
       "      <th>target</th>\n",
       "      <th>mob</th>\n",
       "      <th>type_mob</th>\n",
       "      <th>drchk_flg</th>\n",
       "      <th>urzk_flg</th>\n",
       "      <th>active_flg</th>\n",
       "      <th>is_dc</th>\n",
       "      <th>is_ca</th>\n",
       "      <th>is_sa</th>\n",
       "      <th>...</th>\n",
       "      <th>income_zp_pens_cr</th>\n",
       "      <th>guarantee_debts</th>\n",
       "      <th>co_borrower_debts</th>\n",
       "      <th>other_card_active_flg</th>\n",
       "      <th>cr_to_pers_money_ratio</th>\n",
       "      <th>zp_1_mnth</th>\n",
       "      <th>zp_3_mnth</th>\n",
       "      <th>zp_6_mnth</th>\n",
       "      <th>age</th>\n",
       "      <th>rf</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>71_Ч_208289405410</td>\n",
       "      <td>0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>51.0</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22_Ч_175283861925</td>\n",
       "      <td>0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>46.0</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>35_Ч_44632341607</td>\n",
       "      <td>0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>36865.773438</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15446.879883</td>\n",
       "      <td>110597.320312</td>\n",
       "      <td>259770.0625</td>\n",
       "      <td>40.0</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>03_Ч_407243875392</td>\n",
       "      <td>0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>55.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20_Ч_260333744922</td>\n",
       "      <td>0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>33.0</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 670 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                code  target   mob  type_mob  drchk_flg  urzk_flg  active_flg  \\\n",
       "0  71_Ч_208289405410       0  55.0      25.0          0         0           0   \n",
       "1  22_Ч_175283861925       0  67.0      23.0          0         0           0   \n",
       "2   35_Ч_44632341607       0  43.0      37.0          0         0           1   \n",
       "3  03_Ч_407243875392       0   7.0       2.0          0         0           0   \n",
       "4  20_Ч_260333744922       0  67.0      37.0          0         0           1   \n",
       "\n",
       "   is_dc  is_ca  is_sa  ...  income_zp_pens_cr  guarantee_debts  \\\n",
       "0      0      0      0  ...           0.000000              0.0   \n",
       "1      0      0      0  ...           0.000000              0.0   \n",
       "2      1      0      0  ...       36865.773438              0.0   \n",
       "3      0      0      0  ...           0.000000              0.0   \n",
       "4      1      0      0  ...           0.000000              0.0   \n",
       "\n",
       "   co_borrower_debts  other_card_active_flg  cr_to_pers_money_ratio  \\\n",
       "0                0.0                      0                     0.0   \n",
       "1                0.0                      0                     0.0   \n",
       "2                0.0                      0                     0.0   \n",
       "3                0.0                      0                     0.0   \n",
       "4                0.0                      0                     0.0   \n",
       "\n",
       "      zp_1_mnth      zp_3_mnth    zp_6_mnth   age  rf  \n",
       "0      0.000000       0.000000       0.0000  51.0  71  \n",
       "1      0.000000       0.000000       0.0000  46.0  22  \n",
       "2  15446.879883  110597.320312  259770.0625  40.0  35  \n",
       "3      0.000000       0.000000       0.0000  55.0   3  \n",
       "4      0.000000       0.000000       0.0000  33.0  20  \n",
       "\n",
       "[5 rows x 670 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(len(df_score))\n",
    "df_score.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_score.reset_index(inplace=True, drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5004400 entries, 0 to 5004399\n",
      "Columns: 670 entries, code to rf\n",
      "dtypes: float32(405), int8(1), object(1), uint16(129), uint8(134)\n",
      "memory usage: 9.9 GB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(df_score.info(memory_usage='deep'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "num_col_target = df_score.columns.get_loc('target' )\n",
    "print(num_col_target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3236</th>\n",
       "      <td>24_Ч_</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3881</th>\n",
       "      <td>30_Ч_</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4989</th>\n",
       "      <td>43_Ч_</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       code\n",
       "3236  24_Ч_\n",
       "3881  30_Ч_\n",
       "4989  43_Ч_"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_y[df_y.code.str.len()<10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# список категориальных колонок\n",
    "cat_cols = ['rf'] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = df_score['target']\n",
    "code = df_score['code']\n",
    "df_score.drop(['target', 'code'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<span style='background:yellow'> **Разработка модели Catboost** </span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_cols_index = [df_score.columns.get_loc(c) for c in cat_cols] # Получение номеров категориальных колонок"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    df_score, y, test_size=0.25, stratify=y, shuffle=True, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5330"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Learning rate set to 0.5\n",
      "0:\tlearn: 0.8730454\ttest: 0.8716071\tbest: 0.8716071 (0)\ttotal: 2.16s\tremaining: 3m 33s\n",
      "1:\tlearn: 0.9021563\ttest: 0.8988261\tbest: 0.8988261 (1)\ttotal: 3.55s\tremaining: 2m 53s\n",
      "2:\tlearn: 0.9105248\ttest: 0.9082130\tbest: 0.9082130 (2)\ttotal: 5.52s\tremaining: 2m 58s\n",
      "3:\tlearn: 0.9177631\ttest: 0.9152740\tbest: 0.9152740 (3)\ttotal: 7.96s\tremaining: 3m 11s\n",
      "4:\tlearn: 0.9264569\ttest: 0.9243165\tbest: 0.9243165 (4)\ttotal: 9.47s\tremaining: 2m 59s\n",
      "5:\tlearn: 0.9287328\ttest: 0.9256769\tbest: 0.9256769 (5)\ttotal: 10.9s\tremaining: 2m 50s\n",
      "6:\tlearn: 0.9303633\ttest: 0.9253951\tbest: 0.9256769 (5)\ttotal: 12.9s\tremaining: 2m 51s\n",
      "7:\tlearn: 0.9315878\ttest: 0.9258035\tbest: 0.9258035 (7)\ttotal: 15.2s\tremaining: 2m 54s\n",
      "8:\tlearn: 0.9327418\ttest: 0.9270150\tbest: 0.9270150 (8)\ttotal: 17.5s\tremaining: 2m 57s\n",
      "9:\tlearn: 0.9341277\ttest: 0.9274739\tbest: 0.9274739 (9)\ttotal: 19.7s\tremaining: 2m 57s\n",
      "10:\tlearn: 0.9348982\ttest: 0.9267690\tbest: 0.9274739 (9)\ttotal: 21.1s\tremaining: 2m 51s\n",
      "11:\tlearn: 0.9359793\ttest: 0.9273669\tbest: 0.9274739 (9)\ttotal: 23.5s\tremaining: 2m 52s\n",
      "12:\tlearn: 0.9366790\ttest: 0.9271761\tbest: 0.9274739 (9)\ttotal: 24.9s\tremaining: 2m 46s\n",
      "13:\tlearn: 0.9375862\ttest: 0.9265748\tbest: 0.9274739 (9)\ttotal: 27.1s\tremaining: 2m 46s\n",
      "14:\tlearn: 0.9378090\ttest: 0.9266668\tbest: 0.9274739 (9)\ttotal: 28.5s\tremaining: 2m 41s\n",
      "15:\tlearn: 0.9381458\ttest: 0.9268119\tbest: 0.9274739 (9)\ttotal: 30.6s\tremaining: 2m 40s\n",
      "16:\tlearn: 0.9387742\ttest: 0.9255137\tbest: 0.9274739 (9)\ttotal: 32.7s\tremaining: 2m 39s\n",
      "17:\tlearn: 0.9395240\ttest: 0.9251681\tbest: 0.9274739 (9)\ttotal: 34.1s\tremaining: 2m 35s\n",
      "18:\tlearn: 0.9399581\ttest: 0.9245598\tbest: 0.9274739 (9)\ttotal: 35.6s\tremaining: 2m 31s\n",
      "19:\tlearn: 0.9401768\ttest: 0.9237902\tbest: 0.9274739 (9)\ttotal: 36.9s\tremaining: 2m 27s\n",
      "20:\tlearn: 0.9405115\ttest: 0.9231548\tbest: 0.9274739 (9)\ttotal: 39s\tremaining: 2m 26s\n",
      "21:\tlearn: 0.9408675\ttest: 0.9231434\tbest: 0.9274739 (9)\ttotal: 41.2s\tremaining: 2m 26s\n",
      "22:\tlearn: 0.9412353\ttest: 0.9229818\tbest: 0.9274739 (9)\ttotal: 43.6s\tremaining: 2m 25s\n",
      "23:\tlearn: 0.9418718\ttest: 0.9230171\tbest: 0.9274739 (9)\ttotal: 45.9s\tremaining: 2m 25s\n",
      "24:\tlearn: 0.9421332\ttest: 0.9226902\tbest: 0.9274739 (9)\ttotal: 48.2s\tremaining: 2m 24s\n",
      "25:\tlearn: 0.9425638\ttest: 0.9221273\tbest: 0.9274739 (9)\ttotal: 50.5s\tremaining: 2m 23s\n",
      "26:\tlearn: 0.9429604\ttest: 0.9217369\tbest: 0.9274739 (9)\ttotal: 51.9s\tremaining: 2m 20s\n",
      "27:\tlearn: 0.9433091\ttest: 0.9221958\tbest: 0.9274739 (9)\ttotal: 54.2s\tremaining: 2m 19s\n",
      "28:\tlearn: 0.9436363\ttest: 0.9217241\tbest: 0.9274739 (9)\ttotal: 55.8s\tremaining: 2m 16s\n",
      "29:\tlearn: 0.9440897\ttest: 0.9217474\tbest: 0.9274739 (9)\ttotal: 57.9s\tremaining: 2m 15s\n",
      "30:\tlearn: 0.9443640\ttest: 0.9221340\tbest: 0.9274739 (9)\ttotal: 59.6s\tremaining: 2m 12s\n",
      "31:\tlearn: 0.9447060\ttest: 0.9212597\tbest: 0.9274739 (9)\ttotal: 1m\tremaining: 2m 9s\n",
      "32:\tlearn: 0.9451639\ttest: 0.9220422\tbest: 0.9274739 (9)\ttotal: 1m 2s\tremaining: 2m 6s\n",
      "33:\tlearn: 0.9458845\ttest: 0.9220827\tbest: 0.9274739 (9)\ttotal: 1m 4s\tremaining: 2m 4s\n",
      "34:\tlearn: 0.9467134\ttest: 0.9224511\tbest: 0.9274739 (9)\ttotal: 1m 5s\tremaining: 2m 1s\n",
      "35:\tlearn: 0.9473025\ttest: 0.9231747\tbest: 0.9274739 (9)\ttotal: 1m 7s\tremaining: 1m 59s\n",
      "36:\tlearn: 0.9478355\ttest: 0.9235618\tbest: 0.9274739 (9)\ttotal: 1m 9s\tremaining: 1m 58s\n",
      "37:\tlearn: 0.9485187\ttest: 0.9237747\tbest: 0.9274739 (9)\ttotal: 1m 11s\tremaining: 1m 56s\n",
      "38:\tlearn: 0.9488383\ttest: 0.9234181\tbest: 0.9274739 (9)\ttotal: 1m 12s\tremaining: 1m 53s\n",
      "39:\tlearn: 0.9494507\ttest: 0.9228220\tbest: 0.9274739 (9)\ttotal: 1m 14s\tremaining: 1m 51s\n",
      "40:\tlearn: 0.9501043\ttest: 0.9228619\tbest: 0.9274739 (9)\ttotal: 1m 16s\tremaining: 1m 49s\n",
      "41:\tlearn: 0.9506837\ttest: 0.9224595\tbest: 0.9274739 (9)\ttotal: 1m 18s\tremaining: 1m 48s\n",
      "42:\tlearn: 0.9511870\ttest: 0.9220747\tbest: 0.9274739 (9)\ttotal: 1m 20s\tremaining: 1m 46s\n",
      "43:\tlearn: 0.9515827\ttest: 0.9215479\tbest: 0.9274739 (9)\ttotal: 1m 22s\tremaining: 1m 44s\n",
      "44:\tlearn: 0.9520205\ttest: 0.9205367\tbest: 0.9274739 (9)\ttotal: 1m 24s\tremaining: 1m 43s\n",
      "45:\tlearn: 0.9527270\ttest: 0.9208516\tbest: 0.9274739 (9)\ttotal: 1m 26s\tremaining: 1m 40s\n",
      "46:\tlearn: 0.9529609\ttest: 0.9206870\tbest: 0.9274739 (9)\ttotal: 1m 27s\tremaining: 1m 38s\n",
      "47:\tlearn: 0.9532285\ttest: 0.9208286\tbest: 0.9274739 (9)\ttotal: 1m 28s\tremaining: 1m 36s\n",
      "48:\tlearn: 0.9538590\ttest: 0.9196589\tbest: 0.9274739 (9)\ttotal: 1m 31s\tremaining: 1m 35s\n",
      "49:\tlearn: 0.9542746\ttest: 0.9196060\tbest: 0.9274739 (9)\ttotal: 1m 32s\tremaining: 1m 32s\n",
      "50:\tlearn: 0.9546452\ttest: 0.9189178\tbest: 0.9274739 (9)\ttotal: 1m 34s\tremaining: 1m 31s\n",
      "51:\tlearn: 0.9550906\ttest: 0.9182504\tbest: 0.9274739 (9)\ttotal: 1m 37s\tremaining: 1m 29s\n",
      "52:\tlearn: 0.9553747\ttest: 0.9171313\tbest: 0.9274739 (9)\ttotal: 1m 38s\tremaining: 1m 27s\n",
      "53:\tlearn: 0.9557488\ttest: 0.9170078\tbest: 0.9274739 (9)\ttotal: 1m 40s\tremaining: 1m 25s\n",
      "54:\tlearn: 0.9562162\ttest: 0.9162611\tbest: 0.9274739 (9)\ttotal: 1m 42s\tremaining: 1m 24s\n",
      "55:\tlearn: 0.9564377\ttest: 0.9156838\tbest: 0.9274739 (9)\ttotal: 1m 44s\tremaining: 1m 22s\n",
      "56:\tlearn: 0.9568509\ttest: 0.9154381\tbest: 0.9274739 (9)\ttotal: 1m 46s\tremaining: 1m 20s\n",
      "57:\tlearn: 0.9571984\ttest: 0.9128768\tbest: 0.9274739 (9)\ttotal: 1m 48s\tremaining: 1m 18s\n",
      "58:\tlearn: 0.9575951\ttest: 0.9127231\tbest: 0.9274739 (9)\ttotal: 1m 49s\tremaining: 1m 16s\n",
      "59:\tlearn: 0.9579382\ttest: 0.9116840\tbest: 0.9274739 (9)\ttotal: 1m 51s\tremaining: 1m 14s\n",
      "60:\tlearn: 0.9582577\ttest: 0.9111635\tbest: 0.9274739 (9)\ttotal: 1m 53s\tremaining: 1m 12s\n",
      "61:\tlearn: 0.9585136\ttest: 0.9099729\tbest: 0.9274739 (9)\ttotal: 1m 55s\tremaining: 1m 10s\n",
      "62:\tlearn: 0.9588037\ttest: 0.9104681\tbest: 0.9274739 (9)\ttotal: 1m 56s\tremaining: 1m 8s\n",
      "63:\tlearn: 0.9591317\ttest: 0.9102016\tbest: 0.9274739 (9)\ttotal: 1m 58s\tremaining: 1m 6s\n",
      "64:\tlearn: 0.9594587\ttest: 0.9106141\tbest: 0.9274739 (9)\ttotal: 2m\tremaining: 1m 4s\n",
      "65:\tlearn: 0.9598417\ttest: 0.9106629\tbest: 0.9274739 (9)\ttotal: 2m 2s\tremaining: 1m 3s\n",
      "66:\tlearn: 0.9601771\ttest: 0.9094544\tbest: 0.9274739 (9)\ttotal: 2m 4s\tremaining: 1m 1s\n",
      "67:\tlearn: 0.9603655\ttest: 0.9092418\tbest: 0.9274739 (9)\ttotal: 2m 6s\tremaining: 59.6s\n",
      "68:\tlearn: 0.9606893\ttest: 0.9091731\tbest: 0.9274739 (9)\ttotal: 2m 8s\tremaining: 57.6s\n",
      "69:\tlearn: 0.9608764\ttest: 0.9079623\tbest: 0.9274739 (9)\ttotal: 2m 9s\tremaining: 55.4s\n",
      "70:\tlearn: 0.9611893\ttest: 0.9077947\tbest: 0.9274739 (9)\ttotal: 2m 10s\tremaining: 53.4s\n",
      "71:\tlearn: 0.9614679\ttest: 0.9071413\tbest: 0.9274739 (9)\ttotal: 2m 12s\tremaining: 51.6s\n",
      "72:\tlearn: 0.9617767\ttest: 0.9056674\tbest: 0.9274739 (9)\ttotal: 2m 14s\tremaining: 49.8s\n",
      "73:\tlearn: 0.9621708\ttest: 0.9043990\tbest: 0.9274739 (9)\ttotal: 2m 16s\tremaining: 48.1s\n",
      "74:\tlearn: 0.9625336\ttest: 0.9043242\tbest: 0.9274739 (9)\ttotal: 2m 19s\tremaining: 46.4s\n",
      "75:\tlearn: 0.9628256\ttest: 0.9043736\tbest: 0.9274739 (9)\ttotal: 2m 20s\tremaining: 44.4s\n",
      "76:\tlearn: 0.9630784\ttest: 0.9035047\tbest: 0.9274739 (9)\ttotal: 2m 21s\tremaining: 42.4s\n",
      "77:\tlearn: 0.9633379\ttest: 0.9032803\tbest: 0.9274739 (9)\ttotal: 2m 23s\tremaining: 40.6s\n",
      "78:\tlearn: 0.9636090\ttest: 0.9031381\tbest: 0.9274739 (9)\ttotal: 2m 25s\tremaining: 38.8s\n",
      "79:\tlearn: 0.9639370\ttest: 0.9029535\tbest: 0.9274739 (9)\ttotal: 2m 27s\tremaining: 36.9s\n",
      "80:\tlearn: 0.9641809\ttest: 0.9025656\tbest: 0.9274739 (9)\ttotal: 2m 29s\tremaining: 35.1s\n",
      "81:\tlearn: 0.9644649\ttest: 0.9004106\tbest: 0.9274739 (9)\ttotal: 2m 32s\tremaining: 33.4s\n",
      "82:\tlearn: 0.9647038\ttest: 0.8998762\tbest: 0.9274739 (9)\ttotal: 2m 34s\tremaining: 31.6s\n",
      "83:\tlearn: 0.9648683\ttest: 0.8996768\tbest: 0.9274739 (9)\ttotal: 2m 36s\tremaining: 29.7s\n",
      "84:\tlearn: 0.9651327\ttest: 0.8982417\tbest: 0.9274739 (9)\ttotal: 2m 37s\tremaining: 27.8s\n",
      "85:\tlearn: 0.9654081\ttest: 0.8981581\tbest: 0.9274739 (9)\ttotal: 2m 38s\tremaining: 25.9s\n",
      "86:\tlearn: 0.9657163\ttest: 0.8971170\tbest: 0.9274739 (9)\ttotal: 2m 41s\tremaining: 24.1s\n",
      "87:\tlearn: 0.9660492\ttest: 0.8966364\tbest: 0.9274739 (9)\ttotal: 2m 43s\tremaining: 22.3s\n",
      "88:\tlearn: 0.9664116\ttest: 0.8966951\tbest: 0.9274739 (9)\ttotal: 2m 45s\tremaining: 20.5s\n",
      "89:\tlearn: 0.9665428\ttest: 0.8967578\tbest: 0.9274739 (9)\ttotal: 2m 47s\tremaining: 18.6s\n",
      "90:\tlearn: 0.9667662\ttest: 0.8968986\tbest: 0.9274739 (9)\ttotal: 2m 49s\tremaining: 16.8s\n",
      "91:\tlearn: 0.9669524\ttest: 0.8968879\tbest: 0.9274739 (9)\ttotal: 2m 51s\tremaining: 14.9s\n",
      "92:\tlearn: 0.9671515\ttest: 0.8966819\tbest: 0.9274739 (9)\ttotal: 2m 53s\tremaining: 13s\n",
      "93:\tlearn: 0.9674562\ttest: 0.8963352\tbest: 0.9274739 (9)\ttotal: 2m 54s\tremaining: 11.1s\n",
      "94:\tlearn: 0.9676633\ttest: 0.8961003\tbest: 0.9274739 (9)\ttotal: 2m 55s\tremaining: 9.26s\n",
      "95:\tlearn: 0.9679013\ttest: 0.8940900\tbest: 0.9274739 (9)\ttotal: 2m 57s\tremaining: 7.39s\n",
      "96:\tlearn: 0.9681444\ttest: 0.8936598\tbest: 0.9274739 (9)\ttotal: 2m 59s\tremaining: 5.55s\n",
      "97:\tlearn: 0.9683517\ttest: 0.8932552\tbest: 0.9274739 (9)\ttotal: 3m 1s\tremaining: 3.71s\n",
      "98:\tlearn: 0.9685944\ttest: 0.8932194\tbest: 0.9274739 (9)\ttotal: 3m 3s\tremaining: 1.86s\n",
      "99:\tlearn: 0.9687057\ttest: 0.8929516\tbest: 0.9274739 (9)\ttotal: 3m 5s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9274739147\n",
      "bestIteration = 9\n",
      "\n",
      "Shrink model to first 10 iterations.\n",
      "Model is fitted: True\n",
      "Model params: {'class_weights': {0: 1, 1: 703.1838649155723}, 'custom_metric': ['AUC:hints=skip_train~false'], 'eval_metric': 'AUC', 'n_estimators': 100, 'random_state': 42, 'cat_features': [667]}\n"
     ]
    }
   ],
   "source": [
    "m_0 = len(y_train) - y_train.sum()\n",
    "m_1 = y_train.sum()\n",
    "\n",
    "class_weights = dict({0:1, 1: m_0/m_1})\n",
    "boosting_model = catboost.CatBoostClassifier(n_estimators=100, \n",
    "                                             #custom_loss=['AUC'], \n",
    "                                             random_state=42, eval_metric='AUC',\n",
    "                                             custom_metric=['AUC:hints=skip_train~false'],\n",
    "                                             class_weights=class_weights,\n",
    "                                             #auto_class_weights='Balanced', \n",
    "                                             cat_features=cat_cols_index) # параметры модели\n",
    "\n",
    "boosting_model.fit(X_train, y_train, eval_set=(X_test, y_test), plot=False) # обучение модели на тестовой выборке\n",
    "\n",
    "y_score_train = boosting_model.predict_proba(X_train)[:, 1] # предсказания обученной модели на тренировочной выборке\n",
    "y_score_test = boosting_model.predict_proba(X_test)[:, 1] # предсказания обученной модели на тестовой выборке\n",
    "print(f\"Model is fitted: {str(boosting_model.is_fitted())}\")\n",
    "print(f\"Model params: {boosting_model.get_params()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "roc-auc на тренировочных данных: 0.9341277116161059\n",
      "roc-auc на тестовых данных: 0.9274739146949338\n"
     ]
    }
   ],
   "source": [
    "print('roc-auc на тренировочных данных:', roc_auc_score(y_train, y_score_train))\n",
    "print('roc-auc на тестовых данных:', roc_auc_score(y_test, y_score_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "roc-auc на всем наборе данных: 0.9324634713220793\n"
     ]
    }
   ],
   "source": [
    "y_score = boosting_model.predict_proba(df_score)[:, 1]\n",
    "print('roc-auc на всем наборе данных:', roc_auc_score(y, y_score))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Создание датасета путем соединения 3-х серий пандаса\n",
    "df_bin = pd.DataFrame({'code': code, 'target': y, 'y_score': y_score})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_bin['bin'] = pd.cut(df_bin['y_score'], bins=10)\n",
    "df_bin['bin_int'] = pd.cut(df_bin['y_score'], bins=10, labels=list(range(1, 11)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#тип объекта\n",
    "type(df_bin)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>code</th>\n",
       "      <th>target</th>\n",
       "      <th>y_score</th>\n",
       "      <th>bin</th>\n",
       "      <th>bin_int</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>71_Ч_208289405410</td>\n",
       "      <td>0</td>\n",
       "      <td>0.166189</td>\n",
       "      <td>(0.0999, 0.2]</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22_Ч_175283861925</td>\n",
       "      <td>0</td>\n",
       "      <td>0.166189</td>\n",
       "      <td>(0.0999, 0.2]</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>35_Ч_44632341607</td>\n",
       "      <td>0</td>\n",
       "      <td>0.864712</td>\n",
       "      <td>(0.8, 0.9]</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>03_Ч_407243875392</td>\n",
       "      <td>0</td>\n",
       "      <td>0.092932</td>\n",
       "      <td>(-0.000999, 0.0999]</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20_Ч_260333744922</td>\n",
       "      <td>0</td>\n",
       "      <td>0.362404</td>\n",
       "      <td>(0.3, 0.4]</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                code  target   y_score                  bin bin_int\n",
       "0  71_Ч_208289405410       0  0.166189        (0.0999, 0.2]       2\n",
       "1  22_Ч_175283861925       0  0.166189        (0.0999, 0.2]       2\n",
       "2   35_Ч_44632341607       0  0.864712           (0.8, 0.9]       9\n",
       "3  03_Ч_407243875392       0  0.092932  (-0.000999, 0.0999]       1\n",
       "4  20_Ч_260333744922       0  0.362404           (0.3, 0.4]       4"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bin.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10      84711\n",
       "9      152813\n",
       "8      155501\n",
       "7      143915\n",
       "6      142081\n",
       "5      147524\n",
       "4      186915\n",
       "3      305781\n",
       "2     1724564\n",
       "1     1960595\n",
       "Name: bin_int, dtype: int64"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bin.bin_int.value_counts().sort_index(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_stat = df_bin.groupby(by=['bin_int']).agg({'target':['sum', 'mean', 'count'], 'y_score':['sum', 'mean']})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"3\" halign=\"left\">target</th>\n",
       "      <th colspan=\"2\" halign=\"left\">y_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>sum</th>\n",
       "      <th>mean</th>\n",
       "      <th>count</th>\n",
       "      <th>sum</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bin_int</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>92.0</td>\n",
       "      <td>0.000047</td>\n",
       "      <td>1960595</td>\n",
       "      <td>102326.472310</td>\n",
       "      <td>0.052192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>369.0</td>\n",
       "      <td>0.000214</td>\n",
       "      <td>1724564</td>\n",
       "      <td>242602.975298</td>\n",
       "      <td>0.140675</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>158.0</td>\n",
       "      <td>0.000517</td>\n",
       "      <td>305781</td>\n",
       "      <td>73884.448628</td>\n",
       "      <td>0.241625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>152.0</td>\n",
       "      <td>0.000813</td>\n",
       "      <td>186915</td>\n",
       "      <td>65095.196262</td>\n",
       "      <td>0.348261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>223.0</td>\n",
       "      <td>0.001512</td>\n",
       "      <td>147524</td>\n",
       "      <td>66262.031979</td>\n",
       "      <td>0.449161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>269.0</td>\n",
       "      <td>0.001893</td>\n",
       "      <td>142081</td>\n",
       "      <td>77793.772265</td>\n",
       "      <td>0.547531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>399.0</td>\n",
       "      <td>0.002772</td>\n",
       "      <td>143915</td>\n",
       "      <td>93558.603136</td>\n",
       "      <td>0.650096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>741.0</td>\n",
       "      <td>0.004765</td>\n",
       "      <td>155501</td>\n",
       "      <td>116744.028250</td>\n",
       "      <td>0.750761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1338.0</td>\n",
       "      <td>0.008756</td>\n",
       "      <td>152813</td>\n",
       "      <td>129642.912603</td>\n",
       "      <td>0.848376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3366.0</td>\n",
       "      <td>0.039735</td>\n",
       "      <td>84711</td>\n",
       "      <td>79758.984939</td>\n",
       "      <td>0.941542</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         target                           y_score          \n",
       "            sum      mean    count            sum      mean\n",
       "bin_int                                                    \n",
       "1          92.0  0.000047  1960595  102326.472310  0.052192\n",
       "2         369.0  0.000214  1724564  242602.975298  0.140675\n",
       "3         158.0  0.000517   305781   73884.448628  0.241625\n",
       "4         152.0  0.000813   186915   65095.196262  0.348261\n",
       "5         223.0  0.001512   147524   66262.031979  0.449161\n",
       "6         269.0  0.001893   142081   77793.772265  0.547531\n",
       "7         399.0  0.002772   143915   93558.603136  0.650096\n",
       "8         741.0  0.004765   155501  116744.028250  0.750761\n",
       "9        1338.0  0.008756   152813  129642.912603  0.848376\n",
       "10       3366.0  0.039735    84711   79758.984939  0.941542"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_stat"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<span style='background:yellow'> **Catboost. Анализ важных полей** </span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Feature Id</th>\n",
       "      <th>Importances</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>age</td>\n",
       "      <td>57.357807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>rf</td>\n",
       "      <td>13.832216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>days_to_last_login_dbo</td>\n",
       "      <td>3.782752</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>avg_dc_total_rur_1q</td>\n",
       "      <td>3.131051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>sum_casa_credit_rur_2q</td>\n",
       "      <td>2.211292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>commun_60</td>\n",
       "      <td>1.879822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>income_zp_pens_cr</td>\n",
       "      <td>1.743613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>apk_flg</td>\n",
       "      <td>1.405601</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>appl_approved_flg_1y</td>\n",
       "      <td>1.396704</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>dbo_profile_flg_2q</td>\n",
       "      <td>1.175950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>credit_crm_flg_1q</td>\n",
       "      <td>1.173910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>pensioners_flg</td>\n",
       "      <td>0.855054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>channel_sms_4q</td>\n",
       "      <td>0.822647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>commun_90</td>\n",
       "      <td>0.744828</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>max_pers_diff_1q</td>\n",
       "      <td>0.739931</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>avg_casa_credit_rur_1q</td>\n",
       "      <td>0.734595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>max_dc_total_rur_daily_1q</td>\n",
       "      <td>0.691968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>max_loan_cnt_3q</td>\n",
       "      <td>0.616800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>appl_approved_flg_0m</td>\n",
       "      <td>0.596408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>total_prd_cnt</td>\n",
       "      <td>0.500101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>avg_dc_total_cnt_daily_3q</td>\n",
       "      <td>0.402609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>dbo_remmit_out_cnt_1q</td>\n",
       "      <td>0.399983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>avg_dc_total_rur_daily_0m</td>\n",
       "      <td>0.335837</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>sum_casa_credit_rur_0m</td>\n",
       "      <td>0.288910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>min_loan_diff_4q</td>\n",
       "      <td>0.271078</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>min_dc_total_rur_1q</td>\n",
       "      <td>0.233867</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>cc_appl_flg_1y</td>\n",
       "      <td>0.223763</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>dbo_deposit_sum_1q</td>\n",
       "      <td>0.200155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>max_dccashsum_to_dctotalrur_4q</td>\n",
       "      <td>0.189991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>max_dc_pos_rur_2q</td>\n",
       "      <td>0.189160</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>guarantee_debts</td>\n",
       "      <td>0.169742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>co_borrower_debts</td>\n",
       "      <td>0.149628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>max_total_prd_cnt_4q</td>\n",
       "      <td>0.135812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>min_loan_sum_2q</td>\n",
       "      <td>0.124441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>loan_diff_0m</td>\n",
       "      <td>0.118561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>avg_dc_pos_cnt_daily_3q</td>\n",
       "      <td>0.118224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>max_sum_dep_1q</td>\n",
       "      <td>0.107202</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>max_dc_total_rur_daily_0m</td>\n",
       "      <td>0.104373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>appl_booked_flg_1y</td>\n",
       "      <td>0.099301</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>max_dccashsum_to_dctotalrur_1q</td>\n",
       "      <td>0.098052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>avg_dc_total_rur_3q</td>\n",
       "      <td>0.097038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>avg_cash_sum_2q</td>\n",
       "      <td>0.089894</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>mrtg_booked_flg_1y</td>\n",
       "      <td>0.085538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>avg_dc_total_rur_2q</td>\n",
       "      <td>0.079225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>dc_cnt_3q</td>\n",
       "      <td>0.078492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>sum_dc_total_cnt_0m</td>\n",
       "      <td>0.072527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>avg_cash_sum_4q</td>\n",
       "      <td>0.051504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>appl_booked_flg_0m</td>\n",
       "      <td>0.046197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>avg_dc_total_rur_daily_3q</td>\n",
       "      <td>0.029994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>sum_dccash_cntto_dctotal_0m</td>\n",
       "      <td>0.015854</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        Feature Id  Importances\n",
       "0                              age    57.357807\n",
       "1                               rf    13.832216\n",
       "2           days_to_last_login_dbo     3.782752\n",
       "3              avg_dc_total_rur_1q     3.131051\n",
       "4           sum_casa_credit_rur_2q     2.211292\n",
       "5                        commun_60     1.879822\n",
       "6                income_zp_pens_cr     1.743613\n",
       "7                          apk_flg     1.405601\n",
       "8             appl_approved_flg_1y     1.396704\n",
       "9               dbo_profile_flg_2q     1.175950\n",
       "10               credit_crm_flg_1q     1.173910\n",
       "11                  pensioners_flg     0.855054\n",
       "12                  channel_sms_4q     0.822647\n",
       "13                       commun_90     0.744828\n",
       "14                max_pers_diff_1q     0.739931\n",
       "15          avg_casa_credit_rur_1q     0.734595\n",
       "16       max_dc_total_rur_daily_1q     0.691968\n",
       "17                 max_loan_cnt_3q     0.616800\n",
       "18            appl_approved_flg_0m     0.596408\n",
       "19                   total_prd_cnt     0.500101\n",
       "20       avg_dc_total_cnt_daily_3q     0.402609\n",
       "21           dbo_remmit_out_cnt_1q     0.399983\n",
       "22       avg_dc_total_rur_daily_0m     0.335837\n",
       "23          sum_casa_credit_rur_0m     0.288910\n",
       "24                min_loan_diff_4q     0.271078\n",
       "25             min_dc_total_rur_1q     0.233867\n",
       "26                  cc_appl_flg_1y     0.223763\n",
       "27              dbo_deposit_sum_1q     0.200155\n",
       "28  max_dccashsum_to_dctotalrur_4q     0.189991\n",
       "29               max_dc_pos_rur_2q     0.189160\n",
       "30                 guarantee_debts     0.169742\n",
       "31               co_borrower_debts     0.149628\n",
       "32            max_total_prd_cnt_4q     0.135812\n",
       "33                 min_loan_sum_2q     0.124441\n",
       "34                    loan_diff_0m     0.118561\n",
       "35         avg_dc_pos_cnt_daily_3q     0.118224\n",
       "36                  max_sum_dep_1q     0.107202\n",
       "37       max_dc_total_rur_daily_0m     0.104373\n",
       "38              appl_booked_flg_1y     0.099301\n",
       "39  max_dccashsum_to_dctotalrur_1q     0.098052\n",
       "40             avg_dc_total_rur_3q     0.097038\n",
       "41                 avg_cash_sum_2q     0.089894\n",
       "42              mrtg_booked_flg_1y     0.085538\n",
       "43             avg_dc_total_rur_2q     0.079225\n",
       "44                       dc_cnt_3q     0.078492\n",
       "45             sum_dc_total_cnt_0m     0.072527\n",
       "46                 avg_cash_sum_4q     0.051504\n",
       "47              appl_booked_flg_0m     0.046197\n",
       "48       avg_dc_total_rur_daily_3q     0.029994\n",
       "49     sum_dccash_cntto_dctotal_0m     0.015854"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_imp = boosting_model.get_feature_importance(prettified=True)\n",
    "feature_imp[:50]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "57.35780678763093"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_imp.Importances[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13.832215884645372\n",
      "20\n"
     ]
    }
   ],
   "source": [
    "#т.к. макс. значение Importances в несколько раз бальше следующего, то за макс. возьму следующее после макс.\n",
    "max_feature_imp = feature_imp.Importances[1]\n",
    "print(max_feature_imp)\n",
    "IMP_MAX_MIN_RATIO=30\n",
    "len_cat_imp = len(feature_imp[feature_imp.Importances>max_feature_imp/IMP_MAX_MIN_RATIO])\n",
    "print(len_cat_imp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "explainer = shap.TreeExplainer(boosting_model, feature_perturbation=\"interventional\")\n",
    "shap_values = explainer.shap_values(catboost.Pool(X_test, y_test, cat_features=cat_cols))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x684 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "shap.summary_plot(shap_values, X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "shap_feature_names = X_test.columns.to_list()\n",
    "vals = np.abs(shap_values.mean(0))\n",
    "shap_importance = pd.DataFrame(list(zip(shap_feature_names, vals)), columns=['feature', 'feature_importance_vals'])\n",
    "shap_importance = shap_importance.sort_values(by=['feature_importance_vals'], ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>feature_importance_vals</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>avg_dc_total_rur_1q</td>\n",
       "      <td>0.086568</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>157</th>\n",
       "      <td>avg_casa_credit_rur_1q</td>\n",
       "      <td>0.073575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>436</th>\n",
       "      <td>dc_cnt_3q</td>\n",
       "      <td>0.036615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>472</th>\n",
       "      <td>avg_dc_total_rur_daily_3q</td>\n",
       "      <td>0.028309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>143</th>\n",
       "      <td>days_to_last_login_dbo</td>\n",
       "      <td>0.025267</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>486</th>\n",
       "      <td>max_loan_cnt_3q</td>\n",
       "      <td>0.019035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>223</th>\n",
       "      <td>max_dc_total_rur_daily_1q</td>\n",
       "      <td>0.014254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>commun_90</td>\n",
       "      <td>0.010097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>loan_diff_0m</td>\n",
       "      <td>0.009427</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>284</th>\n",
       "      <td>sum_casa_credit_rur_2q</td>\n",
       "      <td>0.008342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>246</th>\n",
       "      <td>max_pers_diff_1q</td>\n",
       "      <td>0.007154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>263</th>\n",
       "      <td>dbo_remmit_out_cnt_1q</td>\n",
       "      <td>0.006303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>total_prd_cnt</td>\n",
       "      <td>0.006072</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110</th>\n",
       "      <td>appl_approved_flg_1y</td>\n",
       "      <td>0.005327</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>sum_dc_total_cnt_0m</td>\n",
       "      <td>0.004369</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>667</th>\n",
       "      <td>rf</td>\n",
       "      <td>0.004037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>478</th>\n",
       "      <td>avg_dc_total_cnt_daily_3q</td>\n",
       "      <td>0.003956</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>654</th>\n",
       "      <td>pensioners_flg</td>\n",
       "      <td>0.003663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>622</th>\n",
       "      <td>channel_sms_4q</td>\n",
       "      <td>0.003208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>171</th>\n",
       "      <td>min_dc_total_rur_1q</td>\n",
       "      <td>0.002693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>max_dc_total_rur_daily_0m</td>\n",
       "      <td>0.002680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>666</th>\n",
       "      <td>age</td>\n",
       "      <td>0.002361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>avg_dc_total_rur_2q</td>\n",
       "      <td>0.002311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>111</th>\n",
       "      <td>appl_booked_flg_1y</td>\n",
       "      <td>0.002270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>358</th>\n",
       "      <td>min_loan_sum_2q</td>\n",
       "      <td>0.002267</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>655</th>\n",
       "      <td>apk_flg</td>\n",
       "      <td>0.002207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>294</th>\n",
       "      <td>max_dc_pos_rur_2q</td>\n",
       "      <td>0.002062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>552</th>\n",
       "      <td>max_dccashsum_to_dctotalrur_4q</td>\n",
       "      <td>0.002045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>dbo_profile_flg_2q</td>\n",
       "      <td>0.002008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>cc_appl_flg_1y</td>\n",
       "      <td>0.001786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255</th>\n",
       "      <td>credit_crm_flg_1q</td>\n",
       "      <td>0.001737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>commun_60</td>\n",
       "      <td>0.001664</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>582</th>\n",
       "      <td>max_total_prd_cnt_4q</td>\n",
       "      <td>0.001490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>422</th>\n",
       "      <td>avg_dc_total_rur_3q</td>\n",
       "      <td>0.001425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>476</th>\n",
       "      <td>avg_dc_pos_cnt_daily_3q</td>\n",
       "      <td>0.001353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>mrtg_booked_flg_1y</td>\n",
       "      <td>0.001267</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>sum_dccash_cntto_dctotal_0m</td>\n",
       "      <td>0.001240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>658</th>\n",
       "      <td>income_zp_pens_cr</td>\n",
       "      <td>0.001172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>321</th>\n",
       "      <td>avg_cash_sum_2q</td>\n",
       "      <td>0.000987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>571</th>\n",
       "      <td>avg_cash_sum_4q</td>\n",
       "      <td>0.000981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>max_sum_dep_1q</td>\n",
       "      <td>0.000959</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            feature  feature_importance_vals\n",
       "172             avg_dc_total_rur_1q                 0.086568\n",
       "157          avg_casa_credit_rur_1q                 0.073575\n",
       "436                       dc_cnt_3q                 0.036615\n",
       "472       avg_dc_total_rur_daily_3q                 0.028309\n",
       "143          days_to_last_login_dbo                 0.025267\n",
       "486                 max_loan_cnt_3q                 0.019035\n",
       "223       max_dc_total_rur_daily_1q                 0.014254\n",
       "77                        commun_90                 0.010097\n",
       "33                     loan_diff_0m                 0.009427\n",
       "284          sum_casa_credit_rur_2q                 0.008342\n",
       "246                max_pers_diff_1q                 0.007154\n",
       "263           dbo_remmit_out_cnt_1q                 0.006303\n",
       "11                    total_prd_cnt                 0.006072\n",
       "110            appl_approved_flg_1y                 0.005327\n",
       "43              sum_dc_total_cnt_0m                 0.004369\n",
       "667                              rf                 0.004037\n",
       "478       avg_dc_total_cnt_daily_3q                 0.003956\n",
       "654                  pensioners_flg                 0.003663\n",
       "622                  channel_sms_4q                 0.003208\n",
       "171             min_dc_total_rur_1q                 0.002693\n",
       "54        max_dc_total_rur_daily_0m                 0.002680\n",
       "666                             age                 0.002361\n",
       "297             avg_dc_total_rur_2q                 0.002311\n",
       "111              appl_booked_flg_1y                 0.002270\n",
       "358                 min_loan_sum_2q                 0.002267\n",
       "655                         apk_flg                 0.002207\n",
       "294               max_dc_pos_rur_2q                 0.002062\n",
       "552  max_dccashsum_to_dctotalrur_4q                 0.002045\n",
       "146              dbo_profile_flg_2q                 0.002008\n",
       "106                  cc_appl_flg_1y                 0.001786\n",
       "255               credit_crm_flg_1q                 0.001737\n",
       "76                        commun_60                 0.001664\n",
       "582            max_total_prd_cnt_4q                 0.001490\n",
       "422             avg_dc_total_rur_3q                 0.001425\n",
       "476         avg_dc_pos_cnt_daily_3q                 0.001353\n",
       "127              mrtg_booked_flg_1y                 0.001267\n",
       "44      sum_dccash_cntto_dctotal_0m                 0.001240\n",
       "658               income_zp_pens_cr                 0.001172\n",
       "321                 avg_cash_sum_2q                 0.000987\n",
       "571                 avg_cash_sum_4q                 0.000981\n",
       "194                  max_sum_dep_1q                 0.000959"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "shap_importance[:41]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19\n"
     ]
    }
   ],
   "source": [
    "IMP_MAX_MIN_RATIO = 30 #Подбираю опытным путем, делаю несколько итераций\n",
    "max_feature_importance_vals = shap_importance.feature_importance_vals.max()\n",
    "len_shape_imp=len(shap_importance[shap_importance.feature_importance_vals>max_feature_importance_vals/IMP_MAX_MIN_RATIO])\n",
    "print(len_shape_imp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "26\n"
     ]
    }
   ],
   "source": [
    "summary_list_cat_importance = list(set(shap_importance.feature[:len_shape_imp].to_list() + feature_imp['Featlist_feature_impure Id'][:len_cat_imp].to_list()))\n",
    "# Т.к. поле rf является вычисляемым, то нужно разместить его в начало списка, чтобы удобней было работать с ним в дальнейшем.\n",
    "summary_list_cat_importance.remove('rf')\n",
    "summary_list_cat_importance = ['rf'] + summary_list_cat_importance\n",
    "print(len(summary_list_cat_importance))\n",
    "with open('cc_cat_list_feature_imp.txt', 'w') as file:\n",
    "    for line in summary_list_cat_importance:\n",
    "        file.write(f\"{line}\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_imp = df_score[summary_list_cat_importance]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rf</th>\n",
       "      <th>channel_sms_4q</th>\n",
       "      <th>avg_dc_total_rur_1q</th>\n",
       "      <th>loan_diff_0m</th>\n",
       "      <th>total_prd_cnt</th>\n",
       "      <th>days_to_last_login_dbo</th>\n",
       "      <th>commun_60</th>\n",
       "      <th>pensioners_flg</th>\n",
       "      <th>dbo_profile_flg_2q</th>\n",
       "      <th>avg_dc_total_cnt_daily_3q</th>\n",
       "      <th>...</th>\n",
       "      <th>sum_casa_credit_rur_2q</th>\n",
       "      <th>credit_crm_flg_1q</th>\n",
       "      <th>dbo_remmit_out_cnt_1q</th>\n",
       "      <th>max_pers_diff_1q</th>\n",
       "      <th>dc_cnt_3q</th>\n",
       "      <th>age</th>\n",
       "      <th>avg_dc_total_rur_daily_3q</th>\n",
       "      <th>avg_casa_credit_rur_1q</th>\n",
       "      <th>commun_90</th>\n",
       "      <th>appl_approved_flg_1y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>71</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>-1000.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>51.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>-1000.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>46.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>48440.035156</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.190476</td>\n",
       "      <td>...</td>\n",
       "      <td>148839.734375</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>72.107597</td>\n",
       "      <td>1</td>\n",
       "      <td>40.0</td>\n",
       "      <td>8434.296875</td>\n",
       "      <td>47838.406250</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>-1000.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>2065.666748</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.217391</td>\n",
       "      <td>...</td>\n",
       "      <td>6795.259766</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3.519492</td>\n",
       "      <td>2</td>\n",
       "      <td>33.0</td>\n",
       "      <td>375.264343</td>\n",
       "      <td>2185.286621</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5004395</th>\n",
       "      <td>49</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>33.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5004396</th>\n",
       "      <td>59</td>\n",
       "      <td>1</td>\n",
       "      <td>40288.085938</td>\n",
       "      <td>-0.015695</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.666667</td>\n",
       "      <td>...</td>\n",
       "      <td>347258.437500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.074839</td>\n",
       "      <td>1</td>\n",
       "      <td>29.0</td>\n",
       "      <td>547184.500000</td>\n",
       "      <td>178574.328125</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5004397</th>\n",
       "      <td>67</td>\n",
       "      <td>1</td>\n",
       "      <td>24833.666016</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>-1000.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.071429</td>\n",
       "      <td>...</td>\n",
       "      <td>21981.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.100474</td>\n",
       "      <td>1</td>\n",
       "      <td>50.0</td>\n",
       "      <td>8173.654297</td>\n",
       "      <td>27704.666016</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5004398</th>\n",
       "      <td>62</td>\n",
       "      <td>1</td>\n",
       "      <td>8906.096680</td>\n",
       "      <td>-0.016964</td>\n",
       "      <td>4</td>\n",
       "      <td>-1000.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.600000</td>\n",
       "      <td>...</td>\n",
       "      <td>46001.839844</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.849983</td>\n",
       "      <td>2</td>\n",
       "      <td>69.0</td>\n",
       "      <td>6298.724121</td>\n",
       "      <td>15167.950195</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5004399</th>\n",
       "      <td>67</td>\n",
       "      <td>1</td>\n",
       "      <td>19806.029297</td>\n",
       "      <td>0.171552</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.166667</td>\n",
       "      <td>...</td>\n",
       "      <td>41520.929688</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>393.781433</td>\n",
       "      <td>1</td>\n",
       "      <td>67.0</td>\n",
       "      <td>6316.500000</td>\n",
       "      <td>24091.773438</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5004400 rows × 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         rf  channel_sms_4q  avg_dc_total_rur_1q  loan_diff_0m  total_prd_cnt  \\\n",
       "0        71               0             0.000000      0.000000              0   \n",
       "1        22               0             0.000000      0.000000              0   \n",
       "2        35               0         48440.035156      0.000000              1   \n",
       "3         3               0             0.000000      0.000000              0   \n",
       "4        20               1          2065.666748      0.000000              1   \n",
       "...      ..             ...                  ...           ...            ...   \n",
       "5004395  49               0             0.000000      0.000000              0   \n",
       "5004396  59               1         40288.085938     -0.015695              4   \n",
       "5004397  67               1         24833.666016     -1.000000              1   \n",
       "5004398  62               1          8906.096680     -0.016964              4   \n",
       "5004399  67               1         19806.029297      0.171552              3   \n",
       "\n",
       "         days_to_last_login_dbo  commun_60  pensioners_flg  \\\n",
       "0                       -1000.0       -1.0               0   \n",
       "1                       -1000.0       -1.0               0   \n",
       "2                           0.0        1.0               0   \n",
       "3                       -1000.0       -1.0               0   \n",
       "4                           4.0       -1.0               0   \n",
       "...                         ...        ...             ...   \n",
       "5004395                     0.0       -1.0               0   \n",
       "5004396                     0.0       -1.0               0   \n",
       "5004397                 -1000.0        1.0               0   \n",
       "5004398                 -1000.0        1.0               1   \n",
       "5004399                     0.0       -1.0               1   \n",
       "\n",
       "         dbo_profile_flg_2q  avg_dc_total_cnt_daily_3q  ...  \\\n",
       "0                         0                   0.000000  ...   \n",
       "1                         0                   0.000000  ...   \n",
       "2                         1                   2.190476  ...   \n",
       "3                         0                   0.000000  ...   \n",
       "4                         1                   1.217391  ...   \n",
       "...                     ...                        ...  ...   \n",
       "5004395                   1                   0.000000  ...   \n",
       "5004396                   1                   2.666667  ...   \n",
       "5004397                   1                   1.071429  ...   \n",
       "5004398                   0                   2.600000  ...   \n",
       "5004399                   1                   1.166667  ...   \n",
       "\n",
       "         sum_casa_credit_rur_2q  credit_crm_flg_1q  dbo_remmit_out_cnt_1q  \\\n",
       "0                      0.000000                  0                      0   \n",
       "1                      0.000000                  0                      0   \n",
       "2                 148839.734375                  1                      0   \n",
       "3                      0.000000                  0                      0   \n",
       "4                   6795.259766                  1                      1   \n",
       "...                         ...                ...                    ...   \n",
       "5004395                0.000000                  0                      0   \n",
       "5004396           347258.437500                  1                      0   \n",
       "5004397            21981.000000                  1                      0   \n",
       "5004398            46001.839844                  1                      0   \n",
       "5004399            41520.929688                  1                      1   \n",
       "\n",
       "         max_pers_diff_1q  dc_cnt_3q   age  avg_dc_total_rur_daily_3q  \\\n",
       "0                0.000000          1  51.0                   0.000000   \n",
       "1                0.000000          1  46.0                   0.000000   \n",
       "2               72.107597          1  40.0                8434.296875   \n",
       "3                0.000000          0  55.0                   0.000000   \n",
       "4                3.519492          2  33.0                 375.264343   \n",
       "...                   ...        ...   ...                        ...   \n",
       "5004395          0.000000          1  33.0                   0.000000   \n",
       "5004396          0.074839          1  29.0              547184.500000   \n",
       "5004397          0.100474          1  50.0                8173.654297   \n",
       "5004398          0.849983          2  69.0                6298.724121   \n",
       "5004399        393.781433          1  67.0                6316.500000   \n",
       "\n",
       "         avg_casa_credit_rur_1q  commun_90  appl_approved_flg_1y  \n",
       "0                      0.000000       -1.0                     0  \n",
       "1                      0.000000       -1.0                     0  \n",
       "2                  47838.406250        1.0                     0  \n",
       "3                      0.000000       -1.0                     0  \n",
       "4                   2185.286621       -1.0                     0  \n",
       "...                         ...        ...                   ...  \n",
       "5004395                0.000000       -1.0                     0  \n",
       "5004396           178574.328125       -1.0                     1  \n",
       "5004397            27704.666016        1.0                     1  \n",
       "5004398            15167.950195        1.0                     0  \n",
       "5004399            24091.773438       -1.0                     1  \n",
       "\n",
       "[5004400 rows x 26 columns]"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_imp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_cols = ['rf']\n",
    "cat_cols_index = [df_imp.columns.get_loc(c) for c in cat_cols] # Получение номеров категориальных колонок"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Делим данные df_imp на тренировочный и тестовый набор\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    df_imp, y, test_size=0.25, stratify=y, shuffle=True, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9f0788148a734815bc805d88eda69c13",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "MetricVisualizer(layout=Layout(align_self='stretch', height='500px'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Learning rate set to 0.5\n",
      "0:\ttest: 0.8864090\tbest: 0.8864090 (0)\ttotal: 618ms\tremaining: 48.8s\n",
      "1:\ttest: 0.9030443\tbest: 0.9030443 (1)\ttotal: 1.13s\tremaining: 44s\n",
      "2:\ttest: 0.9090122\tbest: 0.9090122 (2)\ttotal: 1.71s\tremaining: 44s\n",
      "3:\ttest: 0.9142833\tbest: 0.9142833 (3)\ttotal: 2.24s\tremaining: 42.6s\n",
      "4:\ttest: 0.9213661\tbest: 0.9213661 (4)\ttotal: 2.8s\tremaining: 42s\n",
      "5:\ttest: 0.9220390\tbest: 0.9220390 (5)\ttotal: 3.28s\tremaining: 40.4s\n",
      "6:\ttest: 0.9239854\tbest: 0.9239854 (6)\ttotal: 3.78s\tremaining: 39.4s\n",
      "7:\ttest: 0.9245008\tbest: 0.9245008 (7)\ttotal: 4.26s\tremaining: 38.3s\n",
      "8:\ttest: 0.9249599\tbest: 0.9249599 (8)\ttotal: 4.69s\tremaining: 37s\n",
      "9:\ttest: 0.9247453\tbest: 0.9249599 (8)\ttotal: 5.21s\tremaining: 36.5s\n",
      "10:\ttest: 0.9255775\tbest: 0.9255775 (10)\ttotal: 5.7s\tremaining: 35.8s\n",
      "11:\ttest: 0.9259796\tbest: 0.9259796 (11)\ttotal: 6.2s\tremaining: 35.2s\n",
      "12:\ttest: 0.9269317\tbest: 0.9269317 (12)\ttotal: 6.73s\tremaining: 34.7s\n",
      "13:\ttest: 0.9267832\tbest: 0.9269317 (12)\ttotal: 7.23s\tremaining: 34.1s\n",
      "14:\ttest: 0.9261955\tbest: 0.9269317 (12)\ttotal: 7.69s\tremaining: 33.3s\n",
      "15:\ttest: 0.9260170\tbest: 0.9269317 (12)\ttotal: 8.13s\tremaining: 32.5s\n",
      "16:\ttest: 0.9254856\tbest: 0.9269317 (12)\ttotal: 8.59s\tremaining: 31.8s\n",
      "17:\ttest: 0.9251932\tbest: 0.9269317 (12)\ttotal: 9.07s\tremaining: 31.2s\n",
      "18:\ttest: 0.9242955\tbest: 0.9269317 (12)\ttotal: 9.52s\tremaining: 30.6s\n",
      "19:\ttest: 0.9245896\tbest: 0.9269317 (12)\ttotal: 9.99s\tremaining: 30s\n",
      "20:\ttest: 0.9237789\tbest: 0.9269317 (12)\ttotal: 10.5s\tremaining: 29.4s\n",
      "21:\ttest: 0.9239059\tbest: 0.9269317 (12)\ttotal: 10.9s\tremaining: 28.7s\n",
      "22:\ttest: 0.9240490\tbest: 0.9269317 (12)\ttotal: 11.3s\tremaining: 28.1s\n",
      "23:\ttest: 0.9238428\tbest: 0.9269317 (12)\ttotal: 11.8s\tremaining: 27.5s\n",
      "24:\ttest: 0.9241386\tbest: 0.9269317 (12)\ttotal: 12.2s\tremaining: 26.9s\n",
      "25:\ttest: 0.9242522\tbest: 0.9269317 (12)\ttotal: 12.6s\tremaining: 26.1s\n",
      "26:\ttest: 0.9237736\tbest: 0.9269317 (12)\ttotal: 13s\tremaining: 25.6s\n",
      "27:\ttest: 0.9238983\tbest: 0.9269317 (12)\ttotal: 13.5s\tremaining: 25.1s\n",
      "28:\ttest: 0.9241816\tbest: 0.9269317 (12)\ttotal: 13.9s\tremaining: 24.5s\n",
      "29:\ttest: 0.9231678\tbest: 0.9269317 (12)\ttotal: 14.4s\tremaining: 24s\n",
      "30:\ttest: 0.9231478\tbest: 0.9269317 (12)\ttotal: 14.9s\tremaining: 23.5s\n",
      "31:\ttest: 0.9220543\tbest: 0.9269317 (12)\ttotal: 15.3s\tremaining: 23s\n",
      "32:\ttest: 0.9221883\tbest: 0.9269317 (12)\ttotal: 15.8s\tremaining: 22.5s\n",
      "33:\ttest: 0.9222693\tbest: 0.9269317 (12)\ttotal: 16.2s\tremaining: 22s\n",
      "34:\ttest: 0.9215900\tbest: 0.9269317 (12)\ttotal: 16.7s\tremaining: 21.5s\n",
      "35:\ttest: 0.9217132\tbest: 0.9269317 (12)\ttotal: 17.1s\tremaining: 20.9s\n",
      "36:\ttest: 0.9211195\tbest: 0.9269317 (12)\ttotal: 17.6s\tremaining: 20.4s\n",
      "37:\ttest: 0.9204786\tbest: 0.9269317 (12)\ttotal: 18.1s\tremaining: 20s\n",
      "38:\ttest: 0.9202988\tbest: 0.9269317 (12)\ttotal: 18.5s\tremaining: 19.5s\n",
      "39:\ttest: 0.9199214\tbest: 0.9269317 (12)\ttotal: 19s\tremaining: 19s\n",
      "40:\ttest: 0.9193251\tbest: 0.9269317 (12)\ttotal: 19.5s\tremaining: 18.6s\n",
      "41:\ttest: 0.9190906\tbest: 0.9269317 (12)\ttotal: 20s\tremaining: 18.1s\n",
      "42:\ttest: 0.9190285\tbest: 0.9269317 (12)\ttotal: 20.5s\tremaining: 17.6s\n",
      "43:\ttest: 0.9174274\tbest: 0.9269317 (12)\ttotal: 20.9s\tremaining: 17.1s\n",
      "44:\ttest: 0.9171863\tbest: 0.9269317 (12)\ttotal: 21.3s\tremaining: 16.6s\n",
      "45:\ttest: 0.9168081\tbest: 0.9269317 (12)\ttotal: 21.8s\tremaining: 16.1s\n",
      "46:\ttest: 0.9164366\tbest: 0.9269317 (12)\ttotal: 22.2s\tremaining: 15.6s\n",
      "47:\ttest: 0.9161670\tbest: 0.9269317 (12)\ttotal: 22.6s\tremaining: 15.1s\n",
      "48:\ttest: 0.9155295\tbest: 0.9269317 (12)\ttotal: 23s\tremaining: 14.6s\n",
      "49:\ttest: 0.9149053\tbest: 0.9269317 (12)\ttotal: 23.5s\tremaining: 14.1s\n",
      "50:\ttest: 0.9146121\tbest: 0.9269317 (12)\ttotal: 23.9s\tremaining: 13.6s\n",
      "51:\ttest: 0.9138528\tbest: 0.9269317 (12)\ttotal: 24.4s\tremaining: 13.1s\n",
      "52:\ttest: 0.9133146\tbest: 0.9269317 (12)\ttotal: 24.8s\tremaining: 12.6s\n",
      "53:\ttest: 0.9124965\tbest: 0.9269317 (12)\ttotal: 25.2s\tremaining: 12.1s\n",
      "54:\ttest: 0.9126045\tbest: 0.9269317 (12)\ttotal: 25.7s\tremaining: 11.7s\n",
      "55:\ttest: 0.9128437\tbest: 0.9269317 (12)\ttotal: 26.2s\tremaining: 11.2s\n",
      "56:\ttest: 0.9117489\tbest: 0.9269317 (12)\ttotal: 26.6s\tremaining: 10.7s\n",
      "57:\ttest: 0.9110835\tbest: 0.9269317 (12)\ttotal: 27.1s\tremaining: 10.3s\n",
      "58:\ttest: 0.9106847\tbest: 0.9269317 (12)\ttotal: 27.6s\tremaining: 9.81s\n",
      "59:\ttest: 0.9108733\tbest: 0.9269317 (12)\ttotal: 28s\tremaining: 9.33s\n",
      "60:\ttest: 0.9109885\tbest: 0.9269317 (12)\ttotal: 28.5s\tremaining: 8.86s\n",
      "61:\ttest: 0.9109382\tbest: 0.9269317 (12)\ttotal: 28.9s\tremaining: 8.39s\n",
      "62:\ttest: 0.9108821\tbest: 0.9269317 (12)\ttotal: 29.4s\tremaining: 7.92s\n",
      "63:\ttest: 0.9101873\tbest: 0.9269317 (12)\ttotal: 29.8s\tremaining: 7.46s\n",
      "64:\ttest: 0.9090813\tbest: 0.9269317 (12)\ttotal: 30.3s\tremaining: 7s\n",
      "65:\ttest: 0.9089195\tbest: 0.9269317 (12)\ttotal: 30.8s\tremaining: 6.54s\n",
      "66:\ttest: 0.9087374\tbest: 0.9269317 (12)\ttotal: 31.3s\tremaining: 6.07s\n",
      "67:\ttest: 0.9086139\tbest: 0.9269317 (12)\ttotal: 31.7s\tremaining: 5.59s\n",
      "68:\ttest: 0.9088863\tbest: 0.9269317 (12)\ttotal: 32.2s\tremaining: 5.13s\n",
      "69:\ttest: 0.9082719\tbest: 0.9269317 (12)\ttotal: 32.6s\tremaining: 4.66s\n",
      "70:\ttest: 0.9076975\tbest: 0.9269317 (12)\ttotal: 33.1s\tremaining: 4.19s\n",
      "71:\ttest: 0.9072033\tbest: 0.9269317 (12)\ttotal: 33.5s\tremaining: 3.73s\n",
      "72:\ttest: 0.9069038\tbest: 0.9269317 (12)\ttotal: 34s\tremaining: 3.26s\n",
      "73:\ttest: 0.9061271\tbest: 0.9269317 (12)\ttotal: 34.4s\tremaining: 2.79s\n",
      "74:\ttest: 0.9050381\tbest: 0.9269317 (12)\ttotal: 34.9s\tremaining: 2.32s\n",
      "75:\ttest: 0.9046560\tbest: 0.9269317 (12)\ttotal: 35.3s\tremaining: 1.86s\n",
      "76:\ttest: 0.9042388\tbest: 0.9269317 (12)\ttotal: 35.8s\tremaining: 1.4s\n",
      "77:\ttest: 0.9042461\tbest: 0.9269317 (12)\ttotal: 36.3s\tremaining: 930ms\n",
      "78:\ttest: 0.9040334\tbest: 0.9269317 (12)\ttotal: 36.8s\tremaining: 466ms\n",
      "79:\ttest: 0.9033839\tbest: 0.9269317 (12)\ttotal: 37.3s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9269317257\n",
      "bestIteration = 12\n",
      "\n",
      "Shrink model to first 13 iterations.\n",
      "CatBoostClassifier_importance. Закончил обучение. Общее время обучения: 0:00:39.973874\n",
      "Model is fitted: True\n",
      "Model params: {'class_weights': {0: 1, 1: 703.1838649155723}, 'custom_metric': ['AUC'], 'eval_metric': 'AUC', 'n_estimators': 80, 'random_state': 42, 'cat_features': [0]}\n"
     ]
    }
   ],
   "source": [
    "#Catboost\n",
    "m_0 = len(y_train) - y_train.sum()\n",
    "m_1 = y_train.sum()\n",
    "class_weights = dict({0:1, 1: m_0/m_1})\n",
    "\n",
    "global_start_time = datetime.now()\n",
    "cat_imp = catboost.CatBoostClassifier(n_estimators=80,\n",
    "                                      #custom_loss=['AUC'], \n",
    "                                      random_state=42, eval_metric='AUC',\n",
    "                                      custom_metric=['AUC'],#:hints=skip_train~false'],\n",
    "                                      class_weights=class_weights,\n",
    "                                      cat_features=cat_cols_index) # параметры модели\n",
    "\n",
    "cat_imp.fit(X_train, y_train, eval_set=(X_test, y_test), plot=True) # обучение модели на тестовой выборке\n",
    "global_end_time = datetime.now()\n",
    "print(f'CatBoostClassifier_importance. Закончил обучение. Общее время обучения: {global_end_time - global_start_time}')\n",
    "gc.collect()\n",
    "\n",
    "y_score_imp_train = cat_imp.predict_proba(X_train)[:, 1] # предсказания обученной модели на тренировочной выборке\n",
    "y_score_imp_test = cat_imp.predict_proba(X_test)[:, 1] # предсказания обученной модели на тестовой выборке\n",
    "print(f\"Model is fitted: {str(cat_imp.is_fitted())}\")\n",
    "print(f\"Model params: {cat_imp.get_params()}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "roc-auc на тренировочных данных: 0.933923802834486\n",
      "roc-auc на тестовых данных: 0.9269317257161763\n"
     ]
    }
   ],
   "source": [
    "print('roc-auc на тренировочных данных:', roc_auc_score(y_train, y_score_imp_train))\n",
    "print('roc-auc на тестовых данных:', roc_auc_score(y_test, y_score_imp_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "roc-auc на всем наборе данных: 0.9321758586506502\n"
     ]
    }
   ],
   "source": [
    "y_score_imp = cat_imp.predict_proba(df_imp)[:, 1]\n",
    "print('roc-auc на всем наборе данных:', roc_auc_score(y, y_score_imp))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CatBoostClassifier, cat_imp. Сохранение модели в формате catboost\n",
      "Ok\n"
     ]
    }
   ],
   "source": [
    "print('CatBoostClassifier, cat_imp. Сохранение модели в формате catboost')\n",
    "cat_imp.save_model(\"сс_cat_imp_columns.cbm\")\n",
    "print('Ok')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CatBoostClassifier, cat_imp. Загрузка модели в формате catboost\n",
      "ok\n"
     ]
    }
   ],
   "source": [
    "print('CatBoostClassifier, cat_imp. Загрузка модели в формате catboost')\n",
    "cat4_imp_load = catboost.CatBoostClassifier()\n",
    "cat4_imp_load.load_model(\"сс_cat_imp_columns.cbm\")\n",
    "print('ok')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Загрузка списка важных полей cc_cat_list_feature_imp.txt\n",
      "Кол-во важных полей: 26\n"
     ]
    }
   ],
   "source": [
    "name_file_imp_col = 'cc_cat_list_feature_imp.txt'\n",
    "print(f'Загрузка списка важных полей {name_file_imp_col}')\n",
    "with open(name_file_imp_col, 'r') as file:\n",
    "    list_cat_v2_imp = file.readlines()\n",
    "#удаляем сивмолы перевода на новую строку\n",
    "list_cat_v2_imp = [x.strip() for x in list_cat_v2_imp]\n",
    "print(f'Кол-во важных полей: {len(list_cat_v2_imp)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_cat_v2_imp == summary_list_cat_importance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_cols = ['rf']\n",
    "cat_cols_index = [df_imp.columns.get_loc(c) for c in cat_cols] # Получение номеров категориальных колонок"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_imp = df_score[list_cat_v2_imp]\n",
    "#Делим данные df_imp на тренировочный и тестовый набор\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    df_imp, y, test_size=0.25, stratify=y, shuffle=True, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_score_imp_train = cat4_imp_load.predict_proba(X_train)[:, 1] # предсказания обученной модели на тренировочной выборке\n",
    "y_score_imp_test = cat4_imp_load.predict_proba(X_test)[:, 1] # предсказания обученной модели на тестовой выборке\n",
    "y_score_imp = cat4_imp_load.predict_proba(df_imp)[:, 1] #предсказания обученной модели на всем наборе"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Загруженная модель в формате catboost\n",
      "roc-auc на тренировочных данных: 0.933923802834486\n",
      "roc-auc на тестовых данных: 0.9269317257161763\n",
      "roc-auc на всем наборе данных: 0.9321758586506502\n"
     ]
    }
   ],
   "source": [
    "print('Загруженная модель в формате catboost')\n",
    "print('roc-auc на тренировочных данных:', roc_auc_score(y_train, y_score_imp_train))\n",
    "print('roc-auc на тестовых данных:', roc_auc_score(y_test, y_score_imp_test))\n",
    "print('roc-auc на всем наборе данных:', roc_auc_score(y, y_score_imp))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_bin = pd.DataFrame({'code': code, 'target': y, 'y_score': y_score_imp})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_bin['bin_int'] = pd.cut(df_bin['y_score'], bins=10, labels=list(range(1, 11)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_bin.bin_int.value_counts().sort_index(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>code</th>\n",
       "      <th>target</th>\n",
       "      <th>y_score</th>\n",
       "      <th>bin</th>\n",
       "      <th>bin_int</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>71_Ч_208289405410</td>\n",
       "      <td>0</td>\n",
       "      <td>0.166189</td>\n",
       "      <td>(0.0999, 0.2]</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22_Ч_175283861925</td>\n",
       "      <td>0</td>\n",
       "      <td>0.166189</td>\n",
       "      <td>(0.0999, 0.2]</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>35_Ч_44632341607</td>\n",
       "      <td>0</td>\n",
       "      <td>0.864712</td>\n",
       "      <td>(0.8, 0.9]</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>03_Ч_407243875392</td>\n",
       "      <td>0</td>\n",
       "      <td>0.092932</td>\n",
       "      <td>(-0.000999, 0.0999]</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20_Ч_260333744922</td>\n",
       "      <td>0</td>\n",
       "      <td>0.362404</td>\n",
       "      <td>(0.3, 0.4]</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5004395</th>\n",
       "      <td>49_Ч_295832019582</td>\n",
       "      <td>1</td>\n",
       "      <td>0.991745</td>\n",
       "      <td>(0.9, 0.999]</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5004396</th>\n",
       "      <td>59_Ч_315654719623</td>\n",
       "      <td>1</td>\n",
       "      <td>0.994718</td>\n",
       "      <td>(0.9, 0.999]</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5004397</th>\n",
       "      <td>67_Ч_175535584944</td>\n",
       "      <td>1</td>\n",
       "      <td>0.973715</td>\n",
       "      <td>(0.9, 0.999]</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5004398</th>\n",
       "      <td>62_Ч_249780406774</td>\n",
       "      <td>1</td>\n",
       "      <td>0.776903</td>\n",
       "      <td>(0.7, 0.8]</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5004399</th>\n",
       "      <td>67_Ч_175441980191</td>\n",
       "      <td>1</td>\n",
       "      <td>0.902666</td>\n",
       "      <td>(0.9, 0.999]</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5004400 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                      code  target   y_score                  bin bin_int\n",
       "0        71_Ч_208289405410       0  0.166189        (0.0999, 0.2]       2\n",
       "1        22_Ч_175283861925       0  0.166189        (0.0999, 0.2]       2\n",
       "2         35_Ч_44632341607       0  0.864712           (0.8, 0.9]       9\n",
       "3        03_Ч_407243875392       0  0.092932  (-0.000999, 0.0999]       1\n",
       "4        20_Ч_260333744922       0  0.362404           (0.3, 0.4]       4\n",
       "...                    ...     ...       ...                  ...     ...\n",
       "5004395  49_Ч_295832019582       1  0.991745         (0.9, 0.999]      10\n",
       "5004396  59_Ч_315654719623       1  0.994718         (0.9, 0.999]      10\n",
       "5004397  67_Ч_175535584944       1  0.973715         (0.9, 0.999]      10\n",
       "5004398  62_Ч_249780406774       1  0.776903           (0.7, 0.8]       8\n",
       "5004399  67_Ч_175441980191       1  0.902666         (0.9, 0.999]      10\n",
       "\n",
       "[5004400 rows x 5 columns]"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "real_rate_upd = len(df_bin[df_bin.target==1]) / len(df_bin) #пересчет real_rate\n",
    "df_bin['Adj_P1_upd'] = (1/(1 + ((1/real_rate_upd) - 1) / ((1/0.5) - 1) * ((1/df_bin.y_score) - 1)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_stat = df_bin.groupby(by=['bin_int']).agg({'target':['sum', 'mean', 'count'], \n",
    "                                                  'y_score':['sum', 'mean'], \n",
    "                                                  #'Adj_P1':['sum', 'mean'],\n",
    "                                                  'Adj_P1_upd':['sum', 'mean'] \n",
    "                                                 })"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"3\" halign=\"left\">target</th>\n",
       "      <th colspan=\"2\" halign=\"left\">y_score</th>\n",
       "      <th colspan=\"2\" halign=\"left\">Adj_P1_upd</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>sum</th>\n",
       "      <th>mean</th>\n",
       "      <th>count</th>\n",
       "      <th>sum</th>\n",
       "      <th>mean</th>\n",
       "      <th>sum</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bin_int</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>92.0</td>\n",
       "      <td>0.000047</td>\n",
       "      <td>1960595</td>\n",
       "      <td>102326.472310</td>\n",
       "      <td>0.052192</td>\n",
       "      <td>158.047691</td>\n",
       "      <td>0.000081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>369.0</td>\n",
       "      <td>0.000214</td>\n",
       "      <td>1724564</td>\n",
       "      <td>242602.975298</td>\n",
       "      <td>0.140675</td>\n",
       "      <td>403.904870</td>\n",
       "      <td>0.000234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>158.0</td>\n",
       "      <td>0.000517</td>\n",
       "      <td>305781</td>\n",
       "      <td>73884.448628</td>\n",
       "      <td>0.241625</td>\n",
       "      <td>139.375152</td>\n",
       "      <td>0.000456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>152.0</td>\n",
       "      <td>0.000813</td>\n",
       "      <td>186915</td>\n",
       "      <td>65095.196262</td>\n",
       "      <td>0.348261</td>\n",
       "      <td>142.720848</td>\n",
       "      <td>0.000764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>223.0</td>\n",
       "      <td>0.001512</td>\n",
       "      <td>147524</td>\n",
       "      <td>66262.031979</td>\n",
       "      <td>0.449161</td>\n",
       "      <td>171.890886</td>\n",
       "      <td>0.001165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>269.0</td>\n",
       "      <td>0.001893</td>\n",
       "      <td>142081</td>\n",
       "      <td>77793.772265</td>\n",
       "      <td>0.547531</td>\n",
       "      <td>245.916571</td>\n",
       "      <td>0.001731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>399.0</td>\n",
       "      <td>0.002772</td>\n",
       "      <td>143915</td>\n",
       "      <td>93558.603136</td>\n",
       "      <td>0.650096</td>\n",
       "      <td>383.251905</td>\n",
       "      <td>0.002663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>741.0</td>\n",
       "      <td>0.004765</td>\n",
       "      <td>155501</td>\n",
       "      <td>116744.028250</td>\n",
       "      <td>0.750761</td>\n",
       "      <td>675.196901</td>\n",
       "      <td>0.004342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1338.0</td>\n",
       "      <td>0.008756</td>\n",
       "      <td>152813</td>\n",
       "      <td>129642.912603</td>\n",
       "      <td>0.848376</td>\n",
       "      <td>1258.326829</td>\n",
       "      <td>0.008234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3366.0</td>\n",
       "      <td>0.039735</td>\n",
       "      <td>84711</td>\n",
       "      <td>79758.984939</td>\n",
       "      <td>0.941542</td>\n",
       "      <td>3000.819177</td>\n",
       "      <td>0.035424</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         target                           y_score             Adj_P1_upd  \\\n",
       "            sum      mean    count            sum      mean          sum   \n",
       "bin_int                                                                    \n",
       "1          92.0  0.000047  1960595  102326.472310  0.052192   158.047691   \n",
       "2         369.0  0.000214  1724564  242602.975298  0.140675   403.904870   \n",
       "3         158.0  0.000517   305781   73884.448628  0.241625   139.375152   \n",
       "4         152.0  0.000813   186915   65095.196262  0.348261   142.720848   \n",
       "5         223.0  0.001512   147524   66262.031979  0.449161   171.890886   \n",
       "6         269.0  0.001893   142081   77793.772265  0.547531   245.916571   \n",
       "7         399.0  0.002772   143915   93558.603136  0.650096   383.251905   \n",
       "8         741.0  0.004765   155501  116744.028250  0.750761   675.196901   \n",
       "9        1338.0  0.008756   152813  129642.912603  0.848376  1258.326829   \n",
       "10       3366.0  0.039735    84711   79758.984939  0.941542  3000.819177   \n",
       "\n",
       "                   \n",
       "             mean  \n",
       "bin_int            \n",
       "1        0.000081  \n",
       "2        0.000234  \n",
       "3        0.000456  \n",
       "4        0.000764  \n",
       "5        0.001165  \n",
       "6        0.001731  \n",
       "7        0.002663  \n",
       "8        0.004342  \n",
       "9        0.008234  \n",
       "10       0.035424  "
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_stat"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Поиск по сетке**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "bestTest = 0.9351404793\n",
      "bestIteration = 198\n",
      "\n",
      "0:\tloss: 0.9351405\tbest: 0.9351405 (0)\ttotal: 3m 10s\tremaining: 1h 22s\n",
      "\n",
      "bestTest = 0.9347733865\n",
      "bestIteration = 199\n",
      "\n",
      "1:\tloss: 0.9347734\tbest: 0.9351405 (0)\ttotal: 6m 22s\tremaining: 57m 22s\n",
      "\n",
      "bestTest = 0.934850271\n",
      "bestIteration = 199\n",
      "\n",
      "2:\tloss: 0.9348503\tbest: 0.9351405 (0)\ttotal: 9m 28s\tremaining: 53m 43s\n",
      "\n",
      "bestTest = 0.9348876643\n",
      "bestIteration = 199\n",
      "\n",
      "3:\tloss: 0.9348877\tbest: 0.9351405 (0)\ttotal: 12m 40s\tremaining: 50m 41s\n",
      "\n",
      "bestTest = 0.9346660074\n",
      "bestIteration = 199\n",
      "\n",
      "4:\tloss: 0.9346660\tbest: 0.9351405 (0)\ttotal: 15m 50s\tremaining: 47m 32s\n",
      "\n",
      "bestTest = 0.9346655518\n",
      "bestIteration = 199\n",
      "\n",
      "5:\tloss: 0.9346656\tbest: 0.9351405 (0)\ttotal: 19m 1s\tremaining: 44m 23s\n",
      "\n",
      "bestTest = 0.9347104705\n",
      "bestIteration = 199\n",
      "\n",
      "6:\tloss: 0.9347105\tbest: 0.9351405 (0)\ttotal: 22m 10s\tremaining: 41m 10s\n",
      "\n",
      "bestTest = 0.9347634921\n",
      "bestIteration = 199\n",
      "\n",
      "7:\tloss: 0.9347635\tbest: 0.9351405 (0)\ttotal: 25m 19s\tremaining: 37m 58s\n",
      "\n",
      "bestTest = 0.9345627608\n",
      "bestIteration = 199\n",
      "\n",
      "8:\tloss: 0.9345628\tbest: 0.9351405 (0)\ttotal: 28m 32s\tremaining: 34m 53s\n",
      "\n",
      "bestTest = 0.934770931\n",
      "bestIteration = 197\n",
      "\n",
      "9:\tloss: 0.9347709\tbest: 0.9351405 (0)\ttotal: 31m 44s\tremaining: 31m 44s\n",
      "\n",
      "bestTest = 0.9359497791\n",
      "bestIteration = 196\n",
      "\n",
      "10:\tloss: 0.9359498\tbest: 0.9359498 (10)\ttotal: 35m 14s\tremaining: 28m 50s\n",
      "\n",
      "bestTest = 0.9355559252\n",
      "bestIteration = 199\n",
      "\n",
      "11:\tloss: 0.9355559\tbest: 0.9359498 (10)\ttotal: 38m 39s\tremaining: 25m 46s\n",
      "\n",
      "bestTest = 0.9357430718\n",
      "bestIteration = 199\n",
      "\n",
      "12:\tloss: 0.9357431\tbest: 0.9359498 (10)\ttotal: 42m 8s\tremaining: 22m 41s\n",
      "\n",
      "bestTest = 0.9357429698\n",
      "bestIteration = 199\n",
      "\n",
      "13:\tloss: 0.9357430\tbest: 0.9359498 (10)\ttotal: 45m 37s\tremaining: 19m 33s\n",
      "\n",
      "bestTest = 0.9357379049\n",
      "bestIteration = 199\n",
      "\n",
      "14:\tloss: 0.9357379\tbest: 0.9359498 (10)\ttotal: 49m 4s\tremaining: 16m 21s\n",
      "\n",
      "bestTest = 0.9358730698\n",
      "bestIteration = 199\n",
      "\n",
      "15:\tloss: 0.9358731\tbest: 0.9359498 (10)\ttotal: 52m 33s\tremaining: 13m 8s\n",
      "\n",
      "bestTest = 0.935339477\n",
      "bestIteration = 199\n",
      "\n",
      "16:\tloss: 0.9353395\tbest: 0.9359498 (10)\ttotal: 56m 4s\tremaining: 9m 53s\n",
      "\n",
      "bestTest = 0.9357278934\n",
      "bestIteration = 199\n",
      "\n",
      "17:\tloss: 0.9357279\tbest: 0.9359498 (10)\ttotal: 59m 28s\tremaining: 6m 36s\n",
      "\n",
      "bestTest = 0.9359621222\n",
      "bestIteration = 199\n",
      "\n",
      "18:\tloss: 0.9359621\tbest: 0.9359621 (18)\ttotal: 1h 2m 56s\tremaining: 3m 18s\n",
      "\n",
      "bestTest = 0.9354648725\n",
      "bestIteration = 199\n",
      "\n",
      "19:\tloss: 0.9354649\tbest: 0.9359621 (18)\ttotal: 1h 6m 24s\tremaining: 0us\n",
      "Estimating final quality...\n",
      "Training on fold [0/3]\n",
      "\n",
      "bestTest = 0.929796263\n",
      "bestIteration = 199\n",
      "\n",
      "Training on fold [1/3]\n",
      "\n",
      "bestTest = 0.9281849755\n",
      "bestIteration = 199\n",
      "\n",
      "Training on fold [2/3]\n",
      "\n",
      "bestTest = 0.9333327875\n",
      "bestIteration = 199\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'params': {'depth': 6, 'l2_leaf_reg': 889.0},\n",
       " 'cv_results': defaultdict(list,\n",
       "             {'iterations': [0,\n",
       "               1,\n",
       "               2,\n",
       "               3,\n",
       "               4,\n",
       "               5,\n",
       "               6,\n",
       "               7,\n",
       "               8,\n",
       "               9,\n",
       "               10,\n",
       "               11,\n",
       "               12,\n",
       "               13,\n",
       "               14,\n",
       "               15,\n",
       "               16,\n",
       "               17,\n",
       "               18,\n",
       "               19,\n",
       "               20,\n",
       "               21,\n",
       "               22,\n",
       "               23,\n",
       "               24,\n",
       "               25,\n",
       "               26,\n",
       "               27,\n",
       "               28,\n",
       "               29,\n",
       "               30,\n",
       "               31,\n",
       "               32,\n",
       "               33,\n",
       "               34,\n",
       "               35,\n",
       "               36,\n",
       "               37,\n",
       "               38,\n",
       "               39,\n",
       "               40,\n",
       "               41,\n",
       "               42,\n",
       "               43,\n",
       "               44,\n",
       "               45,\n",
       "               46,\n",
       "               47,\n",
       "               48,\n",
       "               49,\n",
       "               50,\n",
       "               51,\n",
       "               52,\n",
       "               53,\n",
       "               54,\n",
       "               55,\n",
       "               56,\n",
       "               57,\n",
       "               58,\n",
       "               59,\n",
       "               60,\n",
       "               61,\n",
       "               62,\n",
       "               63,\n",
       "               64,\n",
       "               65,\n",
       "               66,\n",
       "               67,\n",
       "               68,\n",
       "               69,\n",
       "               70,\n",
       "               71,\n",
       "               72,\n",
       "               73,\n",
       "               74,\n",
       "               75,\n",
       "               76,\n",
       "               77,\n",
       "               78,\n",
       "               79,\n",
       "               80,\n",
       "               81,\n",
       "               82,\n",
       "               83,\n",
       "               84,\n",
       "               85,\n",
       "               86,\n",
       "               87,\n",
       "               88,\n",
       "               89,\n",
       "               90,\n",
       "               91,\n",
       "               92,\n",
       "               93,\n",
       "               94,\n",
       "               95,\n",
       "               96,\n",
       "               97,\n",
       "               98,\n",
       "               99,\n",
       "               100,\n",
       "               101,\n",
       "               102,\n",
       "               103,\n",
       "               104,\n",
       "               105,\n",
       "               106,\n",
       "               107,\n",
       "               108,\n",
       "               109,\n",
       "               110,\n",
       "               111,\n",
       "               112,\n",
       "               113,\n",
       "               114,\n",
       "               115,\n",
       "               116,\n",
       "               117,\n",
       "               118,\n",
       "               119,\n",
       "               120,\n",
       "               121,\n",
       "               122,\n",
       "               123,\n",
       "               124,\n",
       "               125,\n",
       "               126,\n",
       "               127,\n",
       "               128,\n",
       "               129,\n",
       "               130,\n",
       "               131,\n",
       "               132,\n",
       "               133,\n",
       "               134,\n",
       "               135,\n",
       "               136,\n",
       "               137,\n",
       "               138,\n",
       "               139,\n",
       "               140,\n",
       "               141,\n",
       "               142,\n",
       "               143,\n",
       "               144,\n",
       "               145,\n",
       "               146,\n",
       "               147,\n",
       "               148,\n",
       "               149,\n",
       "               150,\n",
       "               151,\n",
       "               152,\n",
       "               153,\n",
       "               154,\n",
       "               155,\n",
       "               156,\n",
       "               157,\n",
       "               158,\n",
       "               159,\n",
       "               160,\n",
       "               161,\n",
       "               162,\n",
       "               163,\n",
       "               164,\n",
       "               165,\n",
       "               166,\n",
       "               167,\n",
       "               168,\n",
       "               169,\n",
       "               170,\n",
       "               171,\n",
       "               172,\n",
       "               173,\n",
       "               174,\n",
       "               175,\n",
       "               176,\n",
       "               177,\n",
       "               178,\n",
       "               179,\n",
       "               180,\n",
       "               181,\n",
       "               182,\n",
       "               183,\n",
       "               184,\n",
       "               185,\n",
       "               186,\n",
       "               187,\n",
       "               188,\n",
       "               189,\n",
       "               190,\n",
       "               191,\n",
       "               192,\n",
       "               193,\n",
       "               194,\n",
       "               195,\n",
       "               196,\n",
       "               197,\n",
       "               198,\n",
       "               199],\n",
       "              'test-AUC-mean': [0.8874934594331761,\n",
       "               0.8976984520425805,\n",
       "               0.8989405533793281,\n",
       "               0.9003170508601971,\n",
       "               0.9054451404124076,\n",
       "               0.9059674132233776,\n",
       "               0.9065004544955747,\n",
       "               0.9071384504593022,\n",
       "               0.9077967162360813,\n",
       "               0.9089299194305175,\n",
       "               0.910494679129722,\n",
       "               0.9105674649646652,\n",
       "               0.9104458331119597,\n",
       "               0.91048640039965,\n",
       "               0.9114510638188342,\n",
       "               0.9118234528860053,\n",
       "               0.9125053977711145,\n",
       "               0.9134941750714137,\n",
       "               0.9135394778052639,\n",
       "               0.9135386016804704,\n",
       "               0.9143518479365964,\n",
       "               0.9150606355275145,\n",
       "               0.9155402358639938,\n",
       "               0.9162596406814195,\n",
       "               0.9166813648602968,\n",
       "               0.9166264313532572,\n",
       "               0.9170353096497892,\n",
       "               0.9171791402964801,\n",
       "               0.9172949731380969,\n",
       "               0.9186125643187468,\n",
       "               0.918850181950874,\n",
       "               0.9190118974117324,\n",
       "               0.9194028650280047,\n",
       "               0.9200210548611354,\n",
       "               0.9201669484355395,\n",
       "               0.9203139646922196,\n",
       "               0.9204167963814239,\n",
       "               0.9205621038466442,\n",
       "               0.9207069025674901,\n",
       "               0.9207302340655739,\n",
       "               0.9208032621430422,\n",
       "               0.9209859171928247,\n",
       "               0.9211103777927164,\n",
       "               0.9212432599064116,\n",
       "               0.9215550894770702,\n",
       "               0.9217156628849473,\n",
       "               0.9220047808407924,\n",
       "               0.9221223226556066,\n",
       "               0.9221804620867339,\n",
       "               0.9224296750108091,\n",
       "               0.9225452158161462,\n",
       "               0.9226662086653278,\n",
       "               0.9228414673478412,\n",
       "               0.923032449495472,\n",
       "               0.9231224973778632,\n",
       "               0.9231938819112072,\n",
       "               0.9232753436519765,\n",
       "               0.9234396545612675,\n",
       "               0.9235686618803861,\n",
       "               0.9236981221868402,\n",
       "               0.9237498169079738,\n",
       "               0.92393807717524,\n",
       "               0.9240204194174465,\n",
       "               0.9241093084791294,\n",
       "               0.9242515549372149,\n",
       "               0.9243566229385873,\n",
       "               0.9244368298571337,\n",
       "               0.9245092841345479,\n",
       "               0.9245849191369908,\n",
       "               0.9246492939529726,\n",
       "               0.9246830730883798,\n",
       "               0.924750652011015,\n",
       "               0.9247930205392977,\n",
       "               0.9248643918759806,\n",
       "               0.9249407367953232,\n",
       "               0.9251288890399446,\n",
       "               0.9252034690540851,\n",
       "               0.9252800524739323,\n",
       "               0.9253707590493233,\n",
       "               0.9253706225805037,\n",
       "               0.9254525837923836,\n",
       "               0.9255526190828566,\n",
       "               0.9256558749157285,\n",
       "               0.9257647235010897,\n",
       "               0.9258796721122348,\n",
       "               0.9259764565535266,\n",
       "               0.9260572776073022,\n",
       "               0.9261160940002727,\n",
       "               0.9261645475008967,\n",
       "               0.9262005823270979,\n",
       "               0.926273461638389,\n",
       "               0.9263866175926019,\n",
       "               0.9264787397318957,\n",
       "               0.926533246789473,\n",
       "               0.9265864628586292,\n",
       "               0.926657631362346,\n",
       "               0.9267190533471054,\n",
       "               0.9267975815519777,\n",
       "               0.9268713494031499,\n",
       "               0.9269388841500347,\n",
       "               0.9270074380259988,\n",
       "               0.9270627911297886,\n",
       "               0.9270858941852543,\n",
       "               0.9271406380895005,\n",
       "               0.9271892701972622,\n",
       "               0.9272968771833304,\n",
       "               0.9273367775958942,\n",
       "               0.9273706242454184,\n",
       "               0.9273970931991576,\n",
       "               0.9274363914730154,\n",
       "               0.9274802336138678,\n",
       "               0.9275140723629237,\n",
       "               0.9275659618770029,\n",
       "               0.9276323017190196,\n",
       "               0.927656864190435,\n",
       "               0.927719176606301,\n",
       "               0.9277701119160527,\n",
       "               0.9278144009831917,\n",
       "               0.9278658307276237,\n",
       "               0.9279145549511961,\n",
       "               0.9279634833902642,\n",
       "               0.9279891243690391,\n",
       "               0.9280455974909313,\n",
       "               0.9280790586256794,\n",
       "               0.9281235654170518,\n",
       "               0.9281640027139694,\n",
       "               0.9281872952303388,\n",
       "               0.9282275514725286,\n",
       "               0.9282747740871979,\n",
       "               0.9283441166902687,\n",
       "               0.9284082542336676,\n",
       "               0.9284434564100815,\n",
       "               0.9284792933239175,\n",
       "               0.9285214923933026,\n",
       "               0.9285621354630612,\n",
       "               0.9286132271548398,\n",
       "               0.9286709494036439,\n",
       "               0.9286954915639889,\n",
       "               0.9287584365794922,\n",
       "               0.9288078886816701,\n",
       "               0.9288423047371751,\n",
       "               0.9288715206368252,\n",
       "               0.9289057064708235,\n",
       "               0.928966014053338,\n",
       "               0.928985660106953,\n",
       "               0.9290454219689823,\n",
       "               0.9290864726861999,\n",
       "               0.9291061108824351,\n",
       "               0.92916325769121,\n",
       "               0.9291791244501152,\n",
       "               0.9292018057061333,\n",
       "               0.9292321715376896,\n",
       "               0.9292584454062519,\n",
       "               0.9292793237414774,\n",
       "               0.929309191582888,\n",
       "               0.929344653377449,\n",
       "               0.9293618583893201,\n",
       "               0.9293784598642093,\n",
       "               0.9294040220346554,\n",
       "               0.9294383993582244,\n",
       "               0.9294580975718828,\n",
       "               0.9294894222973293,\n",
       "               0.929508364679326,\n",
       "               0.9295549121284333,\n",
       "               0.9295686141844887,\n",
       "               0.9296056432234213,\n",
       "               0.9296540038061653,\n",
       "               0.9296795700256935,\n",
       "               0.9296991137459333,\n",
       "               0.9297283780056232,\n",
       "               0.9297602898409064,\n",
       "               0.9298040810889439,\n",
       "               0.929810421119848,\n",
       "               0.9298557788878975,\n",
       "               0.9298802172793078,\n",
       "               0.9299132762458578,\n",
       "               0.9299364158327853,\n",
       "               0.929956923643236,\n",
       "               0.9299809423019688,\n",
       "               0.9300057404016523,\n",
       "               0.9300156068219523,\n",
       "               0.9300496287821566,\n",
       "               0.9300713996237585,\n",
       "               0.9300836298441088,\n",
       "               0.9301063196292557,\n",
       "               0.9301381129489518,\n",
       "               0.9301645274124434,\n",
       "               0.9301708298592019,\n",
       "               0.9301811280474341,\n",
       "               0.9301946486241345,\n",
       "               0.9302107986917484,\n",
       "               0.930237712467242,\n",
       "               0.9302616957380397,\n",
       "               0.9302822503036868,\n",
       "               0.9303083468279936,\n",
       "               0.9303334142208022,\n",
       "               0.9303546748631741,\n",
       "               0.9304024312313331,\n",
       "               0.9304147670777496,\n",
       "               0.9304380086626088],\n",
       "              'test-AUC-std': [0.004828254826855327,\n",
       "               0.0037484502234285183,\n",
       "               0.0033568559862898737,\n",
       "               0.004253445549892241,\n",
       "               0.0035720641418823546,\n",
       "               0.003841362160625193,\n",
       "               0.004005819422573258,\n",
       "               0.003503615350432049,\n",
       "               0.0033237173288437343,\n",
       "               0.0035601660499428775,\n",
       "               0.003674985511343292,\n",
       "               0.004076269864801252,\n",
       "               0.00400971384799374,\n",
       "               0.004088755975874023,\n",
       "               0.0034107161752030737,\n",
       "               0.0033077319653999834,\n",
       "               0.0026818046308389365,\n",
       "               0.00259230287937202,\n",
       "               0.0025069750853391123,\n",
       "               0.0024850548950015408,\n",
       "               0.003373304651402233,\n",
       "               0.004325165566622356,\n",
       "               0.004243735886391922,\n",
       "               0.00450757531002331,\n",
       "               0.004658668925510487,\n",
       "               0.004652713271596386,\n",
       "               0.0042960899746187445,\n",
       "               0.0042661978747668364,\n",
       "               0.004170916933991213,\n",
       "               0.004117578940733344,\n",
       "               0.004505347836075585,\n",
       "               0.00438254471731028,\n",
       "               0.003912283474724258,\n",
       "               0.0035968038110150034,\n",
       "               0.0038042119658099273,\n",
       "               0.0037625194698816217,\n",
       "               0.0036686430413091957,\n",
       "               0.003680990642205354,\n",
       "               0.003588957756617941,\n",
       "               0.0035722337254061845,\n",
       "               0.003433557905544641,\n",
       "               0.0034161330728496695,\n",
       "               0.0034337922185001626,\n",
       "               0.0034780486048565954,\n",
       "               0.0032972578247562763,\n",
       "               0.0030574072443015714,\n",
       "               0.0030947020154193463,\n",
       "               0.003133149479251016,\n",
       "               0.0032186431327447767,\n",
       "               0.002969600590457232,\n",
       "               0.0030302268525421103,\n",
       "               0.003066797618417495,\n",
       "               0.0030574656162178073,\n",
       "               0.0029797918325682334,\n",
       "               0.0029490238388421553,\n",
       "               0.0029746860871164055,\n",
       "               0.0030483663078996106,\n",
       "               0.003070801020223838,\n",
       "               0.0030808298661322126,\n",
       "               0.0030340182428610957,\n",
       "               0.0029802424196352577,\n",
       "               0.0029268329897749554,\n",
       "               0.0029772032641246855,\n",
       "               0.0030505397304710176,\n",
       "               0.00309874689769077,\n",
       "               0.0030874984302180575,\n",
       "               0.0031043686666714634,\n",
       "               0.003088211046506784,\n",
       "               0.0030536380876956077,\n",
       "               0.0031027405282124977,\n",
       "               0.0031494145800765785,\n",
       "               0.003079948418687565,\n",
       "               0.0030688665007465666,\n",
       "               0.0030907988503116298,\n",
       "               0.003090081027343583,\n",
       "               0.003119142941869403,\n",
       "               0.003122690659690118,\n",
       "               0.003159027558374948,\n",
       "               0.0031063117518499678,\n",
       "               0.003182704095482066,\n",
       "               0.0031969660327502837,\n",
       "               0.003189983734629172,\n",
       "               0.0031649361328271713,\n",
       "               0.0031649124349469693,\n",
       "               0.0031783078493542757,\n",
       "               0.003196401670112502,\n",
       "               0.0032382653561322102,\n",
       "               0.003220013400242708,\n",
       "               0.0032227802501656163,\n",
       "               0.003268061381480661,\n",
       "               0.0032231851142201767,\n",
       "               0.00320012556220787,\n",
       "               0.0032087549222472823,\n",
       "               0.0031957252803143437,\n",
       "               0.003188439345521338,\n",
       "               0.003180195538990516,\n",
       "               0.0031487019113897144,\n",
       "               0.0031286461604897397,\n",
       "               0.0031075962820058317,\n",
       "               0.0030931571092349236,\n",
       "               0.003074170604315886,\n",
       "               0.003086381923801061,\n",
       "               0.0030995925473887532,\n",
       "               0.0031376389897992928,\n",
       "               0.003152996033564375,\n",
       "               0.0030755037859215278,\n",
       "               0.003068550782722946,\n",
       "               0.003044079037696533,\n",
       "               0.0030739270134994084,\n",
       "               0.003091973069676784,\n",
       "               0.003043326065451104,\n",
       "               0.003055808402698218,\n",
       "               0.003035544799410718,\n",
       "               0.0029868421784885846,\n",
       "               0.002976158392771122,\n",
       "               0.002969475168946936,\n",
       "               0.002965042900891514,\n",
       "               0.0029769419091892207,\n",
       "               0.002968067197115916,\n",
       "               0.0029572548585443293,\n",
       "               0.002954049094356408,\n",
       "               0.002938317740517881,\n",
       "               0.0029633951706762446,\n",
       "               0.002964381514747763,\n",
       "               0.002937958132014673,\n",
       "               0.0029316996421177737,\n",
       "               0.0029127403809324796,\n",
       "               0.0029228710090632055,\n",
       "               0.002918182556430138,\n",
       "               0.002906680894509124,\n",
       "               0.0029091039210964106,\n",
       "               0.0029078914352294602,\n",
       "               0.002917262357986964,\n",
       "               0.002909801743452216,\n",
       "               0.002932971170245493,\n",
       "               0.002938509567777833,\n",
       "               0.002929375228092767,\n",
       "               0.002942175093363547,\n",
       "               0.002955318694044169,\n",
       "               0.0029531803746153423,\n",
       "               0.002949678063393149,\n",
       "               0.0029491474717435458,\n",
       "               0.002955142777762531,\n",
       "               0.0029440185526997532,\n",
       "               0.0029654529357593935,\n",
       "               0.0029833307514414765,\n",
       "               0.002960445045152851,\n",
       "               0.002976852458663255,\n",
       "               0.0029822587800421587,\n",
       "               0.002980825716477428,\n",
       "               0.0030022617753629618,\n",
       "               0.0029900762244538174,\n",
       "               0.002974433115273747,\n",
       "               0.002949703948758811,\n",
       "               0.0029659958306274123,\n",
       "               0.0029347197090322345,\n",
       "               0.0029488112075531114,\n",
       "               0.0029452764915143064,\n",
       "               0.0029349300353410635,\n",
       "               0.002917188495328883,\n",
       "               0.0029151183587821585,\n",
       "               0.002897951892485066,\n",
       "               0.002879603250970507,\n",
       "               0.0028485567300753304,\n",
       "               0.0028427801858526315,\n",
       "               0.0028440639535641816,\n",
       "               0.0028128353595317118,\n",
       "               0.0027957265779785623,\n",
       "               0.0027856024872528373,\n",
       "               0.0027770295956421184,\n",
       "               0.0027974592188429563,\n",
       "               0.0027941646810881603,\n",
       "               0.002803000485481695,\n",
       "               0.0027791035583920086,\n",
       "               0.0027676783086128215,\n",
       "               0.0027491922936764453,\n",
       "               0.0027703051287511337,\n",
       "               0.0027559374319337817,\n",
       "               0.0027358368234054113,\n",
       "               0.0027250213329848083,\n",
       "               0.002719936624643286,\n",
       "               0.002712892889413276,\n",
       "               0.002692335132426664,\n",
       "               0.0026982230862784844,\n",
       "               0.002693076455933601,\n",
       "               0.0026724981775439927,\n",
       "               0.002656936375498778,\n",
       "               0.0026458931900314887,\n",
       "               0.00263975391323345,\n",
       "               0.0026463332146752895,\n",
       "               0.00265228543370998,\n",
       "               0.002688329184700109,\n",
       "               0.0026863613187039035,\n",
       "               0.002674699183717055,\n",
       "               0.0026664088514246377,\n",
       "               0.0026759550935215276,\n",
       "               0.0026709970920504433,\n",
       "               0.002659689194367222,\n",
       "               0.0026577218684018925,\n",
       "               0.0026332243026280567],\n",
       "              'train-AUC-mean': [0.8875003270746974,\n",
       "               0.8982835330489364,\n",
       "               0.8995384153162749,\n",
       "               0.9007013298582237,\n",
       "               0.9061006463065261,\n",
       "               0.9066167674002205,\n",
       "               0.9070524932447496,\n",
       "               0.9074442812393713,\n",
       "               0.9081136320290342,\n",
       "               0.9094467796840352,\n",
       "               0.9109152035284325,\n",
       "               0.9110498785971037,\n",
       "               0.9109933681482275,\n",
       "               0.9111709909848601,\n",
       "               0.9120724162965886,\n",
       "               0.9124370735859593,\n",
       "               0.9134735187218253,\n",
       "               0.9143039088007736,\n",
       "               0.9143788060693022,\n",
       "               0.9144264505788818,\n",
       "               0.9152209055829809,\n",
       "               0.915811065850232,\n",
       "               0.9164630090887963,\n",
       "               0.9170333868084604,\n",
       "               0.9174743291234742,\n",
       "               0.9173966097615,\n",
       "               0.9177288305566688,\n",
       "               0.9179239774042638,\n",
       "               0.9179302500158091,\n",
       "               0.9192897744404499,\n",
       "               0.9196356536828464,\n",
       "               0.9197849790869571,\n",
       "               0.9201595523935694,\n",
       "               0.9206355388906028,\n",
       "               0.920949368359738,\n",
       "               0.9210924826814756,\n",
       "               0.9211520797105862,\n",
       "               0.9213098037748445,\n",
       "               0.9215083576194498,\n",
       "               0.9216212854777464,\n",
       "               0.921602970228089,\n",
       "               0.9218896311652701,\n",
       "               0.922029942596798,\n",
       "               0.9221222147598539,\n",
       "               0.92244828673061,\n",
       "               0.9226273787594983,\n",
       "               0.9228520899843279,\n",
       "               0.923019246464828,\n",
       "               0.9231057983450434,\n",
       "               0.9233590410572013,\n",
       "               0.9235272341731043,\n",
       "               0.9236633917971666,\n",
       "               0.9238723495899768,\n",
       "               0.9240229893008043,\n",
       "               0.9241205978906383,\n",
       "               0.9241670566799692,\n",
       "               0.9243293591047426,\n",
       "               0.9245020382804204,\n",
       "               0.9246543331762234,\n",
       "               0.9247649008632043,\n",
       "               0.9248518616865994,\n",
       "               0.9250353239463286,\n",
       "               0.9252122459447191,\n",
       "               0.9253049353454994,\n",
       "               0.9254592423053564,\n",
       "               0.9255958432847976,\n",
       "               0.9256891183600534,\n",
       "               0.9257646232743241,\n",
       "               0.9258656995820398,\n",
       "               0.9259263160001119,\n",
       "               0.9260254301916387,\n",
       "               0.9261730271620704,\n",
       "               0.9262578070940976,\n",
       "               0.9263330890171594,\n",
       "               0.9264163220887595,\n",
       "               0.9265697486282339,\n",
       "               0.9266490022606696,\n",
       "               0.926787490281335,\n",
       "               0.9268623518273463,\n",
       "               0.9269384260838444,\n",
       "               0.9270311094169883,\n",
       "               0.9271675101660102,\n",
       "               0.9272640987888542,\n",
       "               0.9273694484000222,\n",
       "               0.9274759047411378,\n",
       "               0.9275789832806677,\n",
       "               0.9276511884228551,\n",
       "               0.9277637346024895,\n",
       "               0.9278295821345841,\n",
       "               0.9278743526372798,\n",
       "               0.9279515606333253,\n",
       "               0.9280683706828269,\n",
       "               0.9282046136575541,\n",
       "               0.9282408316678473,\n",
       "               0.9283172246862602,\n",
       "               0.9284125709419474,\n",
       "               0.928480739666746,\n",
       "               0.9285712982740599,\n",
       "               0.9286754353582647,\n",
       "               0.9287314133557444,\n",
       "               0.9288182891669621,\n",
       "               0.9288790626234791,\n",
       "               0.9289323011347514,\n",
       "               0.9290085075853959,\n",
       "               0.9290533603846551,\n",
       "               0.9291200912882588,\n",
       "               0.9291610384389336,\n",
       "               0.9292051614397986,\n",
       "               0.929250004494074,\n",
       "               0.9293168263193925,\n",
       "               0.9293638819970185,\n",
       "               0.929401023209986,\n",
       "               0.9294755961746732,\n",
       "               0.9295412354488025,\n",
       "               0.9295875930185101,\n",
       "               0.9296446766051049,\n",
       "               0.9297095622986941,\n",
       "               0.9297576332497967,\n",
       "               0.9298059202390602,\n",
       "               0.9298687720423996,\n",
       "               0.9299284653006067,\n",
       "               0.9299748889369441,\n",
       "               0.9300276477536512,\n",
       "               0.930071606250012,\n",
       "               0.9301356658342442,\n",
       "               0.9302037671071236,\n",
       "               0.9302573597771616,\n",
       "               0.9303102097282809,\n",
       "               0.9303698900508702,\n",
       "               0.930438743961003,\n",
       "               0.9305367035303539,\n",
       "               0.9305931178611772,\n",
       "               0.9306463515909629,\n",
       "               0.9307033939180299,\n",
       "               0.930748700674659,\n",
       "               0.9308237443972938,\n",
       "               0.9308831423572735,\n",
       "               0.930915376535152,\n",
       "               0.9310080712807656,\n",
       "               0.9310676150814748,\n",
       "               0.931117980032265,\n",
       "               0.931157953266553,\n",
       "               0.9311994084887557,\n",
       "               0.9312767142389907,\n",
       "               0.931315843188508,\n",
       "               0.9313885767809538,\n",
       "               0.9314362694868533,\n",
       "               0.9314635064795799,\n",
       "               0.9315305904998366,\n",
       "               0.9315726789471253,\n",
       "               0.9316247396441958,\n",
       "               0.9316683657936499,\n",
       "               0.9316975071823187,\n",
       "               0.931755076089285,\n",
       "               0.9317942657518206,\n",
       "               0.9318370158676151,\n",
       "               0.9318789306324011,\n",
       "               0.9319199656702275,\n",
       "               0.9319684394768499,\n",
       "               0.9320115226710072,\n",
       "               0.9320452949741759,\n",
       "               0.9320856793743381,\n",
       "               0.9321247735554969,\n",
       "               0.9321668820429253,\n",
       "               0.9321914529546248,\n",
       "               0.9322497898116079,\n",
       "               0.9322923328946571,\n",
       "               0.9323232249706602,\n",
       "               0.932355304895402,\n",
       "               0.9323971001708703,\n",
       "               0.9324274218102815,\n",
       "               0.9324761851663794,\n",
       "               0.9324998090067073,\n",
       "               0.9325320028638524,\n",
       "               0.9325712987913901,\n",
       "               0.9326195529365496,\n",
       "               0.9326354568719761,\n",
       "               0.932676344712054,\n",
       "               0.9327151247519946,\n",
       "               0.9327515688487145,\n",
       "               0.9327665116583347,\n",
       "               0.932800658905271,\n",
       "               0.9328211606326816,\n",
       "               0.932852312213924,\n",
       "               0.9328907819440868,\n",
       "               0.9329384645363482,\n",
       "               0.9329871010526795,\n",
       "               0.933018482639774,\n",
       "               0.9330354950369343,\n",
       "               0.933065752247447,\n",
       "               0.9330942120208549,\n",
       "               0.933145058892452,\n",
       "               0.9331923112474535,\n",
       "               0.9332178156841738,\n",
       "               0.9332469355029726,\n",
       "               0.9332763285788296,\n",
       "               0.9333103101470944,\n",
       "               0.9333545956493717,\n",
       "               0.9333706683456421,\n",
       "               0.9334040228010271],\n",
       "              'train-AUC-std': [0.003480658236043001,\n",
       "               0.0015634941006956336,\n",
       "               0.0016918532527300874,\n",
       "               0.0018390023901621473,\n",
       "               0.0015830189352018906,\n",
       "               0.0018148225183861973,\n",
       "               0.0015701806182165435,\n",
       "               0.0019048391384350884,\n",
       "               0.0019367915584253934,\n",
       "               0.0017082434901101288,\n",
       "               0.0019835469486561043,\n",
       "               0.001784991751838781,\n",
       "               0.001759082265634812,\n",
       "               0.0021220743894792213,\n",
       "               0.0014825027977509318,\n",
       "               0.0016299028655825242,\n",
       "               0.0024364104051376252,\n",
       "               0.002546809805320083,\n",
       "               0.002558235529479057,\n",
       "               0.0024682839804123446,\n",
       "               0.001921935112404558,\n",
       "               0.0011452165412641061,\n",
       "               0.0012826673526640478,\n",
       "               0.001174029945570397,\n",
       "               0.0017794701457183703,\n",
       "               0.001979102413871038,\n",
       "               0.002271602895026693,\n",
       "               0.002118780519586751,\n",
       "               0.002143241971383872,\n",
       "               0.0013856140439161633,\n",
       "               0.0009706813157919974,\n",
       "               0.000998266632907546,\n",
       "               0.0012382904784614009,\n",
       "               0.0013453806610238947,\n",
       "               0.0014845817714193282,\n",
       "               0.0014549492064114948,\n",
       "               0.0015061561328552657,\n",
       "               0.0015502135108490386,\n",
       "               0.0017026513691057604,\n",
       "               0.0017312986162374498,\n",
       "               0.0018291140856466503,\n",
       "               0.0016329478360435717,\n",
       "               0.0016421843694111964,\n",
       "               0.0016015911066544417,\n",
       "               0.0016631571900262733,\n",
       "               0.0018302114228757925,\n",
       "               0.0018692777631496324,\n",
       "               0.0017987041858919168,\n",
       "               0.001752978231267496,\n",
       "               0.0019574923277393824,\n",
       "               0.0019059781530864227,\n",
       "               0.00183251798871686,\n",
       "               0.0017842140212379622,\n",
       "               0.0018170554872179025,\n",
       "               0.001829301892785857,\n",
       "               0.0017641041424884775,\n",
       "               0.0017517274604619635,\n",
       "               0.001772844534265422,\n",
       "               0.0017876080623487273,\n",
       "               0.001707112237387365,\n",
       "               0.001752427736286834,\n",
       "               0.0017610925628188416,\n",
       "               0.0017421655362929499,\n",
       "               0.0016777443312795152,\n",
       "               0.0016507451586453982,\n",
       "               0.0016794780783056069,\n",
       "               0.001637312312994931,\n",
       "               0.0016662454702005413,\n",
       "               0.001663386692422268,\n",
       "               0.0016318795697647707,\n",
       "               0.0015722835227225116,\n",
       "               0.0015891840273867229,\n",
       "               0.0015602288701979494,\n",
       "               0.0015870574159805176,\n",
       "               0.0015577804908352272,\n",
       "               0.0015127187671149403,\n",
       "               0.0015086295300760244,\n",
       "               0.0014737708194837433,\n",
       "               0.0014372737338837174,\n",
       "               0.0014047867049940058,\n",
       "               0.0013804081368687829,\n",
       "               0.001374362464405903,\n",
       "               0.0013436504779515991,\n",
       "               0.001351340168084028,\n",
       "               0.0013059038436603037,\n",
       "               0.0012637799055597184,\n",
       "               0.0012457800830481646,\n",
       "               0.0012600163814420113,\n",
       "               0.0012557165345212242,\n",
       "               0.0011948516410004854,\n",
       "               0.001221476422080119,\n",
       "               0.0012368590519490573,\n",
       "               0.001273742654746823,\n",
       "               0.0012539704278475966,\n",
       "               0.001227363689120272,\n",
       "               0.0012396940818230995,\n",
       "               0.0012227075487669262,\n",
       "               0.0012116109488594167,\n",
       "               0.001204842365372122,\n",
       "               0.0012046862815503427,\n",
       "               0.001169745834551987,\n",
       "               0.0011443226184647303,\n",
       "               0.0011329569973819347,\n",
       "               0.0010968886436526044,\n",
       "               0.001076855486984279,\n",
       "               0.0010697986966608512,\n",
       "               0.0010790761601972973,\n",
       "               0.0011025966589914907,\n",
       "               0.0010723462000081592,\n",
       "               0.001061198225865405,\n",
       "               0.0011127883455333486,\n",
       "               0.0011004420656322942,\n",
       "               0.0011236992641449008,\n",
       "               0.0011424973894853697,\n",
       "               0.0011345260172860214,\n",
       "               0.0011471926251412242,\n",
       "               0.0011482379109555587,\n",
       "               0.0011328909094721837,\n",
       "               0.0011039697601480669,\n",
       "               0.0011054277018352457,\n",
       "               0.001085120824462399,\n",
       "               0.001122812124155951,\n",
       "               0.0010826236652793282,\n",
       "               0.00105925913094537,\n",
       "               0.0010675426694786647,\n",
       "               0.0010586723625024288,\n",
       "               0.00107285235958249,\n",
       "               0.0010686044291840348,\n",
       "               0.001058128484068421,\n",
       "               0.0010854769583143037,\n",
       "               0.0010705181165016004,\n",
       "               0.0010707513454425576,\n",
       "               0.0010613620735167241,\n",
       "               0.001062556954448926,\n",
       "               0.0010535934604836363,\n",
       "               0.0010332335440038471,\n",
       "               0.0010457229851821845,\n",
       "               0.0010380324229515342,\n",
       "               0.0010380026670781762,\n",
       "               0.0010144283779301105,\n",
       "               0.0010070509767374175,\n",
       "               0.0010082058240708913,\n",
       "               0.0009989217783021877,\n",
       "               0.0009895482285053178,\n",
       "               0.0009796792346158055,\n",
       "               0.0009649106720638412,\n",
       "               0.0009741440385289847,\n",
       "               0.0009573224379982404,\n",
       "               0.0009566780456019259,\n",
       "               0.0009593246672602822,\n",
       "               0.0009209840886166954,\n",
       "               0.0009392918121068356,\n",
       "               0.0009424667881926825,\n",
       "               0.000960951104753297,\n",
       "               0.0009357370248395224,\n",
       "               0.0009655455765907859,\n",
       "               0.0009553123363965419,\n",
       "               0.0009507271170469805,\n",
       "               0.0009674616857810232,\n",
       "               0.0009566993714691995,\n",
       "               0.0009646861628835588,\n",
       "               0.0009639426926924588,\n",
       "               0.0009793166349773555,\n",
       "               0.0010026612888477094,\n",
       "               0.0010156406858457226,\n",
       "               0.0010071345490109147,\n",
       "               0.0010267530762835785,\n",
       "               0.001049587720321763,\n",
       "               0.0010540741366933829,\n",
       "               0.001052829409903599,\n",
       "               0.0010253389768812465,\n",
       "               0.001029677363868596,\n",
       "               0.0010179098447282559,\n",
       "               0.0010329222071746651,\n",
       "               0.0010456811550195472,\n",
       "               0.0010480571037097149,\n",
       "               0.001038089546128913,\n",
       "               0.0010363499450953381,\n",
       "               0.0010449134688966626,\n",
       "               0.0010451929132498485,\n",
       "               0.0010563926501591448,\n",
       "               0.0010616352901481176,\n",
       "               0.0010829800127050624,\n",
       "               0.001040995002226369,\n",
       "               0.001043184756685157,\n",
       "               0.0010514761414027608,\n",
       "               0.001041054663432655,\n",
       "               0.0010620632552344547,\n",
       "               0.0010585799029159603,\n",
       "               0.0010477598729554869,\n",
       "               0.0010304089069009305,\n",
       "               0.001003305203856823,\n",
       "               0.001003685359361634,\n",
       "               0.0009990749780458994,\n",
       "               0.0010290022769937131,\n",
       "               0.0010208296994899681,\n",
       "               0.0010348752412819534,\n",
       "               0.001040083479916431,\n",
       "               0.0010420279992611609,\n",
       "               0.0010551709760552722],\n",
       "              'test-Logloss-mean': [0.6716584256851087,\n",
       "               0.6515129008758472,\n",
       "               0.6331294070452204,\n",
       "               0.6151390877107341,\n",
       "               0.5980393017946714,\n",
       "               0.5828216267470693,\n",
       "               0.5687477351841416,\n",
       "               0.555839235631803,\n",
       "               0.543921884445941,\n",
       "               0.5334961978419245,\n",
       "               0.5243327192282056,\n",
       "               0.5143974310953928,\n",
       "               0.5054038192517757,\n",
       "               0.49691569387301954,\n",
       "               0.4892372785651755,\n",
       "               0.482446249217231,\n",
       "               0.47614726118066525,\n",
       "               0.4699673905716177,\n",
       "               0.46373824634632105,\n",
       "               0.4588704590200406,\n",
       "               0.45401731498898285,\n",
       "               0.44911743228775886,\n",
       "               0.4448260440768353,\n",
       "               0.43994059137110736,\n",
       "               0.43546210194995244,\n",
       "               0.43272647303956663,\n",
       "               0.42884102340015,\n",
       "               0.42536751449453664,\n",
       "               0.4222608228808549,\n",
       "               0.41904147882326326,\n",
       "               0.4160433036077806,\n",
       "               0.41334988427062963,\n",
       "               0.4106436166893554,\n",
       "               0.40798029954396814,\n",
       "               0.4055706333411142,\n",
       "               0.4033691638412232,\n",
       "               0.401184204546113,\n",
       "               0.3991452320240685,\n",
       "               0.39724410257712073,\n",
       "               0.3953977378105999,\n",
       "               0.3939890680431805,\n",
       "               0.3921279750948126,\n",
       "               0.3905692354636441,\n",
       "               0.3888857501800607,\n",
       "               0.38708222989945346,\n",
       "               0.3855244649445682,\n",
       "               0.3840772048685562,\n",
       "               0.38275210929241843,\n",
       "               0.3814676470194584,\n",
       "               0.3801113221088907,\n",
       "               0.3788055152769856,\n",
       "               0.3777268477866785,\n",
       "               0.3765487307526252,\n",
       "               0.37528586381406176,\n",
       "               0.37445608162143057,\n",
       "               0.3735242261805247,\n",
       "               0.37254039106372794,\n",
       "               0.37139088285175376,\n",
       "               0.37044333111667366,\n",
       "               0.36955277789977664,\n",
       "               0.3688470265230685,\n",
       "               0.3679186001022472,\n",
       "               0.3670962570131327,\n",
       "               0.36631908499812527,\n",
       "               0.365418557160581,\n",
       "               0.36464154695876144,\n",
       "               0.3640092710949605,\n",
       "               0.3634408249345027,\n",
       "               0.3629165794850806,\n",
       "               0.3623794934964096,\n",
       "               0.36179266154460893,\n",
       "               0.3612332228734891,\n",
       "               0.360745017821392,\n",
       "               0.3601808911505798,\n",
       "               0.35967817043131345,\n",
       "               0.3590500165451654,\n",
       "               0.3585745472788935,\n",
       "               0.358106343854295,\n",
       "               0.3576147852402302,\n",
       "               0.35717241886839185,\n",
       "               0.3566499129637508,\n",
       "               0.35615085400176033,\n",
       "               0.3556674157355881,\n",
       "               0.35520476788625316,\n",
       "               0.35478838652546085,\n",
       "               0.35437012618302216,\n",
       "               0.35402349433902436,\n",
       "               0.3537603099243658,\n",
       "               0.35346540438016155,\n",
       "               0.35324775039160256,\n",
       "               0.3529667505003036,\n",
       "               0.35263298569378815,\n",
       "               0.35220769766352905,\n",
       "               0.3519088129096329,\n",
       "               0.35160027782664294,\n",
       "               0.35130426258284025,\n",
       "               0.35103671176974127,\n",
       "               0.35072796076376317,\n",
       "               0.35042891570049245,\n",
       "               0.35014148344744966,\n",
       "               0.3498629323173623,\n",
       "               0.349600718044178,\n",
       "               0.3493959676483486,\n",
       "               0.349151568627535,\n",
       "               0.34898260780801255,\n",
       "               0.3487519817624725,\n",
       "               0.3485962367119799,\n",
       "               0.34840466387599306,\n",
       "               0.34826304015533194,\n",
       "               0.3480719022808521,\n",
       "               0.3478719141832369,\n",
       "               0.34769880153207877,\n",
       "               0.34752512626902043,\n",
       "               0.3473137213541011,\n",
       "               0.3471721043665134,\n",
       "               0.3469371039881892,\n",
       "               0.34668627394569335,\n",
       "               0.34649528970354687,\n",
       "               0.3463246475142025,\n",
       "               0.3461811079197033,\n",
       "               0.34602990614135876,\n",
       "               0.34587889548739964,\n",
       "               0.34571565562317524,\n",
       "               0.3455880090995029,\n",
       "               0.3454369997779301,\n",
       "               0.3452287387941905,\n",
       "               0.345096080475147,\n",
       "               0.34494591948132247,\n",
       "               0.34470055316520226,\n",
       "               0.3445432439812594,\n",
       "               0.34434057410338564,\n",
       "               0.3441927016013279,\n",
       "               0.3440579295240102,\n",
       "               0.3439332301801921,\n",
       "               0.34383043999398916,\n",
       "               0.34364612268171907,\n",
       "               0.34347110928568747,\n",
       "               0.343356981994481,\n",
       "               0.34319891995871354,\n",
       "               0.3430262223404772,\n",
       "               0.3428628784919525,\n",
       "               0.34276882241594464,\n",
       "               0.34266897974093036,\n",
       "               0.3424848011643817,\n",
       "               0.34239796459315014,\n",
       "               0.34221730769103714,\n",
       "               0.34212005043848154,\n",
       "               0.34202279029875254,\n",
       "               0.34183957667291764,\n",
       "               0.34175852594956324,\n",
       "               0.3416462363099029,\n",
       "               0.3415458155177408,\n",
       "               0.3414638564063031,\n",
       "               0.34139834461695046,\n",
       "               0.34128130727329203,\n",
       "               0.34118057102300176,\n",
       "               0.3410584516238908,\n",
       "               0.3409673536409408,\n",
       "               0.3408817945895679,\n",
       "               0.34077553241382064,\n",
       "               0.34070686916400134,\n",
       "               0.34059940127515365,\n",
       "               0.34054555902938183,\n",
       "               0.3404422088015793,\n",
       "               0.3403802169405334,\n",
       "               0.340227926906203,\n",
       "               0.3401225051511087,\n",
       "               0.3400142240077256,\n",
       "               0.3399475102914235,\n",
       "               0.3398635419855059,\n",
       "               0.3397971501049006,\n",
       "               0.3397023504476248,\n",
       "               0.3396601676805509,\n",
       "               0.33952694222586,\n",
       "               0.3394374328721225,\n",
       "               0.3393179364012279,\n",
       "               0.3392538798084174,\n",
       "               0.3391695361743992,\n",
       "               0.3390890867002647,\n",
       "               0.339021035883593,\n",
       "               0.3389771347736681,\n",
       "               0.33887041578155735,\n",
       "               0.33879637192886336,\n",
       "               0.33874625697088484,\n",
       "               0.3386759930199362,\n",
       "               0.3385931183688062,\n",
       "               0.33850103072376775,\n",
       "               0.33841975373910804,\n",
       "               0.33838552328492916,\n",
       "               0.3383488349221599,\n",
       "               0.3383099795098225,\n",
       "               0.3381898907919865,\n",
       "               0.33813232554726075,\n",
       "               0.33807462341096534,\n",
       "               0.33800054032665505,\n",
       "               0.33794767188900005,\n",
       "               0.3379020750607033,\n",
       "               0.3377638877997636,\n",
       "               0.33771237607880816,\n",
       "               0.3376598672210877],\n",
       "              'test-Logloss-std': [0.0002195639110111406,\n",
       "               0.0006666191390298084,\n",
       "               0.000658760147429431,\n",
       "               0.00043481008431510014,\n",
       "               0.00033020752033983654,\n",
       "               0.0005622693009369402,\n",
       "               0.00041841441818237846,\n",
       "               0.0007488294021059426,\n",
       "               0.001361206868949923,\n",
       "               0.00026732341972257525,\n",
       "               0.00023427109133537108,\n",
       "               0.0005468641225191128,\n",
       "               0.0005646752937481943,\n",
       "               0.0007170564119185137,\n",
       "               0.0012296937600219742,\n",
       "               0.0013541901904177576,\n",
       "               0.0013115024402028696,\n",
       "               0.0019153715606117807,\n",
       "               0.0019249347492654053,\n",
       "               0.0019010304474049685,\n",
       "               0.0019500840483164372,\n",
       "               0.00224458060651109,\n",
       "               0.0018773668377171954,\n",
       "               0.0021634970451932696,\n",
       "               0.0019546969327567556,\n",
       "               0.0018640141255302414,\n",
       "               0.0015221040006027147,\n",
       "               0.001612671207581645,\n",
       "               0.0017581657726658192,\n",
       "               0.0018687038318447495,\n",
       "               0.0023460664030486747,\n",
       "               0.0019328986089306827,\n",
       "               0.0018084860587638748,\n",
       "               0.0017769744816341021,\n",
       "               0.0020108474245403925,\n",
       "               0.0019332653863507313,\n",
       "               0.0020341059289413627,\n",
       "               0.002148416428703439,\n",
       "               0.0021924100936265532,\n",
       "               0.0017185059080465674,\n",
       "               0.0016594271702496343,\n",
       "               0.0016547514165587355,\n",
       "               0.0020015901738954477,\n",
       "               0.002070407471686348,\n",
       "               0.0020401031933920586,\n",
       "               0.0017213097413153926,\n",
       "               0.00197273057434277,\n",
       "               0.00208194647683428,\n",
       "               0.0022942307788932745,\n",
       "               0.002109318770476343,\n",
       "               0.002239846728451885,\n",
       "               0.0025197455426405717,\n",
       "               0.002583408828233123,\n",
       "               0.002523133650156185,\n",
       "               0.0024439643719469713,\n",
       "               0.002474252662129969,\n",
       "               0.0024199572610602437,\n",
       "               0.0025679707930372875,\n",
       "               0.0025915795239120206,\n",
       "               0.002510626808950033,\n",
       "               0.0022926033306745427,\n",
       "               0.0021757158808109384,\n",
       "               0.0021481731229549095,\n",
       "               0.0024631781183607105,\n",
       "               0.002515400302028331,\n",
       "               0.0024447863720457063,\n",
       "               0.002528075432331108,\n",
       "               0.002622753424980033,\n",
       "               0.002592636430781668,\n",
       "               0.0027839528841484768,\n",
       "               0.0030784980010644114,\n",
       "               0.0030226452673368827,\n",
       "               0.003088052829273228,\n",
       "               0.003280022001751354,\n",
       "               0.003305399776516259,\n",
       "               0.0032404759607702316,\n",
       "               0.0033880052410703147,\n",
       "               0.003549943499554345,\n",
       "               0.00356050291248909,\n",
       "               0.003673834832976554,\n",
       "               0.0037061981998806827,\n",
       "               0.0037885349551524945,\n",
       "               0.0037618697782698996,\n",
       "               0.0038651773705585565,\n",
       "               0.0038274900298658847,\n",
       "               0.003936379598998799,\n",
       "               0.00400533777784284,\n",
       "               0.004003770976205576,\n",
       "               0.003949427550738057,\n",
       "               0.0040891909251612405,\n",
       "               0.0040521456974150286,\n",
       "               0.004021254996095654,\n",
       "               0.003991792890318521,\n",
       "               0.004041210566155307,\n",
       "               0.004119739765728894,\n",
       "               0.004080178667521873,\n",
       "               0.004117767679161753,\n",
       "               0.004101077634726326,\n",
       "               0.00424769650568847,\n",
       "               0.004249726326359324,\n",
       "               0.004320373408464883,\n",
       "               0.004406030267167976,\n",
       "               0.004449514578735372,\n",
       "               0.004547069314066822,\n",
       "               0.004576953128008322,\n",
       "               0.00465154606571658,\n",
       "               0.004641960776232314,\n",
       "               0.004641068255515574,\n",
       "               0.004714906854879616,\n",
       "               0.004697426534997749,\n",
       "               0.004613281998208904,\n",
       "               0.004631367716236799,\n",
       "               0.00458291970198715,\n",
       "               0.004547644518523197,\n",
       "               0.004586474511149816,\n",
       "               0.004587512751336132,\n",
       "               0.00460023751083505,\n",
       "               0.004655382174252054,\n",
       "               0.00466490361405939,\n",
       "               0.004663830283159549,\n",
       "               0.0046589487851833936,\n",
       "               0.004575234977378654,\n",
       "               0.004641632102714733,\n",
       "               0.004646796077652631,\n",
       "               0.004630784300520217,\n",
       "               0.0046071081263756005,\n",
       "               0.0045485225505819404,\n",
       "               0.004542452510207824,\n",
       "               0.0045245278009578,\n",
       "               0.004508384188441854,\n",
       "               0.004539737969325686,\n",
       "               0.004533167202673671,\n",
       "               0.0045937436609304605,\n",
       "               0.004602984011316291,\n",
       "               0.004639030424422123,\n",
       "               0.004737562363965439,\n",
       "               0.004728146697255244,\n",
       "               0.004781973538666884,\n",
       "               0.0048232058237083816,\n",
       "               0.004858112713319427,\n",
       "               0.00490474698230189,\n",
       "               0.004918367301934791,\n",
       "               0.004943878461926272,\n",
       "               0.004963428752598946,\n",
       "               0.005040617985289114,\n",
       "               0.005055675553721956,\n",
       "               0.005019449755760453,\n",
       "               0.005089740984313898,\n",
       "               0.0051564032587220025,\n",
       "               0.005131253835626054,\n",
       "               0.0052065375348175616,\n",
       "               0.0051686612786286685,\n",
       "               0.005124343050658557,\n",
       "               0.005071512175645044,\n",
       "               0.005143071012863371,\n",
       "               0.005037401505879289,\n",
       "               0.00509855947420071,\n",
       "               0.005097156109172934,\n",
       "               0.005081788814692641,\n",
       "               0.005038039196777859,\n",
       "               0.005031358361502917,\n",
       "               0.0050256059075218535,\n",
       "               0.004983532497873099,\n",
       "               0.004943648308031503,\n",
       "               0.004915496180207544,\n",
       "               0.004898382286744789,\n",
       "               0.004854442876993082,\n",
       "               0.004800496620284083,\n",
       "               0.004761220274593184,\n",
       "               0.0047237120950704495,\n",
       "               0.0047579114706040385,\n",
       "               0.0047351901273632,\n",
       "               0.004739422500272654,\n",
       "               0.004725632016026933,\n",
       "               0.004686653420697817,\n",
       "               0.004644577824364833,\n",
       "               0.004673123928482459,\n",
       "               0.004643666872545712,\n",
       "               0.004610161843238089,\n",
       "               0.004610032603679068,\n",
       "               0.004613445802753561,\n",
       "               0.004609058911203265,\n",
       "               0.004543688983348423,\n",
       "               0.004556051130215542,\n",
       "               0.004545593228698852,\n",
       "               0.004495190905561924,\n",
       "               0.0045307486594390375,\n",
       "               0.004466291744918621,\n",
       "               0.004448003301482128,\n",
       "               0.004458817476160802,\n",
       "               0.004478783175088612,\n",
       "               0.004566624289473133,\n",
       "               0.004568892586381631,\n",
       "               0.004553131226427635,\n",
       "               0.004534539783351578,\n",
       "               0.00454699136458407,\n",
       "               0.004554417678910525,\n",
       "               0.004532590616972282,\n",
       "               0.0045239743811010145,\n",
       "               0.004480751659038548],\n",
       "              'train-Logloss-mean': [0.6716414921754419,\n",
       "               0.6514024773738202,\n",
       "               0.6329404318951255,\n",
       "               0.614858426432764,\n",
       "               0.5977099201693177,\n",
       "               0.5824303436127722,\n",
       "               0.5682898086446324,\n",
       "               0.5553052484027832,\n",
       "               0.5433482042880952,\n",
       "               0.5328275075628903,\n",
       "               0.5236511431841593,\n",
       "               0.5136730680681488,\n",
       "               0.5045862445642771,\n",
       "               0.4960677631038317,\n",
       "               0.48834773454361075,\n",
       "               0.48156720512271817,\n",
       "               0.4751911469448655,\n",
       "               0.4690089515152008,\n",
       "               0.46282102248681367,\n",
       "               0.45793374221229244,\n",
       "               0.4530073363870369,\n",
       "               0.44804794052383407,\n",
       "               0.44371477922055275,\n",
       "               0.4388080276572128,\n",
       "               0.4342473579008421,\n",
       "               0.43151823956599683,\n",
       "               0.4276036553657385,\n",
       "               0.42415172860732403,\n",
       "               0.42099062392895514,\n",
       "               0.4177675972332197,\n",
       "               0.4147639320136676,\n",
       "               0.41204760708731974,\n",
       "               0.4093160802223033,\n",
       "               0.40656522033116743,\n",
       "               0.4040795371513484,\n",
       "               0.40184605806919443,\n",
       "               0.39963986208540536,\n",
       "               0.3975351771181212,\n",
       "               0.3955630498642382,\n",
       "               0.39365934283205584,\n",
       "               0.3922526025095003,\n",
       "               0.39037386580623434,\n",
       "               0.38880951925553314,\n",
       "               0.3870431976275353,\n",
       "               0.3852317004982821,\n",
       "               0.3836041985969265,\n",
       "               0.38215565566432047,\n",
       "               0.38075963311175026,\n",
       "               0.37942611019827255,\n",
       "               0.3780457952622383,\n",
       "               0.3766741265008609,\n",
       "               0.3756050335208167,\n",
       "               0.3743526111518524,\n",
       "               0.37306410651814664,\n",
       "               0.3721872606774777,\n",
       "               0.3712133528357562,\n",
       "               0.3701811082434763,\n",
       "               0.36899142262040824,\n",
       "               0.36798277630166326,\n",
       "               0.3670401337004067,\n",
       "               0.3662741101885365,\n",
       "               0.36536158701651544,\n",
       "               0.3645305615248766,\n",
       "               0.36370017120699866,\n",
       "               0.3628261602626897,\n",
       "               0.3620211081807356,\n",
       "               0.36138601810635523,\n",
       "               0.3607753114629171,\n",
       "               0.3602082529296404,\n",
       "               0.35965753247499704,\n",
       "               0.3590479850630653,\n",
       "               0.3584310256534365,\n",
       "               0.35789708468456466,\n",
       "               0.35732644819582027,\n",
       "               0.35678376755557023,\n",
       "               0.3561331828230021,\n",
       "               0.3556315067550449,\n",
       "               0.35508519432048224,\n",
       "               0.3545710772712823,\n",
       "               0.3540909809979235,\n",
       "               0.3535431433961396,\n",
       "               0.3529842740532894,\n",
       "               0.35248334544978915,\n",
       "               0.35197687485671086,\n",
       "               0.3515391523278612,\n",
       "               0.3510898446560633,\n",
       "               0.35072284603527965,\n",
       "               0.35039275769255857,\n",
       "               0.3500807687338074,\n",
       "               0.34982857306485227,\n",
       "               0.34949295399615643,\n",
       "               0.3491147410665105,\n",
       "               0.34865402353598646,\n",
       "               0.3482996588968734,\n",
       "               0.34795872654942234,\n",
       "               0.34757925892756764,\n",
       "               0.3472757880184547,\n",
       "               0.3469112464392812,\n",
       "               0.3465758960955288,\n",
       "               0.34626828942473903,\n",
       "               0.34595768261219706,\n",
       "               0.3456734962072294,\n",
       "               0.3454339365734827,\n",
       "               0.34515470281161065,\n",
       "               0.3449524275499026,\n",
       "               0.344688933250848,\n",
       "               0.34452004735751807,\n",
       "               0.3443056260611854,\n",
       "               0.3441426430775949,\n",
       "               0.3439037797519533,\n",
       "               0.3436971554031387,\n",
       "               0.34347388842505433,\n",
       "               0.3432504458258603,\n",
       "               0.34302146796259253,\n",
       "               0.3428413986354457,\n",
       "               0.34258039801949636,\n",
       "               0.3422937387230802,\n",
       "               0.3420930790318639,\n",
       "               0.34189464719958845,\n",
       "               0.34167761375464284,\n",
       "               0.3414892165479329,\n",
       "               0.34131531062979104,\n",
       "               0.3411175005140523,\n",
       "               0.3409624488808706,\n",
       "               0.3407861213553572,\n",
       "               0.34053645828589035,\n",
       "               0.3403681954165985,\n",
       "               0.34019746121086136,\n",
       "               0.3399209378722506,\n",
       "               0.3397481566460383,\n",
       "               0.3395026265732955,\n",
       "               0.3393142764363799,\n",
       "               0.3391634034856332,\n",
       "               0.33900614444396354,\n",
       "               0.33888370740979107,\n",
       "               0.3386622597505431,\n",
       "               0.33846826143565206,\n",
       "               0.33833938839856614,\n",
       "               0.3381298316731314,\n",
       "               0.3379153332009055,\n",
       "               0.3377329162614833,\n",
       "               0.33761812736318403,\n",
       "               0.33746524347930734,\n",
       "               0.337274455310832,\n",
       "               0.33713382615446524,\n",
       "               0.33690450545746414,\n",
       "               0.33677321541225225,\n",
       "               0.33663538812596977,\n",
       "               0.33641946508931975,\n",
       "               0.33629742312710836,\n",
       "               0.33612745422796797,\n",
       "               0.33600648194819144,\n",
       "               0.3358923413087271,\n",
       "               0.3357854174771049,\n",
       "               0.33564952537391707,\n",
       "               0.33551231825373046,\n",
       "               0.33536335280255375,\n",
       "               0.3352322569687514,\n",
       "               0.3351137207467159,\n",
       "               0.33498582136662286,\n",
       "               0.3348884339582397,\n",
       "               0.3347331398669839,\n",
       "               0.3346213508421298,\n",
       "               0.33450649953925066,\n",
       "               0.3344133487327477,\n",
       "               0.3342384294509226,\n",
       "               0.3341088324350614,\n",
       "               0.3339926344786959,\n",
       "               0.33388752198966803,\n",
       "               0.33375229023310676,\n",
       "               0.3336528299452768,\n",
       "               0.3335439925012507,\n",
       "               0.3334660610691587,\n",
       "               0.3333540190811843,\n",
       "               0.3332278453949282,\n",
       "               0.3330766536960752,\n",
       "               0.33301017313948766,\n",
       "               0.33290002060725926,\n",
       "               0.33277569309568106,\n",
       "               0.3326711000396335,\n",
       "               0.3326152252798095,\n",
       "               0.33247319379923973,\n",
       "               0.33239467016464935,\n",
       "               0.33232123389233253,\n",
       "               0.3322155175258463,\n",
       "               0.33209001215490486,\n",
       "               0.33195169299744226,\n",
       "               0.3318527823799575,\n",
       "               0.3317994207412774,\n",
       "               0.3317123504082458,\n",
       "               0.33163874612407723,\n",
       "               0.331490611360882,\n",
       "               0.33137753916107626,\n",
       "               0.3313000624883127,\n",
       "               0.33121024455172415,\n",
       "               0.3311234163935522,\n",
       "               0.331050721711889,\n",
       "               0.33091106278891147,\n",
       "               0.3308484554228685,\n",
       "               0.330764277233858],\n",
       "              'train-Logloss-std': [0.00035857789180742983,\n",
       "               0.0008129590324402955,\n",
       "               0.0010248444760915041,\n",
       "               0.0009566642829393424,\n",
       "               0.0010051284888123611,\n",
       "               0.001098160756230662,\n",
       "               0.0009327051516666719,\n",
       "               0.0012815216098152069,\n",
       "               0.0017174045873508557,\n",
       "               0.001431294094292681,\n",
       "               0.0016301856508430662,\n",
       "               0.001268496201343959,\n",
       "               0.0014140210404573546,\n",
       "               0.001520977879588689,\n",
       "               0.0016935806357200958,\n",
       "               0.001970204091529299,\n",
       "               0.0022770799845908086,\n",
       "               0.002673546994761221,\n",
       "               0.00273289557875405,\n",
       "               0.002745991612152258,\n",
       "               0.0026298591402032366,\n",
       "               0.002536481407228838,\n",
       "               0.0020549790402266685,\n",
       "               0.002114568308336301,\n",
       "               0.002077216322047022,\n",
       "               0.0022478075956410518,\n",
       "               0.0027302967011042173,\n",
       "               0.002644231782526368,\n",
       "               0.002624127405101395,\n",
       "               0.0026502845161633717,\n",
       "               0.0023406967855539957,\n",
       "               0.0028141657748275957,\n",
       "               0.003094721811226455,\n",
       "               0.003278189728057703,\n",
       "               0.0035401424024121336,\n",
       "               0.003433735387339037,\n",
       "               0.003561809215867223,\n",
       "               0.003555592200370827,\n",
       "               0.0036387052213507844,\n",
       "               0.004040573376158212,\n",
       "               0.004399232177727308,\n",
       "               0.004205826896698661,\n",
       "               0.003870987375689715,\n",
       "               0.003886790942889736,\n",
       "               0.004042788902464101,\n",
       "               0.004427817439915982,\n",
       "               0.004330748696373166,\n",
       "               0.004324693502615174,\n",
       "               0.004188598274768398,\n",
       "               0.004522008120707232,\n",
       "               0.004388223810377211,\n",
       "               0.004199794892465145,\n",
       "               0.004184523588822858,\n",
       "               0.00446643365995221,\n",
       "               0.004542309896444352,\n",
       "               0.004444285775160866,\n",
       "               0.004448271435389492,\n",
       "               0.004321079590702318,\n",
       "               0.004488529560062119,\n",
       "               0.0044954995575961,\n",
       "               0.004704697488724361,\n",
       "               0.00474712518415982,\n",
       "               0.0048262050943353755,\n",
       "               0.004523755452831173,\n",
       "               0.004468084282414211,\n",
       "               0.0045828048400750375,\n",
       "               0.004466298555158324,\n",
       "               0.004465182197632376,\n",
       "               0.004475399057204222,\n",
       "               0.004332114563560747,\n",
       "               0.004018687187089747,\n",
       "               0.004113475697913958,\n",
       "               0.004012234288672731,\n",
       "               0.003941446083876102,\n",
       "               0.003920971217129662,\n",
       "               0.0038740561178079963,\n",
       "               0.003753650978144429,\n",
       "               0.0036326756946790818,\n",
       "               0.003574311719172686,\n",
       "               0.003454085668834111,\n",
       "               0.0034386708972367406,\n",
       "               0.0033800303884500187,\n",
       "               0.0034055968477538436,\n",
       "               0.00336271118876181,\n",
       "               0.0034082484737692226,\n",
       "               0.0033087279487406867,\n",
       "               0.0032534001942335867,\n",
       "               0.0032127408879454515,\n",
       "               0.003282327979456499,\n",
       "               0.0031437090439541304,\n",
       "               0.003216684910628621,\n",
       "               0.0032519497641342173,\n",
       "               0.003333125774928229,\n",
       "               0.003331799470526643,\n",
       "               0.00325297168170031,\n",
       "               0.0033099068230516516,\n",
       "               0.003274500647901028,\n",
       "               0.0032971904997897692,\n",
       "               0.003143888206143944,\n",
       "               0.0031325405623489596,\n",
       "               0.0030818269249965067,\n",
       "               0.002998319221957623,\n",
       "               0.002958592454829342,\n",
       "               0.002878034472135774,\n",
       "               0.002826365823503315,\n",
       "               0.002753555008309964,\n",
       "               0.002771327910043976,\n",
       "               0.0028191940182884043,\n",
       "               0.002742565432879084,\n",
       "               0.002759486165543236,\n",
       "               0.002865002068240219,\n",
       "               0.0028645343353787193,\n",
       "               0.0028748591848470027,\n",
       "               0.0029020973346921756,\n",
       "               0.0028599574311859396,\n",
       "               0.0028832608929079606,\n",
       "               0.002887510358910482,\n",
       "               0.002838445245662465,\n",
       "               0.0028169345352114265,\n",
       "               0.0028211193550836096,\n",
       "               0.0028179981263226545,\n",
       "               0.0029332797811714635,\n",
       "               0.0028802694604216196,\n",
       "               0.0028623234645828656,\n",
       "               0.002867926985388932,\n",
       "               0.0028527286216040704,\n",
       "               0.002953649580642229,\n",
       "               0.0029490217712115074,\n",
       "               0.002951936195262759,\n",
       "               0.002984325445531604,\n",
       "               0.0029804873952951026,\n",
       "               0.0029727417216535074,\n",
       "               0.002925260756495308,\n",
       "               0.00289540178580765,\n",
       "               0.0028670413748960338,\n",
       "               0.002773547542592287,\n",
       "               0.0027865630514057227,\n",
       "               0.0027506074332813903,\n",
       "               0.0026969953516839265,\n",
       "               0.0026328433155477647,\n",
       "               0.0026085327227064817,\n",
       "               0.0025986183368303666,\n",
       "               0.002577485897576523,\n",
       "               0.0025454830912518627,\n",
       "               0.0024812529814098303,\n",
       "               0.0024869629808762163,\n",
       "               0.0025088341455739827,\n",
       "               0.002433103369651488,\n",
       "               0.0023991861786736694,\n",
       "               0.0024259194145287728,\n",
       "               0.002333814976478138,\n",
       "               0.0023642833244138356,\n",
       "               0.002392146251197213,\n",
       "               0.0024457180227425547,\n",
       "               0.002358973614062253,\n",
       "               0.0024578533473807655,\n",
       "               0.0024152412598362045,\n",
       "               0.0023991919844448483,\n",
       "               0.002416105149835078,\n",
       "               0.002434887638948819,\n",
       "               0.0024445835479194734,\n",
       "               0.0024512795540980294,\n",
       "               0.002482511952725324,\n",
       "               0.0025058213123031153,\n",
       "               0.002551231916793486,\n",
       "               0.002546400124699375,\n",
       "               0.0026022130404540224,\n",
       "               0.00267195915547514,\n",
       "               0.0026904713245088246,\n",
       "               0.002713624083290167,\n",
       "               0.0026566818770727284,\n",
       "               0.00268606530497499,\n",
       "               0.0026587408933894372,\n",
       "               0.0026599535907872876,\n",
       "               0.002714477637953572,\n",
       "               0.0027376875419281846,\n",
       "               0.0027141035585208795,\n",
       "               0.002717468704869712,\n",
       "               0.002745815552622165,\n",
       "               0.0027170671822378065,\n",
       "               0.0027332927244714538,\n",
       "               0.002713853733548079,\n",
       "               0.0027797801364413247,\n",
       "               0.002721301968925855,\n",
       "               0.0027070480706642163,\n",
       "               0.0027322840576826627,\n",
       "               0.0026960349456012617,\n",
       "               0.0027724611066201796,\n",
       "               0.002772773782749868,\n",
       "               0.002760738114832199,\n",
       "               0.0027235405292791153,\n",
       "               0.002635962104267652,\n",
       "               0.0026522157158931133,\n",
       "               0.0026436270815032624,\n",
       "               0.0026847844419629913,\n",
       "               0.002632446356105273,\n",
       "               0.0026481025422828135,\n",
       "               0.0026688271820321996,\n",
       "               0.0026831936387783956,\n",
       "               0.0027072134185309117]})}"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m_0 = len(df_imp) - y.sum()\n",
    "m_1 = y.sum()\n",
    "class_weights = dict({0:1, 1: m_0/m_1})\n",
    "cat_gs = catboost.CatBoostClassifier(n_estimators=200, \n",
    "                                     custom_metric=['AUC:hints=skip_train~false'],\n",
    "                                     #class_weights=class_weights,\n",
    "                                     auto_class_weights='Balanced',\n",
    "                                     cat_features=cat_cols_index,\n",
    "                                     silent=True,\n",
    "                                     eval_metric='AUC:hints=skip_train~false',\n",
    "                                     random_state=42\n",
    "                                    )\n",
    "paramgrid={'l2_leaf_reg': np.linspace(1, 1000, 10) #коэффициент регуляризации (параметр модели)\n",
    "          ,'depth': [5, 6] #глубина дерева - здесь 2 варианта: 5 и 6\n",
    "          }\n",
    "cat_gs.grid_search(paramgrid\n",
    "                   ,df_imp, y\n",
    "                   ,cv=3 #на сколько частей делить df (test/train/val)\n",
    "                   ,stratified=True\n",
    "                   ,plot=False, refit=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'silent': True,\n",
       " 'auto_class_weights': 'Balanced',\n",
       " 'custom_metric': ['AUC:hints=skip_train~false'],\n",
       " 'eval_metric': 'AUC:hints=skip_train~false',\n",
       " 'n_estimators': 200,\n",
       " 'random_state': 42,\n",
       " 'cat_features': [0],\n",
       " 'depth': 6,\n",
       " 'l2_leaf_reg': 889.0}"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cat_gs.get_params()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "roc-auc на всем наборе данных: 0.9331446757530049\n"
     ]
    }
   ],
   "source": [
    "y_score_imp_gs = cat_gs.predict_proba(df_imp)[:, 1]\n",
    "print('roc-auc на всем наборе данных:', roc_auc_score(y, y_score_imp_gs))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CatBoostClassifier, cat_gs_imp. Сохранение модели в формате catboost\n",
      "Ok\n"
     ]
    }
   ],
   "source": [
    "print('CatBoostClassifier, cat_gs_imp. Сохранение модели в формате catboost')\n",
    "cat_gs.save_model(\"сс_cat_gs_imp_columns.cbm\")\n",
    "print('Ok')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CatBoostClassifier, cat_gs_imp. Загрузка модели в формате catboost\n",
      "ok\n"
     ]
    }
   ],
   "source": [
    "print('CatBoostClassifier, cat_gs_imp. Загрузка модели в формате catboost')\n",
    "cat5_imp_load = catboost.CatBoostClassifier()\n",
    "cat5_imp_load.load_model(\"сс_cat_gs_imp_columns.cbm\")\n",
    "print('ok')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_imp = df_score[list_cat_v2_imp]\n",
    "#Делим данные df_imp на тренировочный и тестовый набор\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    df_imp, y, test_size=0.25, stratify=y, shuffle=True, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "roc-auc на тренировочных данных: 0.9331975816892616\n",
      "roc-auc на тестовых данных: 0.9329829625483181\n",
      "roc-auc на всем наборе данных: 0.9331446757530049\n"
     ]
    }
   ],
   "source": [
    "y_score_imp_train = cat5_imp_load.predict_proba(X_train)[:, 1] # предсказания обученной модели на тренировочной выборке\n",
    "y_score_imp_test = cat5_imp_load.predict_proba(X_test)[:, 1] # предсказания обученной модели на тестовой выборке\n",
    "y_score_imp = cat5_imp_load.predict_proba(df_imp)[:, 1]\n",
    "print('roc-auc на тренировочных данных:', roc_auc_score(y_train, y_score_imp_train))\n",
    "print('roc-auc на тестовых данных:', roc_auc_score(y_test, y_score_imp_test))\n",
    "print('roc-auc на всем наборе данных:', roc_auc_score(y, y_score_imp))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_bin = pd.DataFrame({'code': code, 'target': y, 'y_score': y_score_imp})\n",
    "df_bin['bin_int'] = pd.cut(df_bin['y_score'], bins=10, labels=list(range(1, 11)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10      76538\n",
       "9      153271\n",
       "8      169060\n",
       "7      157268\n",
       "6      149283\n",
       "5      148900\n",
       "4      171499\n",
       "3      285385\n",
       "2     1812533\n",
       "1     1880663\n",
       "Name: bin_int, dtype: int64"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bin.bin_int.value_counts().sort_index(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [],
   "source": [
    "real_rate_upd = len(df_bin[df_bin.target==1]) / len(df_bin) #пересчет real_rate\n",
    "df_bin['Adj_P1_upd'] = (1/(1 + ((1/real_rate_upd) - 1) / ((1/0.5) - 1) * ((1/df_bin.y_score) - 1)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_stat = df_bin.groupby(by=['bin_int']).agg({'target':['sum', 'mean', 'count'], \n",
    "                                                  'y_score':['sum', 'mean'], \n",
    "                                                  #'Adj_P1':['sum', 'mean'],\n",
    "                                                  'Adj_P1_upd':['sum', 'mean'] \n",
    "                                                 })"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"3\" halign=\"left\">target</th>\n",
       "      <th colspan=\"2\" halign=\"left\">y_score</th>\n",
       "      <th colspan=\"2\" halign=\"left\">Adj_P1_upd</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>sum</th>\n",
       "      <th>mean</th>\n",
       "      <th>count</th>\n",
       "      <th>sum</th>\n",
       "      <th>mean</th>\n",
       "      <th>sum</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bin_int</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>71.0</td>\n",
       "      <td>0.000038</td>\n",
       "      <td>1880663</td>\n",
       "      <td>101576.516807</td>\n",
       "      <td>0.054011</td>\n",
       "      <td>155.874893</td>\n",
       "      <td>0.000083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>416.0</td>\n",
       "      <td>0.000230</td>\n",
       "      <td>1812533</td>\n",
       "      <td>265753.232784</td>\n",
       "      <td>0.146620</td>\n",
       "      <td>447.112248</td>\n",
       "      <td>0.000247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>112.0</td>\n",
       "      <td>0.000392</td>\n",
       "      <td>285385</td>\n",
       "      <td>69026.965692</td>\n",
       "      <td>0.241873</td>\n",
       "      <td>130.266095</td>\n",
       "      <td>0.000456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>116.0</td>\n",
       "      <td>0.000676</td>\n",
       "      <td>171499</td>\n",
       "      <td>59666.632751</td>\n",
       "      <td>0.347912</td>\n",
       "      <td>130.784411</td>\n",
       "      <td>0.000763</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>193.0</td>\n",
       "      <td>0.001296</td>\n",
       "      <td>148900</td>\n",
       "      <td>66601.779790</td>\n",
       "      <td>0.447292</td>\n",
       "      <td>172.211457</td>\n",
       "      <td>0.001157</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        target                           y_score            Adj_P1_upd  \\\n",
       "           sum      mean    count            sum      mean         sum   \n",
       "bin_int                                                                  \n",
       "1         71.0  0.000038  1880663  101576.516807  0.054011  155.874893   \n",
       "2        416.0  0.000230  1812533  265753.232784  0.146620  447.112248   \n",
       "3        112.0  0.000392   285385   69026.965692  0.241873  130.266095   \n",
       "4        116.0  0.000676   171499   59666.632751  0.347912  130.784411   \n",
       "5        193.0  0.001296   148900   66601.779790  0.447292  172.211457   \n",
       "\n",
       "                   \n",
       "             mean  \n",
       "bin_int            \n",
       "1        0.000083  \n",
       "2        0.000247  \n",
       "3        0.000456  \n",
       "4        0.000763  \n",
       "5        0.001157  "
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_stat.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Модель cat_gs_imp получилась плохо откалиброванной в сравнении с cat_imp, несмотря на чуть более высокий AUC(0.825 и 0.812)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<span style='background:yellow'> **Разработка линейной модели** </span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 360,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    df_score, y, test_size=0.25, stratify=y, shuffle=True, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 295,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Нормализация данных для применения линейной регрессии\n",
    "scaler = StandardScaler()\n",
    "#fit_transform - для обучения\n",
    "#transform - для теста/для прода\n",
    "\n",
    "#данные остаются в виде pandas датафрейма с названиями колонок.\n",
    "X_train = pd.DataFrame(scaler.fit_transform(X_train), columns=X_train.columns)\n",
    "gc.collect()\n",
    "\n",
    "#Для тестового набора делаем только transform\n",
    "X_test = pd.DataFrame(scaler.transform(X_test), columns=X_test.columns)\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Начинаю обучение, тек.время: 2022-10-26 06:46:05\n",
      "Закончил обучение. Общее время обучения: 0:20:57.354207\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "24"
      ]
     },
     "execution_count": 296,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr = LogisticRegression(class_weight = 'balanced', solver='sag', random_state=42, n_jobs=-1)\n",
    "\n",
    "global_start_time = datetime.now()\n",
    "print(f'Начинаю обучение, тек.время: {global_start_time.strftime(\"%Y-%m-%d %H:%M:%S\")}')\n",
    "lr.fit(X_train, y_train)\n",
    "global_end_time = datetime.now()\n",
    "print(f'Закончил обучение. Общее время обучения: {global_end_time - global_start_time}')\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Начинаю рассчитывать прогноз на тренировочных данных, тек.время: 2022-10-26 07:07:02\n",
      "Закончил предсказывать. Время: 0:00:04.923090\n",
      "roc-auc: 0.9185634614282081\n"
     ]
    }
   ],
   "source": [
    "global_start_time = datetime.now()\n",
    "print(f'Начинаю рассчитывать прогноз на тренировочных данных, тек.время: {global_start_time.strftime(\"%Y-%m-%d %H:%M:%S\")}')\n",
    "y_score_train = lr.predict_proba(X_train)[:,1]\n",
    "global_end_time = datetime.now()\n",
    "print(f'Закончил предсказывать. Время: {global_end_time - global_start_time}')\n",
    "gc.collect()\n",
    "print('roc-auc:', roc_auc_score(y_train, y_score_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Начинаю рассчитывать прогноз на тестовых данных, тек.время: 2022-10-26 07:07:09\n",
      "Закончил предсказывать. Время: 0:00:02.366456\n",
      "roc-auc: 0.9144611418223907\n"
     ]
    }
   ],
   "source": [
    "#рассчёт roc-auc на тестовых данных\n",
    "global_start_time = datetime.now()\n",
    "print(f'Начинаю рассчитывать прогноз на тестовых данных, тек.время: {global_start_time.strftime(\"%Y-%m-%d %H:%M:%S\")}')\n",
    "y_score_test = lr.predict_proba(X_test)[:,1]\n",
    "global_end_time = datetime.now()\n",
    "print(f'Закончил предсказывать. Время: {global_end_time - global_start_time}')\n",
    "gc.collect()\n",
    "print('roc-auc:', roc_auc_score(y_test, y_score_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Начинаю рассчитывать прогноз на всех данных, тек.время: 2022-10-26 07:07:11\n",
      "Закончил предсказывать. Время: 0:00:34.320761\n",
      "roc-auc: 0.9175379115892854\n"
     ]
    }
   ],
   "source": [
    "#рассчёт roc-auc\n",
    "global_start_time = datetime.now()\n",
    "print(f'Начинаю рассчитывать прогноз на всех данных, тек.время: {global_start_time.strftime(\"%Y-%m-%d %H:%M:%S\")}')\n",
    "df_pred = pd.DataFrame(scaler.transform(df_score), columns=df_score.columns)\n",
    "y_score_df = lr.predict_proba(df_pred)[:,1]\n",
    "global_end_time = datetime.now()\n",
    "print(f'Закончил предсказывать. Время: {global_end_time - global_start_time}')\n",
    "print('roc-auc:', roc_auc_score(y, y_score_df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [],
   "source": [
    "#бинаризация\n",
    "df_bin = pd.DataFrame({'code': code, 'target': y, 'y_score': y_score_df})\n",
    "df_bin['bin_int'] = pd.cut(df_bin['y_score'], bins=10, labels=list(range(1, 11)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10     116142\n",
       "9      185482\n",
       "8      205387\n",
       "7      265485\n",
       "6      328793\n",
       "5      534071\n",
       "4     3337697\n",
       "3       30404\n",
       "2         614\n",
       "1         325\n",
       "Name: bin_int, dtype: int64"
      ]
     },
     "execution_count": 301,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bin.bin_int.value_counts().sort_index(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Score ajdusted\n",
    "real_rate_upd = len(df_bin[df_bin.target==1]) / len(df_bin) #пересчет real_rate\n",
    "df_bin['Adj_P1_upd'] = (1/(1 + ((1/real_rate_upd) - 1) / ((1/0.5) - 1) * ((1/df_bin.y_score) - 1)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "metadata": {},
   "outputs": [],
   "source": [
    "#агрегат\n",
    "df_stat = df_bin.groupby(by=['bin_int']).agg({'target':['sum', 'mean', 'count'], \n",
    "                                                  'y_score':['sum', 'mean'], \n",
    "                                                  #'Adj_P1':['sum', 'mean'],\n",
    "                                                  'Adj_P1_upd':['sum', 'mean'] \n",
    "                                                 })"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"3\" halign=\"left\">target</th>\n",
       "      <th colspan=\"2\" halign=\"left\">y_score</th>\n",
       "      <th colspan=\"2\" halign=\"left\">Adj_P1_upd</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>sum</th>\n",
       "      <th>mean</th>\n",
       "      <th>count</th>\n",
       "      <th>sum</th>\n",
       "      <th>mean</th>\n",
       "      <th>sum</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bin_int</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>325</td>\n",
       "      <td>1.139254e+01</td>\n",
       "      <td>0.035054</td>\n",
       "      <td>0.017342</td>\n",
       "      <td>0.000053</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>614</td>\n",
       "      <td>9.979878e+01</td>\n",
       "      <td>0.162539</td>\n",
       "      <td>0.170539</td>\n",
       "      <td>0.000278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000033</td>\n",
       "      <td>30404</td>\n",
       "      <td>8.326781e+03</td>\n",
       "      <td>0.273871</td>\n",
       "      <td>16.355165</td>\n",
       "      <td>0.000538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>502.0</td>\n",
       "      <td>0.000150</td>\n",
       "      <td>3337697</td>\n",
       "      <td>1.131464e+06</td>\n",
       "      <td>0.338995</td>\n",
       "      <td>2440.619873</td>\n",
       "      <td>0.000731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>215.0</td>\n",
       "      <td>0.000403</td>\n",
       "      <td>534071</td>\n",
       "      <td>2.365549e+05</td>\n",
       "      <td>0.442928</td>\n",
       "      <td>606.977295</td>\n",
       "      <td>0.001137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>318.0</td>\n",
       "      <td>0.000967</td>\n",
       "      <td>328793</td>\n",
       "      <td>1.802359e+05</td>\n",
       "      <td>0.548174</td>\n",
       "      <td>570.644043</td>\n",
       "      <td>0.001736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>511.0</td>\n",
       "      <td>0.001925</td>\n",
       "      <td>265485</td>\n",
       "      <td>1.717462e+05</td>\n",
       "      <td>0.646915</td>\n",
       "      <td>697.117798</td>\n",
       "      <td>0.002626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>739.0</td>\n",
       "      <td>0.003598</td>\n",
       "      <td>205387</td>\n",
       "      <td>1.540382e+05</td>\n",
       "      <td>0.749990</td>\n",
       "      <td>888.577881</td>\n",
       "      <td>0.004326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1240.0</td>\n",
       "      <td>0.006685</td>\n",
       "      <td>185482</td>\n",
       "      <td>1.571238e+05</td>\n",
       "      <td>0.847111</td>\n",
       "      <td>1514.930542</td>\n",
       "      <td>0.008168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3581.0</td>\n",
       "      <td>0.030833</td>\n",
       "      <td>116142</td>\n",
       "      <td>1.097393e+05</td>\n",
       "      <td>0.944872</td>\n",
       "      <td>6533.419434</td>\n",
       "      <td>0.056254</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         target                          y_score             Adj_P1_upd  \\\n",
       "            sum      mean    count           sum      mean          sum   \n",
       "bin_int                                                                   \n",
       "1           0.0  0.000000      325  1.139254e+01  0.035054     0.017342   \n",
       "2           0.0  0.000000      614  9.979878e+01  0.162539     0.170539   \n",
       "3           1.0  0.000033    30404  8.326781e+03  0.273871    16.355165   \n",
       "4         502.0  0.000150  3337697  1.131464e+06  0.338995  2440.619873   \n",
       "5         215.0  0.000403   534071  2.365549e+05  0.442928   606.977295   \n",
       "6         318.0  0.000967   328793  1.802359e+05  0.548174   570.644043   \n",
       "7         511.0  0.001925   265485  1.717462e+05  0.646915   697.117798   \n",
       "8         739.0  0.003598   205387  1.540382e+05  0.749990   888.577881   \n",
       "9        1240.0  0.006685   185482  1.571238e+05  0.847111  1514.930542   \n",
       "10       3581.0  0.030833   116142  1.097393e+05  0.944872  6533.419434   \n",
       "\n",
       "                   \n",
       "             mean  \n",
       "bin_int            \n",
       "1        0.000053  \n",
       "2        0.000278  \n",
       "3        0.000538  \n",
       "4        0.000731  \n",
       "5        0.001137  \n",
       "6        0.001736  \n",
       "7        0.002626  \n",
       "8        0.004326  \n",
       "9        0.008168  \n",
       "10       0.056254  "
      ]
     },
     "execution_count": 304,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_stat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_stat.columns = [c[0]+'_'+c[1] for c in df_stat.columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bin_int</th>\n",
       "      <th>target_sum</th>\n",
       "      <th>target_mean</th>\n",
       "      <th>target_count</th>\n",
       "      <th>y_score_sum</th>\n",
       "      <th>y_score_mean</th>\n",
       "      <th>Adj_P1_upd_sum</th>\n",
       "      <th>Adj_P1_upd_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>325</td>\n",
       "      <td>1.139254e+01</td>\n",
       "      <td>0.035054</td>\n",
       "      <td>0.017342</td>\n",
       "      <td>0.000053</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>614</td>\n",
       "      <td>9.979878e+01</td>\n",
       "      <td>0.162539</td>\n",
       "      <td>0.170539</td>\n",
       "      <td>0.000278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000033</td>\n",
       "      <td>30404</td>\n",
       "      <td>8.326781e+03</td>\n",
       "      <td>0.273871</td>\n",
       "      <td>16.355165</td>\n",
       "      <td>0.000538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>502.0</td>\n",
       "      <td>0.000150</td>\n",
       "      <td>3337697</td>\n",
       "      <td>1.131464e+06</td>\n",
       "      <td>0.338995</td>\n",
       "      <td>2440.619873</td>\n",
       "      <td>0.000731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>215.0</td>\n",
       "      <td>0.000403</td>\n",
       "      <td>534071</td>\n",
       "      <td>2.365549e+05</td>\n",
       "      <td>0.442928</td>\n",
       "      <td>606.977295</td>\n",
       "      <td>0.001137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>318.0</td>\n",
       "      <td>0.000967</td>\n",
       "      <td>328793</td>\n",
       "      <td>1.802359e+05</td>\n",
       "      <td>0.548174</td>\n",
       "      <td>570.644043</td>\n",
       "      <td>0.001736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>511.0</td>\n",
       "      <td>0.001925</td>\n",
       "      <td>265485</td>\n",
       "      <td>1.717462e+05</td>\n",
       "      <td>0.646915</td>\n",
       "      <td>697.117798</td>\n",
       "      <td>0.002626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>739.0</td>\n",
       "      <td>0.003598</td>\n",
       "      <td>205387</td>\n",
       "      <td>1.540382e+05</td>\n",
       "      <td>0.749990</td>\n",
       "      <td>888.577881</td>\n",
       "      <td>0.004326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>1240.0</td>\n",
       "      <td>0.006685</td>\n",
       "      <td>185482</td>\n",
       "      <td>1.571238e+05</td>\n",
       "      <td>0.847111</td>\n",
       "      <td>1514.930542</td>\n",
       "      <td>0.008168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>3581.0</td>\n",
       "      <td>0.030833</td>\n",
       "      <td>116142</td>\n",
       "      <td>1.097393e+05</td>\n",
       "      <td>0.944872</td>\n",
       "      <td>6533.419434</td>\n",
       "      <td>0.056254</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  bin_int  target_sum  target_mean  target_count   y_score_sum  y_score_mean  \\\n",
       "0       1         0.0     0.000000           325  1.139254e+01      0.035054   \n",
       "1       2         0.0     0.000000           614  9.979878e+01      0.162539   \n",
       "2       3         1.0     0.000033         30404  8.326781e+03      0.273871   \n",
       "3       4       502.0     0.000150       3337697  1.131464e+06      0.338995   \n",
       "4       5       215.0     0.000403        534071  2.365549e+05      0.442928   \n",
       "5       6       318.0     0.000967        328793  1.802359e+05      0.548174   \n",
       "6       7       511.0     0.001925        265485  1.717462e+05      0.646915   \n",
       "7       8       739.0     0.003598        205387  1.540382e+05      0.749990   \n",
       "8       9      1240.0     0.006685        185482  1.571238e+05      0.847111   \n",
       "9      10      3581.0     0.030833        116142  1.097393e+05      0.944872   \n",
       "\n",
       "   Adj_P1_upd_sum  Adj_P1_upd_mean  \n",
       "0        0.017342         0.000053  \n",
       "1        0.170539         0.000278  \n",
       "2       16.355165         0.000538  \n",
       "3     2440.619873         0.000731  \n",
       "4      606.977295         0.001137  \n",
       "5      570.644043         0.001736  \n",
       "6      697.117798         0.002626  \n",
       "7      888.577881         0.004326  \n",
       "8     1514.930542         0.008168  \n",
       "9     6533.419434         0.056254  "
      ]
     },
     "execution_count": 306,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_stat = df_stat.reset_index()\n",
    "df_stat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 412,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-412-840fc1cc990e>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-412-840fc1cc990e>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    **Поиск важных полей**\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "**Поиск важных полей**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The feature_perturbation option is now deprecated in favor of using the appropriate masker (maskers.Independent, or maskers.Impute)\n",
      "Linear explainer: 1251101it [00:16, 29952.83it/s]                             \n"
     ]
    }
   ],
   "source": [
    "explainer = shap.LinearExplainer(lr, X_train, feature_perturbation=\"interventional\")\n",
    "shap_values = explainer(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x828 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "shap.summary_plot(shap_values, X_test, max_display=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "metadata": {},
   "outputs": [],
   "source": [
    "vals = np.abs(shap_values.values).mean(0)\n",
    "feature_names = X_train\n",
    "\n",
    "feature_importance = pd.DataFrame(list(zip(feature_names, vals)),\n",
    "                                  columns=['col_name', 'feature_importance_vals'])\n",
    "feature_importance.sort_values(by=['feature_importance_vals'],\n",
    "                               ascending=False, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col_name</th>\n",
       "      <th>feature_importance_vals</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>655</th>\n",
       "      <td>apk_flg</td>\n",
       "      <td>3.098442e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>654</th>\n",
       "      <td>pensioners_flg</td>\n",
       "      <td>2.901459e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255</th>\n",
       "      <td>credit_crm_flg_1q</td>\n",
       "      <td>2.030483e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>247</th>\n",
       "      <td>channel_sms_1q</td>\n",
       "      <td>1.654912e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>251</th>\n",
       "      <td>cash_crm_flg_1q</td>\n",
       "      <td>1.609556e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>648</th>\n",
       "      <td>dbo_invest_sum_4q</td>\n",
       "      <td>1.055186e-07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>633</th>\n",
       "      <td>sa_crm_flg_4q</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>253</th>\n",
       "      <td>mrtg_crm_flg_1q</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>sa_crm_flg_0m</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>508</th>\n",
       "      <td>sa_crm_flg_3q</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>668 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              col_name  feature_importance_vals\n",
       "655            apk_flg             3.098442e-02\n",
       "654     pensioners_flg             2.901459e-02\n",
       "255  credit_crm_flg_1q             2.030483e-02\n",
       "247     channel_sms_1q             1.654912e-02\n",
       "251    cash_crm_flg_1q             1.609556e-02\n",
       "..                 ...                      ...\n",
       "648  dbo_invest_sum_4q             1.055186e-07\n",
       "633      sa_crm_flg_4q             0.000000e+00\n",
       "253    mrtg_crm_flg_1q             0.000000e+00\n",
       "74       sa_crm_flg_0m             0.000000e+00\n",
       "508      sa_crm_flg_3q             0.000000e+00\n",
       "\n",
       "[668 rows x 2 columns]"
      ]
     },
     "execution_count": 310,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_importance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.030984418"
      ]
     },
     "execution_count": 311,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max_feature_importance_vals = feature_importance.feature_importance_vals.max()\n",
    "max_feature_importance_vals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 363,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66\n"
     ]
    }
   ],
   "source": [
    "IMP_MAX_MIN_RATIO = 5 #Подбираю опытным путем\n",
    "len_shape_imp=len(feature_importance[feature_importance.feature_importance_vals>max_feature_importance_vals/IMP_MAX_MIN_RATIO])\n",
    "print(len_shape_imp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 335,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col_name</th>\n",
       "      <th>feature_importance_vals</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>655</th>\n",
       "      <td>apk_flg</td>\n",
       "      <td>0.030984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>654</th>\n",
       "      <td>pensioners_flg</td>\n",
       "      <td>0.029015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255</th>\n",
       "      <td>credit_crm_flg_1q</td>\n",
       "      <td>0.020305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>247</th>\n",
       "      <td>channel_sms_1q</td>\n",
       "      <td>0.016549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>251</th>\n",
       "      <td>cash_crm_flg_1q</td>\n",
       "      <td>0.016096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>type_mob</td>\n",
       "      <td>0.014517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>380</th>\n",
       "      <td>credit_crm_flg_2q</td>\n",
       "      <td>0.014331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>is_dc</td>\n",
       "      <td>0.013891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376</th>\n",
       "      <td>cash_crm_flg_2q</td>\n",
       "      <td>0.013823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110</th>\n",
       "      <td>appl_approved_flg_1y</td>\n",
       "      <td>0.013621</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>credit_crm_flg_0m</td>\n",
       "      <td>0.013590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>sum_cnt_dc_0m</td>\n",
       "      <td>0.013321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>372</th>\n",
       "      <td>channel_sms_2q</td>\n",
       "      <td>0.013135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>commun_365</td>\n",
       "      <td>0.012943</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>commun_180</td>\n",
       "      <td>0.012915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>commun_90</td>\n",
       "      <td>0.012902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>appl_rejected_by_client_flg_1y</td>\n",
       "      <td>0.012853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>commun_60</td>\n",
       "      <td>0.012853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>248</th>\n",
       "      <td>channel_kc_1q</td>\n",
       "      <td>0.012650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>commun_30</td>\n",
       "      <td>0.012631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>631</th>\n",
       "      <td>dep_crm_flg_4q</td>\n",
       "      <td>0.011523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>657</th>\n",
       "      <td>zp_card_flg</td>\n",
       "      <td>0.011511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>dbo_profile_flg_1q</td>\n",
       "      <td>0.011503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>111</th>\n",
       "      <td>appl_booked_flg_1y</td>\n",
       "      <td>0.011368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144</th>\n",
       "      <td>dbo_profile_flg_0m</td>\n",
       "      <td>0.011247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>avg_dc_pos_cnt_daily_0m</td>\n",
       "      <td>0.011215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>254</th>\n",
       "      <td>cc_crm_flg_1q</td>\n",
       "      <td>0.011183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>624</th>\n",
       "      <td>channel_atm_4q</td>\n",
       "      <td>0.011070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>cash_rejected_by_client_flg_1y</td>\n",
       "      <td>0.011047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>dbo_profile_flg_2q</td>\n",
       "      <td>0.011000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>cash_approved_flg_1y</td>\n",
       "      <td>0.010877</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>dbo_profile_flg_4q</td>\n",
       "      <td>0.010684</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           col_name  feature_importance_vals\n",
       "655                         apk_flg                 0.030984\n",
       "654                  pensioners_flg                 0.029015\n",
       "255               credit_crm_flg_1q                 0.020305\n",
       "247                  channel_sms_1q                 0.016549\n",
       "251                 cash_crm_flg_1q                 0.016096\n",
       "1                          type_mob                 0.014517\n",
       "380               credit_crm_flg_2q                 0.014331\n",
       "5                             is_dc                 0.013891\n",
       "376                 cash_crm_flg_2q                 0.013823\n",
       "110            appl_approved_flg_1y                 0.013621\n",
       "71                credit_crm_flg_0m                 0.013590\n",
       "26                    sum_cnt_dc_0m                 0.013321\n",
       "372                  channel_sms_2q                 0.013135\n",
       "79                       commun_365                 0.012943\n",
       "78                       commun_180                 0.012915\n",
       "77                        commun_90                 0.012902\n",
       "109  appl_rejected_by_client_flg_1y                 0.012853\n",
       "76                        commun_60                 0.012853\n",
       "248                   channel_kc_1q                 0.012650\n",
       "75                        commun_30                 0.012631\n",
       "631                  dep_crm_flg_4q                 0.011523\n",
       "657                     zp_card_flg                 0.011511\n",
       "145              dbo_profile_flg_1q                 0.011503\n",
       "111              appl_booked_flg_1y                 0.011368\n",
       "144              dbo_profile_flg_0m                 0.011247\n",
       "57          avg_dc_pos_cnt_daily_0m                 0.011215\n",
       "254                   cc_crm_flg_1q                 0.011183\n",
       "624                  channel_atm_4q                 0.011070\n",
       "113  cash_rejected_by_client_flg_1y                 0.011047\n",
       "146              dbo_profile_flg_2q                 0.011000\n",
       "114            cash_approved_flg_1y                 0.010877\n",
       "148              dbo_profile_flg_4q                 0.010684"
      ]
     },
     "execution_count": 335,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_importance[:len_shape_imp]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>min_dccashsum_to_dctotalrur_2q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>max_casa_turnover_rur_1q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>max_total_prd_cnt_1q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tech_churn_flg_1q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>max_dc_pos_cnt_daily_1q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>422</th>\n",
       "      <td>days_to_cash</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>423</th>\n",
       "      <td>sum_ca_rur_0m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>424</th>\n",
       "      <td>avg_dc_rur_3q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>425</th>\n",
       "      <td>max_pers_cnt_2q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>426</th>\n",
       "      <td>avg_sum_dep_3q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>427 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                            feature\n",
       "0    min_dccashsum_to_dctotalrur_2q\n",
       "1          max_casa_turnover_rur_1q\n",
       "2              max_total_prd_cnt_1q\n",
       "3                 tech_churn_flg_1q\n",
       "4           max_dc_pos_cnt_daily_1q\n",
       "..                              ...\n",
       "422                    days_to_cash\n",
       "423                   sum_ca_rur_0m\n",
       "424                   avg_dc_rur_3q\n",
       "425                 max_pers_cnt_2q\n",
       "426                  avg_sum_dep_3q\n",
       "\n",
       "[427 rows x 1 columns]"
      ]
     },
     "execution_count": 314,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_imp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 344,
   "metadata": {},
   "outputs": [],
   "source": [
    "feature_imp = pd.DataFrame()\n",
    "feature_imp['feature'] = X_test.columns\n",
    "\n",
    "feature_imp['imp'] = abs(lr.coef_[0]) #!берем модуль\n",
    "feature_imp = feature_imp.sort_values(by='imp', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.04081189, 0.0)"
      ]
     },
     "execution_count": 317,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max_feature_imp = feature_imp.imp.max()\n",
    "max_feature_imp, feature_imp.imp.min()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 364,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "114\n"
     ]
    }
   ],
   "source": [
    "IMP_MAX_MIN_RATIO = 4\n",
    "len_lr_imp = len(feature_imp[feature_imp.imp>max_feature_imp/IMP_MAX_MIN_RATIO])\n",
    "print(len_lr_imp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>imp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>cash_approved_flg_0m</td>\n",
       "      <td>0.040812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110</th>\n",
       "      <td>appl_approved_flg_1y</td>\n",
       "      <td>0.031250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>appl_approved_flg_0m</td>\n",
       "      <td>0.031250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>655</th>\n",
       "      <td>apk_flg</td>\n",
       "      <td>0.031250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>123</th>\n",
       "      <td>cc_booked_flg_1y</td>\n",
       "      <td>0.031250</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  feature       imp\n",
       "90   cash_approved_flg_0m  0.040812\n",
       "110  appl_approved_flg_1y  0.031250\n",
       "86   appl_approved_flg_0m  0.031250\n",
       "655               apk_flg  0.031250\n",
       "123      cc_booked_flg_1y  0.031250"
      ]
     },
     "execution_count": 321,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_imp[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col_name</th>\n",
       "      <th>feature_importance_vals</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>655</th>\n",
       "      <td>apk_flg</td>\n",
       "      <td>0.030984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>654</th>\n",
       "      <td>pensioners_flg</td>\n",
       "      <td>0.029015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255</th>\n",
       "      <td>credit_crm_flg_1q</td>\n",
       "      <td>0.020305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>247</th>\n",
       "      <td>channel_sms_1q</td>\n",
       "      <td>0.016549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>251</th>\n",
       "      <td>cash_crm_flg_1q</td>\n",
       "      <td>0.016096</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              col_name  feature_importance_vals\n",
       "655            apk_flg                 0.030984\n",
       "654     pensioners_flg                 0.029015\n",
       "255  credit_crm_flg_1q                 0.020305\n",
       "247     channel_sms_1q                 0.016549\n",
       "251    cash_crm_flg_1q                 0.016096"
      ]
     },
     "execution_count": 322,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_importance[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 366,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "125"
      ]
     },
     "execution_count": 366,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_lr_importance=list(feature_importance.col_name[:len_shape_imp])\n",
    "list_lr_importance.extend(list(feature_imp.feature[:len_lr_imp]))\n",
    "list_lr_importance = list(set(list_lr_importance))\n",
    "len(list_lr_importance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['mrtg_booked_flg_1y',\n",
       " 'commun_365',\n",
       " 'mrtg_booked_flg_0m',\n",
       " 'appl_booked_flg_1y',\n",
       " 'appl_booked_flg_0m',\n",
       " 'channel_sms_1q',\n",
       " 'cash_rejected_by_client_flg_0m',\n",
       " 'commun_60',\n",
       " 'pensioners_flg',\n",
       " 'channel_kc_1q',\n",
       " 'sum_cnt_dc_0m',\n",
       " 'appl_approved_flg_0m',\n",
       " 'appl_rejected_by_client_flg_1y',\n",
       " 'commun_180',\n",
       " 'apk_flg',\n",
       " 'commun_30',\n",
       " 'channel_sms_2q',\n",
       " 'credit_crm_flg_1q',\n",
       " 'cc_booked_flg_1y',\n",
       " 'cash_approved_flg_1y',\n",
       " 'type_mob',\n",
       " 'cash_crm_flg_2q',\n",
       " 'credit_crm_flg_2q',\n",
       " 'cash_rejected_by_client_flg_1y',\n",
       " 'is_dc',\n",
       " 'cash_crm_flg_1q',\n",
       " 'credit_crm_flg_0m',\n",
       " 'mrtg_approved_flg_1y',\n",
       " 'commun_90',\n",
       " 'appl_approved_flg_1y',\n",
       " 'cash_approved_flg_0m']"
      ]
     },
     "execution_count": 324,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_lr_importance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 383,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Сохраняем список важных колонок для модели\n",
    "with open('cc_lr_list_feature_imp.txt', 'w') as file:\n",
    "    for line in list_lr_importance:\n",
    "        file.write(f\"{line}\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 354,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'df_pred' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-354-18da0af067d2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# удаляю df_pred для освобождения памяти\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mdel\u001b[0m \u001b[0mdf_pred\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mgc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcollect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'df_pred' is not defined"
     ]
    }
   ],
   "source": [
    "# удаляю df_pred для освобождения памяти\n",
    "del df_pred\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Разработка линейной модели с ограниченным набором полей**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 367,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_imp2 = df_score[list_lr_importance]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 368,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    df_imp2, y, test_size=0.25, stratify=y, shuffle=True, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 369,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 369,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Нормализация данных для применения линейной регрессии\n",
    "scaler = StandardScaler()\n",
    "#данные остаются в виде pandas датафрейма с названиями колонок.\n",
    "X_train = pd.DataFrame(scaler.fit_transform(X_train), columns=X_train.columns)\n",
    "gc.collect()\n",
    "#Для тестового набора делаем только transform\n",
    "X_test = pd.DataFrame(scaler.transform(X_test), columns=X_test.columns)\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 370,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Начинаю обучение, тек.время: 2022-10-26 08:53:09\n",
      "Закончил обучение. Общее время обучения: 0:04:25.705763\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "24"
      ]
     },
     "execution_count": 370,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr_imp = LogisticRegression(class_weight = 'balanced', solver='sag', random_state=42, n_jobs=-1)\n",
    "\n",
    "global_start_time = datetime.now()\n",
    "print(f'Начинаю обучение, тек.время: {global_start_time.strftime(\"%Y-%m-%d %H:%M:%S\")}')\n",
    "lr_imp.fit(X_train, y_train)\n",
    "global_end_time = datetime.now()\n",
    "print(f'Закончил обучение. Общее время обучения: {global_end_time - global_start_time}')\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 371,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Начинаю рассчитывать прогноз на тренировочных данных, тек.время: 2022-10-26 08:57:35\n",
      "Закончил предсказывать. Время: 0:00:00.942952\n",
      "roc-auc: 0.9218092047236619\n"
     ]
    }
   ],
   "source": [
    "global_start_time = datetime.now()\n",
    "print(f'Начинаю рассчитывать прогноз на тренировочных данных, тек.время: {global_start_time.strftime(\"%Y-%m-%d %H:%M:%S\")}')\n",
    "\n",
    "gc.collect()\n",
    "y_score_train = lr_imp.predict_proba(X_train)[:,1]\n",
    "\n",
    "global_end_time = datetime.now()\n",
    "print(f'Закончил предсказывать. Время: {global_end_time - global_start_time}')\n",
    "gc.collect()\n",
    "print('roc-auc:', roc_auc_score(y_train, y_score_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 372,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Начинаю рассчитывать прогноз на тестовых данных, тек.время: 2022-10-26 09:01:28\n",
      "Закончил предсказывать. Время: 0:00:00.475889\n",
      "roc-auc: 0.9188371825669811\n"
     ]
    }
   ],
   "source": [
    "global_start_time = datetime.now()\n",
    "print(f'Начинаю рассчитывать прогноз на тестовых данных, тек.время: {global_start_time.strftime(\"%Y-%m-%d %H:%M:%S\")}')\n",
    "\n",
    "gc.collect()\n",
    "y_score_test = lr_imp.predict_proba(X_test)[:,1]\n",
    "\n",
    "global_end_time = datetime.now()\n",
    "print(f'Закончил предсказывать. Время: {global_end_time - global_start_time}')\n",
    "gc.collect()\n",
    "print('roc-auc:', roc_auc_score(y_test, y_score_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 373,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Сохранение модели\n",
      "Ok\n",
      "Сохранение StandartScaler\n",
      "Ok\n"
     ]
    }
   ],
   "source": [
    "print('Сохранение модели')\n",
    "pkl_filename = \"сс_lr_imp_columns.pkl\"\n",
    "with open(pkl_filename, 'wb') as file:\n",
    "    pickle.dump(lr_imp, file)\n",
    "print('Ok')\n",
    "\n",
    "print('Сохранение StandartScaler')\n",
    "pkl_filename = \"scaler_imp.pkl\"\n",
    "with open(pkl_filename, 'wb') as file:\n",
    "    pickle.dump(scaler, file)\n",
    "print('Ok')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 384,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Загрузка модели\n",
      "Ok\n",
      "Загрузка StandartScaler\n",
      "Ok\n",
      "Загрузка списка важных полей\n"
     ]
    }
   ],
   "source": [
    "print('Загрузка модели')\n",
    "pkl_filename = \"сс_lr_imp_columns.pkl\"\n",
    "with open(pkl_filename, 'rb') as file:\n",
    "    lr_v2_imp = pickle.load(file)\n",
    "print('Ok')\n",
    "print('Загрузка StandartScaler')\n",
    "pkl_filename = \"scaler_imp.pkl\"\n",
    "with open(pkl_filename, 'rb') as file:\n",
    "    scaler_imp = pickle.load(file)\n",
    "print('Ok')\n",
    "print('Загрузка списка важных полей')\n",
    "with open('cc_lr_list_feature_imp.txt', 'r') as file:\n",
    "    list_lr_v2_imp = file.readlines()\n",
    "#удаляем символы перевода на новую строку\n",
    "list_lr_v2_imp = [x.strip() for x in list_lr_v2_imp]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 385,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 385,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_lr_importance==list_lr_v2_imp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 381,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "125\n",
      "55\n"
     ]
    }
   ],
   "source": [
    "print(len(list_lr_importance))\n",
    "print(len(list_lr_v2_imp))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 376,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "55\n"
     ]
    }
   ],
   "source": [
    "print(len(list_lr_v2_imp))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 386,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Выполняеть, если df_imp2 не определен ранее\n",
    "df_imp2 = df_score[list_lr_v2_imp]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 387,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    df_imp2, y, test_size=0.25, stratify=y, shuffle=True, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 388,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 388,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train = pd.DataFrame(scaler_imp.transform(X_train), columns=X_train.columns)\n",
    "gc.collect()\n",
    "X_test = pd.DataFrame(scaler_imp.transform(X_test), columns=X_test.columns)\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 389,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Начинаю рассчитывать прогноз на тренировочных данных, тек.время: 2022-10-26 09:59:34\n",
      "Закончил предсказывать. Время: 0:00:00.636178\n",
      "roc-auc: 0.9218092047236619\n"
     ]
    }
   ],
   "source": [
    "global_start_time = datetime.now()\n",
    "print(f'Начинаю рассчитывать прогноз на тренировочных данных, тек.время: {global_start_time.strftime(\"%Y-%m-%d %H:%M:%S\")}')\n",
    "\n",
    "gc.collect()\n",
    "y_score_train = lr_v2_imp.predict_proba(X_train)[:,1]\n",
    "\n",
    "global_end_time = datetime.now()\n",
    "print(f'Закончил предсказывать. Время: {global_end_time - global_start_time}')\n",
    "gc.collect()\n",
    "print('roc-auc:', roc_auc_score(y_train, y_score_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 390,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Начинаю рассчитывать прогноз на тестовых данных, тек.время: 2022-10-26 09:59:36\n",
      "Закончил предсказывать. Время: 0:00:00.329493\n",
      "roc-auc: 0.9188371825669811\n"
     ]
    }
   ],
   "source": [
    "global_start_time = datetime.now()\n",
    "print(f'Начинаю рассчитывать прогноз на тестовых данных, тек.время: {global_start_time.strftime(\"%Y-%m-%d %H:%M:%S\")}')\n",
    "\n",
    "gc.collect()\n",
    "y_score_test = lr_v2_imp.predict_proba(X_test)[:,1]\n",
    "\n",
    "global_end_time = datetime.now()\n",
    "print(f'Закончил предсказывать. Время: {global_end_time - global_start_time}')\n",
    "gc.collect()\n",
    "print('roc-auc:', roc_auc_score(y_test, y_score_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 391,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "roc-auc: 0.9210667534536446\n"
     ]
    }
   ],
   "source": [
    "df_pred = pd.DataFrame(scaler_imp.transform(df_imp2), columns=df_imp2.columns)\n",
    "y_score_df = lr_v2_imp.predict_proba(df_pred)[:,1]\n",
    "print('roc-auc:', roc_auc_score(y, y_score_df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 392,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 392,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr_v2_imp.C"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 393,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_bin = pd.DataFrame({'code': code, 'target': y, 'y_score': y_score_df})\n",
    "df_bin['bin_int'] = pd.cut(df_bin['y_score'], bins=10, labels=list(range(1, 11)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 394,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10     108353\n",
       "9      115859\n",
       "8      125357\n",
       "7      136659\n",
       "6      155325\n",
       "5      185599\n",
       "4      236594\n",
       "3      415559\n",
       "2     1706891\n",
       "1     1818204\n",
       "Name: bin_int, dtype: int64"
      ]
     },
     "execution_count": 394,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bin.bin_int.value_counts().sort_index(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 395,
   "metadata": {},
   "outputs": [],
   "source": [
    "real_rate_upd = len(df_bin[df_bin.target==1]) / len(df_bin) #пересчет real_rate\n",
    "df_bin['Adj_P1_upd'] = (1/(1 + ((1/real_rate_upd) - 1) / ((1/0.5) - 1) * ((1/df_bin.y_score) - 1)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 396,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0014201502677643673"
      ]
     },
     "execution_count": 396,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "real_rate_upd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 397,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7107"
      ]
     },
     "execution_count": 397,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df_bin[df_bin.target==1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 398,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df_bin[df_bin['Adj_P1_upd']>0.01]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 399,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_stat = df_bin.groupby(by=['bin_int']).agg({'target':['sum', 'mean', 'count'], \n",
    "                                                  'y_score':['sum', 'mean'], \n",
    "                                                  #'Adj_P1':['sum', 'mean'],\n",
    "                                                  'Adj_P1_upd':['sum', 'mean'] \n",
    "                                                 })"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 400,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"3\" halign=\"left\">target</th>\n",
       "      <th colspan=\"2\" halign=\"left\">y_score</th>\n",
       "      <th colspan=\"2\" halign=\"left\">Adj_P1_upd</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>sum</th>\n",
       "      <th>mean</th>\n",
       "      <th>count</th>\n",
       "      <th>sum</th>\n",
       "      <th>mean</th>\n",
       "      <th>sum</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bin_int</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>124.0</td>\n",
       "      <td>0.000068</td>\n",
       "      <td>1818204</td>\n",
       "      <td>120641.468750</td>\n",
       "      <td>0.066352</td>\n",
       "      <td>184.591064</td>\n",
       "      <td>0.000102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>393.0</td>\n",
       "      <td>0.000230</td>\n",
       "      <td>1706891</td>\n",
       "      <td>227607.640625</td>\n",
       "      <td>0.133346</td>\n",
       "      <td>375.929016</td>\n",
       "      <td>0.000220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>193.0</td>\n",
       "      <td>0.000464</td>\n",
       "      <td>415559</td>\n",
       "      <td>101409.578125</td>\n",
       "      <td>0.244032</td>\n",
       "      <td>191.830917</td>\n",
       "      <td>0.000462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>233.0</td>\n",
       "      <td>0.000985</td>\n",
       "      <td>236594</td>\n",
       "      <td>82032.062500</td>\n",
       "      <td>0.346721</td>\n",
       "      <td>179.459656</td>\n",
       "      <td>0.000759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>305.0</td>\n",
       "      <td>0.001643</td>\n",
       "      <td>185599</td>\n",
       "      <td>83249.929688</td>\n",
       "      <td>0.448547</td>\n",
       "      <td>215.757202</td>\n",
       "      <td>0.001162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>324.0</td>\n",
       "      <td>0.002086</td>\n",
       "      <td>155325</td>\n",
       "      <td>85208.148438</td>\n",
       "      <td>0.548580</td>\n",
       "      <td>269.999817</td>\n",
       "      <td>0.001738</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>444.0</td>\n",
       "      <td>0.003249</td>\n",
       "      <td>136659</td>\n",
       "      <td>88720.062500</td>\n",
       "      <td>0.649208</td>\n",
       "      <td>362.523071</td>\n",
       "      <td>0.002653</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>625.0</td>\n",
       "      <td>0.004986</td>\n",
       "      <td>125357</td>\n",
       "      <td>93929.062500</td>\n",
       "      <td>0.749292</td>\n",
       "      <td>540.119080</td>\n",
       "      <td>0.004309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>939.0</td>\n",
       "      <td>0.008105</td>\n",
       "      <td>115859</td>\n",
       "      <td>98379.851562</td>\n",
       "      <td>0.849134</td>\n",
       "      <td>962.058350</td>\n",
       "      <td>0.008304</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3527.0</td>\n",
       "      <td>0.032551</td>\n",
       "      <td>108353</td>\n",
       "      <td>103102.460938</td>\n",
       "      <td>0.951542</td>\n",
       "      <td>9065.205078</td>\n",
       "      <td>0.083664</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         target                           y_score             Adj_P1_upd  \\\n",
       "            sum      mean    count            sum      mean          sum   \n",
       "bin_int                                                                    \n",
       "1         124.0  0.000068  1818204  120641.468750  0.066352   184.591064   \n",
       "2         393.0  0.000230  1706891  227607.640625  0.133346   375.929016   \n",
       "3         193.0  0.000464   415559  101409.578125  0.244032   191.830917   \n",
       "4         233.0  0.000985   236594   82032.062500  0.346721   179.459656   \n",
       "5         305.0  0.001643   185599   83249.929688  0.448547   215.757202   \n",
       "6         324.0  0.002086   155325   85208.148438  0.548580   269.999817   \n",
       "7         444.0  0.003249   136659   88720.062500  0.649208   362.523071   \n",
       "8         625.0  0.004986   125357   93929.062500  0.749292   540.119080   \n",
       "9         939.0  0.008105   115859   98379.851562  0.849134   962.058350   \n",
       "10       3527.0  0.032551   108353  103102.460938  0.951542  9065.205078   \n",
       "\n",
       "                   \n",
       "             mean  \n",
       "bin_int            \n",
       "1        0.000102  \n",
       "2        0.000220  \n",
       "3        0.000462  \n",
       "4        0.000759  \n",
       "5        0.001162  \n",
       "6        0.001738  \n",
       "7        0.002653  \n",
       "8        0.004309  \n",
       "9        0.008304  \n",
       "10       0.083664  "
      ]
     },
     "execution_count": 400,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_stat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 401,
   "metadata": {},
   "outputs": [],
   "source": [
    "#class_weight = 'balanced', solver='sag', random_state=42\n",
    "parameters_grid = {\n",
    "    #'penalty': ['l2'], - из-за solver=sag\n",
    "    'C': np.linspace(0.1, 30, num=5),\n",
    "    'solver': ['sag', 'saga', 'liblinear'],\n",
    "    #'l1_ratio': [0.1, 0.25],\n",
    "    'max_iter': [100, 200]\n",
    "}\n",
    "\n",
    "lr3 = LogisticRegression(class_weight='balanced', random_state=42)\n",
    "cv = StratifiedKFold(n_splits=3, shuffle=True)\n",
    "# если указать n_jobs>4, то программа падает на обучении, не хвататает памяти. \n",
    "# n_jobs=-1 - использовать все имеющиеся ядра, не надо использовать\n",
    "grid_cv = GridSearchCV(lr3, parameters_grid,\n",
    "                       scoring='roc_auc', cv=cv, verbose=4, refit=True,  n_jobs=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 402,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Начинаю поиск по сетке для логистической регрессии, тек.время: 2022-10-26 09:59:45\n",
      "Fitting 3 folds for each of 30 candidates, totalling 90 fits\n",
      "Закончил поиск по сетке. Общее время обучения: 5:30:13.677855\n",
      "0.9200504310849157\n",
      "{'C': 15.049999999999999, 'max_iter': 100, 'solver': 'saga'}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The max_iter was reached which means the coef_ did not converge\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "799"
      ]
     },
     "execution_count": 402,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gc.collect()\n",
    "global_start_time = datetime.now()\n",
    "print(f'Начинаю поиск по сетке для логистической регрессии, тек.время: {global_start_time.strftime(\"%Y-%m-%d %H:%M:%S\")}')\n",
    "grid_cv.fit(X_train, y_train)\n",
    "global_end_time = datetime.now()\n",
    "print(f'Закончил поиск по сетке. Общее время обучения: {global_end_time - global_start_time}')\n",
    "print(grid_cv.best_score_)\n",
    "print(grid_cv.best_params_)\n",
    "gc.collect()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 403,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "roc-auc: 0.9209939491999374\n"
     ]
    }
   ],
   "source": [
    "y_score_cv_df = grid_cv.predict_proba(df_pred)[:,1]\n",
    "print('roc-auc:', roc_auc_score(y, y_score_cv_df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 404,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_bin = pd.DataFrame({'code': code, 'target': y, 'y_score': y_score_cv_df})\n",
    "df_bin['bin_int'] = pd.cut(df_bin['y_score'], bins=10, labels=list(range(1, 11)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 405,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10     105198\n",
       "9      124103\n",
       "8      140987\n",
       "7      155249\n",
       "6      184148\n",
       "5      224781\n",
       "4      303008\n",
       "3      648063\n",
       "2     2773058\n",
       "1      345805\n",
       "Name: bin_int, dtype: int64"
      ]
     },
     "execution_count": 405,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bin.bin_int.value_counts().sort_index(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 406,
   "metadata": {},
   "outputs": [],
   "source": [
    "real_rate_upd = len(df_bin[df_bin.target==1]) / len(df_bin) #пересчет real_rate\n",
    "df_bin['Adj_P1_upd'] = (1/(1 + ((1/real_rate_upd) - 1) / ((1/0.5) - 1) * ((1/df_bin.y_score) - 1)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 407,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_stat = df_bin.groupby(by=['bin_int']).agg({'target':['sum', 'mean', 'count'], \n",
    "                                                  'y_score':['sum', 'mean'], \n",
    "                                                  #'Adj_P1':['sum', 'mean'],\n",
    "                                                  'Adj_P1_upd':['sum', 'mean'] \n",
    "                                                 })"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 408,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"3\" halign=\"left\">target</th>\n",
       "      <th colspan=\"2\" halign=\"left\">y_score</th>\n",
       "      <th colspan=\"2\" halign=\"left\">Adj_P1_upd</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>sum</th>\n",
       "      <th>mean</th>\n",
       "      <th>count</th>\n",
       "      <th>sum</th>\n",
       "      <th>mean</th>\n",
       "      <th>sum</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bin_int</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8.0</td>\n",
       "      <td>0.000023</td>\n",
       "      <td>345805</td>\n",
       "      <td>28594.851562</td>\n",
       "      <td>0.082691</td>\n",
       "      <td>44.367172</td>\n",
       "      <td>0.000128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>384.0</td>\n",
       "      <td>0.000138</td>\n",
       "      <td>2773058</td>\n",
       "      <td>400439.500000</td>\n",
       "      <td>0.144404</td>\n",
       "      <td>670.211365</td>\n",
       "      <td>0.000242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>222.0</td>\n",
       "      <td>0.000343</td>\n",
       "      <td>648063</td>\n",
       "      <td>156726.171875</td>\n",
       "      <td>0.241838</td>\n",
       "      <td>295.569305</td>\n",
       "      <td>0.000456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>215.0</td>\n",
       "      <td>0.000710</td>\n",
       "      <td>303008</td>\n",
       "      <td>104913.062500</td>\n",
       "      <td>0.346239</td>\n",
       "      <td>229.359222</td>\n",
       "      <td>0.000757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>290.0</td>\n",
       "      <td>0.001290</td>\n",
       "      <td>224781</td>\n",
       "      <td>100851.804688</td>\n",
       "      <td>0.448667</td>\n",
       "      <td>261.452759</td>\n",
       "      <td>0.001163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>357.0</td>\n",
       "      <td>0.001939</td>\n",
       "      <td>184148</td>\n",
       "      <td>100960.984375</td>\n",
       "      <td>0.548260</td>\n",
       "      <td>319.684998</td>\n",
       "      <td>0.001736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>456.0</td>\n",
       "      <td>0.002937</td>\n",
       "      <td>155249</td>\n",
       "      <td>100769.023438</td>\n",
       "      <td>0.649080</td>\n",
       "      <td>411.598755</td>\n",
       "      <td>0.002651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>677.0</td>\n",
       "      <td>0.004802</td>\n",
       "      <td>140987</td>\n",
       "      <td>105632.046875</td>\n",
       "      <td>0.749233</td>\n",
       "      <td>607.252380</td>\n",
       "      <td>0.004307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1014.0</td>\n",
       "      <td>0.008171</td>\n",
       "      <td>124103</td>\n",
       "      <td>105340.742188</td>\n",
       "      <td>0.848817</td>\n",
       "      <td>1027.755005</td>\n",
       "      <td>0.008281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3484.0</td>\n",
       "      <td>0.033119</td>\n",
       "      <td>105198</td>\n",
       "      <td>99951.210938</td>\n",
       "      <td>0.950125</td>\n",
       "      <td>8074.287109</td>\n",
       "      <td>0.076753</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         target                           y_score             Adj_P1_upd  \\\n",
       "            sum      mean    count            sum      mean          sum   \n",
       "bin_int                                                                    \n",
       "1           8.0  0.000023   345805   28594.851562  0.082691    44.367172   \n",
       "2         384.0  0.000138  2773058  400439.500000  0.144404   670.211365   \n",
       "3         222.0  0.000343   648063  156726.171875  0.241838   295.569305   \n",
       "4         215.0  0.000710   303008  104913.062500  0.346239   229.359222   \n",
       "5         290.0  0.001290   224781  100851.804688  0.448667   261.452759   \n",
       "6         357.0  0.001939   184148  100960.984375  0.548260   319.684998   \n",
       "7         456.0  0.002937   155249  100769.023438  0.649080   411.598755   \n",
       "8         677.0  0.004802   140987  105632.046875  0.749233   607.252380   \n",
       "9        1014.0  0.008171   124103  105340.742188  0.848817  1027.755005   \n",
       "10       3484.0  0.033119   105198   99951.210938  0.950125  8074.287109   \n",
       "\n",
       "                   \n",
       "             mean  \n",
       "bin_int            \n",
       "1        0.000128  \n",
       "2        0.000242  \n",
       "3        0.000456  \n",
       "4        0.000757  \n",
       "5        0.001163  \n",
       "6        0.001736  \n",
       "7        0.002651  \n",
       "8        0.004307  \n",
       "9        0.008281  \n",
       "10       0.076753  "
      ]
     },
     "execution_count": 408,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_stat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 409,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Сохранение модели\n",
      "Ok\n"
     ]
    }
   ],
   "source": [
    "print('Сохранение модели')\n",
    "pkl_filename = \"сс_lr_grid_imp_columns.pkl\"\n",
    "with open(pkl_filename, 'wb') as file:\n",
    "    pickle.dump(grid_cv, file)\n",
    "print('Ok')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 410,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Загрузка модели\n",
      "Ok\n",
      "Загрузка StandartScaler\n",
      "Ok\n",
      "Загрузка списка важных полей\n"
     ]
    }
   ],
   "source": [
    "print('Загрузка модели')\n",
    "pkl_filename = \"сс_lr_grid_imp_columns.pkl\"\n",
    "with open(pkl_filename, 'rb') as file:\n",
    "    lr_v3_imp = pickle.load(file)\n",
    "print('Ok')\n",
    "print('Загрузка StandartScaler')\n",
    "pkl_filename = \"scaler_imp.pkl\"\n",
    "with open(pkl_filename, 'rb') as file:\n",
    "    scaler_imp = pickle.load(file)\n",
    "print('Ok')\n",
    "print('Загрузка списка важных полей')\n",
    "with open('cc_lr_list_feature_imp.txt', 'r') as file:\n",
    "    list_lr_v2_imp = file.readlines()\n",
    "#удаляем символы перевода на новую строку\n",
    "list_lr_v2_imp = [x.strip() for x in list_lr_v2_imp]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 411,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "roc-auc: 0.9209939491999374\n"
     ]
    }
   ],
   "source": [
    "y_score_cv2_df = lr_v3_imp.predict_proba(df_pred)[:,1]\n",
    "print('roc-auc:', roc_auc_score(y, y_score_cv2_df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
